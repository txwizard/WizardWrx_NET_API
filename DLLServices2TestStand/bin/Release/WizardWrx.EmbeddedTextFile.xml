<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WizardWrx.EmbeddedTextFile</name>
    </assembly>
    <members>
        <member name="T:WizardWrx.EmbeddedTextFile.ByteOrderMark">
            <summary>
            Use this class to evaluate arbitrary byte arrays for the presence of a Byte Order Mark.
            </summary>
        </member>
        <member name="T:WizardWrx.EmbeddedTextFile.ByteOrderMark.BOMType">
            <summary>
            Members of this enumeration report the type of byte order mark, if
            any, present at its beginning.
            </summary>
        </member>
        <member name="F:WizardWrx.EmbeddedTextFile.ByteOrderMark.BOMType.None">
            <summary>
            The array has no Byte Order Mark.
            </summary>
        </member>
        <member name="F:WizardWrx.EmbeddedTextFile.ByteOrderMark.BOMType.UTF8">
            <summary>
            The array has a UTF-8 Byte Order Mark.
            </summary>
        </member>
        <member name="F:WizardWrx.EmbeddedTextFile.ByteOrderMark.BOMType.UTF16LE">
            <summary>
            The array has a UTF-16 Byte Order Mark that indicates 
            little-endian character encoding.
            </summary>
            <remarks>
            The little-endian encoding is the native encoding of the entire
            Intel processor family and its clones (e. g., AMD).
            </remarks>
        </member>
        <member name="F:WizardWrx.EmbeddedTextFile.ByteOrderMark.BOMType.UTF16BE">
            <summary>
            The array has a UTF-16 Byte Order Mark that indicates big-endian
            character encoding.
            </summary>
            <remarks>
            The big-endian encoding is the native encoding of the MIPS Alpha
            family of processors, among others.
            </remarks>
        </member>
        <member name="F:WizardWrx.EmbeddedTextFile.ByteOrderMark.BOMType.UnicodeLittleEndian">
            <summary>
            UnicodeLittleEndian is a synonym of UTF16LE, the encoding that
            corresponds to the wide character encoding on Microsoft Windows.
            </summary>
        </member>
        <member name="F:WizardWrx.EmbeddedTextFile.ByteOrderMark.BOMType.UnicodeBigEndian">
            <summary>
            UnicodeLittleEndian is a synonym of UTF16BE, the encoding that
            corresponds to the wide character encoding on Microsoft Windows,
            running on a big-endian processor, which MAY include code that
            runs on ARM processors.
            </summary>
        </member>
        <member name="F:WizardWrx.EmbeddedTextFile.ByteOrderMark.BOMType.UTF32LE">
            <summary>
            The array has a UTF-32 Byte Order Mark that indicates 
            little-endian character encoding.
            </summary>
            <remarks>
            This seldom-used encoding is defined for completeness, and in
            anticipation of its usage increasing.
            </remarks>
        </member>
        <member name="F:WizardWrx.EmbeddedTextFile.ByteOrderMark.BOMType.UTF32BE">
            <summary>
            The array has a UTF-32 Byte Order Mark that indicates big-endian
            character encoding.
            </summary>
            <remarks>
            This seldom-used encoding is defined for completeness, and in
            anticipation of its usage increasing.
            </remarks>
        </member>
        <member name="M:WizardWrx.EmbeddedTextFile.ByteOrderMark.#ctor(System.Byte[])">
            <summary>
            The only public constructor demands a reference to the byte array to evaluate.
            </summary>
            <param name="bytes">
            Supply a reference to the byte array to test for a Byte Order Mark.
            </param>
        </member>
        <member name="P:WizardWrx.EmbeddedTextFile.ByteOrderMark.Kind">
            <summary>
            This read-only property returns the type of Byte Order Mark present
            in the byte array that was supplied to the constructor.
            </summary>
        </member>
        <member name="P:WizardWrx.EmbeddedTextFile.ByteOrderMark.Length">
            <summary>
            This read-only property returns the length of the Byte Order Mark.
            </summary>
            <remarks>
            Since the property is initialized on first use, it may display an
            invalid value of -1 in a watch window.
            </remarks>
        </member>
        <member name="M:WizardWrx.EmbeddedTextFile.ByteOrderMark.TestForBOM">
            <summary>
            If it hasn't been directly called, the first call to either property
            getter calls this method, so that the work required to evaluate the
            array for a byte order mark is deferred until it is needed, and it
            is never subsequently repeated for the lifetime of the instance.
            </summary>
        </member>
        <member name="T:WizardWrx.EmbeddedTextFile.Readers">
            <summary>
            This static class exposes methods for loading text from custom resources
            that are embedded in an assembly.
            </summary>
        </member>
        <member name="M:WizardWrx.EmbeddedTextFile.Readers.LoadTextFileFromCallingAssembly(System.String)">
            <summary>
            Load the lines of a plain ASCII text file that has been stored with
            the assembly as a embedded resource into an array of native strings.
            </summary>
            <param name="pstrResourceName">
            Specify the absolute (fully qualified) resource name, which is its
            source file name appended to the default assembly namespace.
            </param>
            <returns>
            The return value is an array of Unicode strings, each of which is
            the text of a line from the original text file, sans terminator.
            </returns>
            <see cref="M:WizardWrx.EmbeddedTextFile.Readers.LoadTextFileFromAnyAssembly(System.String,System.Reflection.Assembly)"/>
            <seealso cref="M:WizardWrx.EmbeddedTextFile.Readers.LoadTextFileFromEntryAssembly(System.String)"/>
        </member>
        <member name="M:WizardWrx.EmbeddedTextFile.Readers.LoadTextFileFromEntryAssembly(System.String)">
            <summary>
            Load the lines of a plain ASCII text file that has been stored with
            the assembly as a embedded resource into an array of native strings.
            </summary>
            <param name="pstrResourceName">
            Specify the fully qualified resource name, which is its source file
            name appended to the default application namespace.
            </param>
            <returns>
            The return value is an array of Unicode strings, each of which is
            the text of a line from the original text file, sans terminator.
            </returns>
            <see cref="M:WizardWrx.EmbeddedTextFile.Readers.LoadTextFileFromAnyAssembly(System.String,System.Reflection.Assembly)"/>
            <seealso cref="M:WizardWrx.EmbeddedTextFile.Readers.LoadTextFileFromCallingAssembly(System.String)"/>
        </member>
        <member name="M:WizardWrx.EmbeddedTextFile.Readers.LoadTextFileFromAnyAssembly(System.String,System.Reflection.Assembly)">
            <summary>
            Load the lines of a plain ASCII text file that has been stored with
            a specified assembly as a embedded resource into an array of native
            strings.
            </summary>
            <param name="pstrResourceName">
            Specify the absolute (fully qualified) resource name, which is its
            source file name appended to the default assembly namespace name.
            </param>
            <param name="pasmSource">
            Pass in a reference to the Assembly from which you expect to load
            the text file. Use any means at your disposal to obtain a reference
            from the System.Reflection namespace.
            </param>
            <returns></returns>
            <seealso cref="M:WizardWrx.EmbeddedTextFile.Readers.LoadTextFileFromCallingAssembly(System.String)"/>
            <seealso cref="M:WizardWrx.EmbeddedTextFile.Readers.LoadTextFileFromEntryAssembly(System.String)"/>
        </member>
        <member name="M:WizardWrx.EmbeddedTextFile.Readers.LoadBinaryResourceFromAnyAssembly(System.String,System.Reflection.Assembly)">
             <summary>
             Load the named embedded binary resource into a byte array.
             </summary>
             <param name="pstrResourceName">
             Specify the external name of the file as it appears in the source
             file tree and the Solution Explorer.
             </param>
             <param name="pasmSource">
             Supply a System.Reflection.Assembly reference to the assembly that
             contains the embedded resource.
             </param>
             <returns>
             If the function succeeds, it returns a byte array containing the raw
             bytes that comprise the embedded resource. Hence, this method can
             load ANY embedded resource.
             </returns>
             <remarks>
             Since all other resource types ultimately come out as byte arrays,
             the text file loaders call upon this routine to extract their data.
            
             The notes in the cited reference refreshed my memory of observations
             that I made and documented a couple of weeks ago. However, it was a
             lot easier to let Google find a reference document, which was
             intended for students in the Computer Science department at Columbia
             University, at http://www1.cs.columbia.edu/~lok/csharp/refdocs/System.IO/types/Stream.html"/>,
             than find my own source.
             </remarks>
             <exception cref="T:System.Exception">
             An Exception (the base Exception type) arises when the method is
             called with a <paramref name="pstrResourceName"/> value that cannot
             be found in the <paramref name="pasmSource"/> assembly. When the
             exception arises during the read operation, the generic Exception
             wraps an InvalidDataException exception, which is returned as its
             InnnerException property.
             </exception>
        </member>
        <member name="M:WizardWrx.EmbeddedTextFile.Readers.NameValueCollectionFromEmbbededList(System.String,System.String)">
             <summary>
             Construct a NameValueCollection from the tab delimited list read
             from a text file stored in an embedded resource.
             </summary>
             <param name="pstrUnqualifiedResourceName">
             Specify the name of the text file as it appears in the Solution
             Explorer (or the Windows Explorer, for that matter).
            
             IMPORTNAT: The file must be marked as an embedded resource; do this
             in the Solution Explorer by displaying the properties of the file.
             </param>
             <param name="pstrExpectedLabelRow">
             The specified string is checked against the label row; unless both
             are identical, the resource is assumed to be corrupted, and the
             method throws an exception and croaks.
             </param>
             <returns>
             If the method succeeds, it returns a NameValueCollection of
             key/value pairs that contains exactly one value per key.
             </returns>
             <exception cref="T:System.ArgumentException">
             And ArgumentException is thrown when the data file referenced by
             <paramref name="pstrUnqualifiedResourceName"/> contains duplicate
             keys, if one of the records contains two or more values, or the
             input file is empty. The messages attached to the exceptions are
             explicit about which of the three conditions caused the exception,
             and they attempt to provide enough detail to enable the programmer
             to quickly identify and resolve the problem.
             </exception>
        </member>
        <member name="M:WizardWrx.EmbeddedTextFile.Readers.StringFromANSICharacterArray(System.Byte[])">
            <summary>
            Transform an array of bytes, each representing one ANSI character, into a string.
            </summary>
            <param name="pabytWholeFile">
            Specify the array to transform.
            </param>
            <returns>
            The <paramref name="pabytWholeFile"/> array is returned as a string.
            </returns>
            <remarks>
            I did this refactoring, thinking that I had a new use for the code,
            only to realize as I finished cleaning it up that I can't use it,
            because it deals in ANSI characters, and my present need involves
            Unicode characters. Nevertheless, the exercise is not a total loss,
            because it reminded me of the trick that I needed to transform the
            array of Unicode characters into a string.
            </remarks>
        </member>
        <member name="M:WizardWrx.EmbeddedTextFile.Readers.StringOfLinesToArray(System.String)">
            <summary>
            Split a string containing lines of text into an array of strings.
            </summary>
            <param name="pstrLines">
            String containing lines of text, terminated by CR/LF pairs.
            </param>
            <returns>
            Array of strings, one line per string. Blank lines are preserved as
            empty strings.
            </returns>
        </member>
        <member name="M:WizardWrx.EmbeddedTextFile.Readers.StringOfLinesToArray(System.String,System.StringSplitOptions)">
            <summary>
            Split a string containing lines of text into an array of strings,
            as modified by the StringSplitOptions flag.
            </summary>
            <param name="pstrLines">
            String containing lines of text, terminated by CR/LF pairs.
            </param>
            <param name="penmStringSplitOptions">
            A member of the StringSplitOptions enumeration, presumably other
            than StringSplitOptions.None, which is assumed by the first
            overload. The only option supported by version 2 of the Microsoft
            .NET CLR is RemoveEmptyEntries.
            </param>
            <returns>
            Array of strings, one line per string. Blank lines are preserved as
            empty strings unless penmStringSplitOptions is RemoveEmptyEntries,
            as is most likely to be the case.
            </returns>
            <remarks>
            Use this overload to convert a string, discarding blank lines.
            </remarks>
        </member>
        <member name="M:WizardWrx.EmbeddedTextFile.Readers.StringToArray(System.String)">
            <summary>
            Return a one-element array containing the input string.
            </summary>
            <param name="pstr">
            String to place into the returned array.
            </param>
            <returns>
            Array of strings, containing exactly one element, which contains
            the single input string.
            </returns>
        </member>
        <member name="T:WizardWrx.EmbeddedTextFile.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WizardWrx.EmbeddedTextFile.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WizardWrx.EmbeddedTextFile.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WizardWrx.EmbeddedTextFile.Properties.Resources.ERRMSG_BAD_LABEL_ROW">
            <summary>
              Looks up a localized string similar to The label row in embedded resource {0} is invalid.{3}Actual Label Row   = {1}{3}Expected Label Row = {2}.
            </summary>
        </member>
        <member name="P:WizardWrx.EmbeddedTextFile.Properties.Resources.ERRMSG_BAD_RECORD">
            <summary>
              Looks up a localized string similar to The field count in row {1} in embedded resource {0} is incorrect.{5}Actual Field Count   = {2}{5}Expected Field Count = {3}{5}Complete Row         = {4}.
            </summary>
        </member>
        <member name="P:WizardWrx.EmbeddedTextFile.Properties.Resources.ERRMSG_DUPE_KEY">
            <summary>
              Looks up a localized string similar to The key field in row {1} in embedded resource {0} is a duplicate.{4}Key value    = {2}{4}Complete row = {3}.
            </summary>
        </member>
        <member name="P:WizardWrx.EmbeddedTextFile.Properties.Resources.ERRMSG_EMBEDDED_RESOURCE_NOT_FOUND">
            <summary>
              Looks up a localized string similar to Resource {0} cannot be found in assembly {1}..
            </summary>
        </member>
        <member name="P:WizardWrx.EmbeddedTextFile.Properties.Resources.ERRMSG_EMBEDDED_RESOURCE_READ_ERROR">
            <summary>
              Looks up a localized string similar to An error occurred while reading data from resources embedded in an assembly.{3}Assembly Full Name     = {0}{3}Internal Resource Name = {1}{3}I/O Error Message      = {2}{3}{3}The associated Inner Exception may contain additional clues..
            </summary>
        </member>
        <member name="P:WizardWrx.EmbeddedTextFile.Properties.Resources.ERRMSG_EMBEDDED_RESOURCE_READ_TRUNCATED">
            <summary>
              Looks up a localized string similar to An error occurred while reading a file from resources embedded in an assembly.{3}Internal Name = {0}{3}Expected File Length (bytes) = {1}{3}Bytes successfully read = {2}.
            </summary>
        </member>
        <member name="P:WizardWrx.EmbeddedTextFile.Properties.Resources.ERRMSG_EMPTY_MAP">
            <summary>
              Looks up a localized string similar to Embedded key map {0} is empty..
            </summary>
        </member>
    </members>
</doc>
