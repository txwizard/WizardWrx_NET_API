<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WizardWrx.FormatStringEngine</name>
    </assembly>
    <members>
        <member name="T:WizardWrx.FormatStringEngine.FormatItem">
             <summary>
             This is an infrastructure class; instances represent a FormatItem found
             in the FormatString associated with the FormatStringParser that owns it.
            
             The static methods of this class are public, and are very handy for
             creating compact summary reports.
            
             Use them to construct composite format items that have their
             characteristics, especially their widths, established at runtime.
             Setting the width dynamically permits summary totals and their labels,
             all of which may have widely varying widths that are unknown in advance
             to be set in such a way that a set of numeric values and their labels
             can be printed with labels on the left, and a minimum amount of white
             space between the longest label and the numbers.
             </summary>
             <remarks>
             While the class, itself, is marked Public, everything else about it is
             marked as Internal, so that only instances of classes defined in this
             assembly can create instances, while instances of the FormatStringParser
             class expose a collection of them through its FormatItems property, a
             FormatItemsCollection.
             </remarks>
        </member>
        <member name="T:WizardWrx.FormatStringEngine.FormatItem.Alignment">
            <summary>
            If specified, the Width property supports two alignments, Left and
            Right.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatItem.Alignment.Unspecified">
            <summary>
            Unless the item has an Alignment, this property is unspecified,
            and algnment is moot, since no extra characters are reserved for
            padding.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatItem.Alignment.Left">
            <summary>
            Left align the text within the alloted width.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatItem.Alignment.Right">
             <summary>
             Right align the text within the alloted width.
            
             If the item has an Alignment, its default is right.
             </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatItem.APPEARANCE_ORDER_NOT_SET">
            <summary>
            The ApperanceOrder property evaluating to this value means that the
            property is uninitialized.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatItem.INVALID_INDEX">
            <summary>
            Make the lower bound of an index visible to class consumers.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatItem.INVALID_OFFSET">
            <summary>
            Make the lower bound of a string offset visible to class consumers.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatItem.INVALID_RAW_LENGTH">
            <summary>
            Make the lower bound of the RawLength property visible to class
            consumers.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatItem.INVALID_WIDTH">
            <summary>
            Make the lower bound of the MinimumWidth property visible to class
            consumers.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatItem.MINIMUM_VALID_FORMAT_ITEM_INDEX">
            <summary>
            Like all good array subscripts, format item indexes start at zero.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatItem.INTEGER_PER_REG_SETTINGS">
            <summary>
            Like all good array subscripts, format item indexes start at zero.
            </summary>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#NFormatString"/>
            <see cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS"/>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.#ctor">
            <summary>
            The default constructor satisfies a requirement of the IList
            interface, required for storing a collection of these in a List that
            is created and maintained by instances of the FormatStringParser
            class.
            </summary>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.#ctor(System.Int32,System.Int32)">
             <summary>
             This constructor initializes its StartOffset and Index properties.
            
             Please see the remarks for important information about these values.
             </summary>
             <param name="pintStartOffset">
             By defining the starting offset as a signed integer, its backing
             store can be initialized to minus one, an invalid value.
            
             Please see the remarks for important information about these values.
             </param>
             <param name="pintIndex">
             By defining the index as a signed integer, its backing store can be
             initialized to minus one, an invalid value.
            
             Please see the remarks for important information about these values.
             </param>
             <remarks>
             The StartOffset property is immutable, while the Index property may
             be subsequently amended by calling the UpdateIndex method on the
             instance. The synopsis of the UpdateIndex method explains in a bit
             greater detail.
             </remarks>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.FormatItem.AppearanceOrder">
            <summary>
            Gets the AppearanceOrder property, which is the order, counting from
            1, of its appearance in the format string.
            </summary>
            <remarks>
            This property is set when the Add method of a FormatItemsCollection
            object calls the SetAppearanceOrder on the instance just added. This
            is achieved by overriding the Add method of its base class.
            </remarks>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.FormatItem.Index">
             <summary>
             Gets the Index property of the item, which is the first, or only,
             number found within the item string.
            
             A return value of minus one means that the Index property is
             uninitialized, which should be true only when the entire object is
             uninitialized.
             </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.FormatItem.ItemFormat">
             <summary>
             Gets or sets the optional ItemFormat property of the item.
            
             A return value of null (Nothing in Visual Basic) means that the
             ItemFormat property is undefined, which is permissible, since it is
             optional.
             </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.FormatItem.MinimumWidth">
             <summary>
             Gets or sets the optional MinimumWidth property of the item.
            
             A return value of zero means that the MinimumWidth property is
             undefined, which is permissible, since it is optional.
             </summary>
             <remarks>
             Once initialized, this property may subsequently be updated by
             calling the UpdateMinimumWidth method on the instance. The
             synopsis of the UpdateMinimumWidth method explains in greater
             detail.
             </remarks>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.FormatItem.RawLength">
             <summary>
             Gets the RawLength property, the length, in characters, of the raw
             format item in the format string.
            
             A return value of zero means that the StartOffset property is
             uninitialized or partially initialized.
             </summary>
             <remarks>
             Instance method SetRawLength is called when the closing French brace
             is found to set this property.
             </remarks>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.FormatItem.StartOffset">
             <summary>
             Gets the required StartOffset property, the offset, counting from 0,
             where the format item appears in the format string.
            
             A return value of minus one means that the StartOffset property is
             uninitialized, which should be true only when the entire object is
             uninitialized.
             </summary>
             <remarks>
             This property is immutable.
             </remarks>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.FormatItem.TextAlignment">
            <summary>
            Gets or sets the Alignment property, if any, associated with the
            item.
            </summary>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.UInt32,System.UInt32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String)">
             <summary>
             Assemble a composite format item from its constituents.
             </summary>
             <param name="puintItemIndex">
             The index is a standard zero based array subscript which corresponds
             to the position of an item in a list of objects. The list happens to
             be the items that correspond to the format items in a format string.
             </param>
             <param name="puintMaximumWidth">
             The maximum width is a positive integer that specifies the desired
             width of the item.
             </param>
             <param name="penmAlignment">
             Specify Left or Right. Center alignment is unsupported, although it
             could be achieved with custom code.
             </param>
             <param name="pstrFormatString">
             Specify a Standard Numeric, Date, or Text format string or a custom
             string composed around a standard string.
             </param>
             <returns>
             The returned string is ready to insert into a complete format string
             for use with string.Format, Console.WriteLine, and their numerous
             cousins.
            
             The safest way to insert it into a format string is by calling a
             companion method, UpgradeFormatItem, which expects a format string,
             puintItemIndex, and the string returned by this method.
             </returns>
             <see cref="M:WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,System.String)"/>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.Int32,System.UInt32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String)">
             <summary>
             Assemble a composite format item from its constituents.
             </summary>
             <param name="pintItemIndex">
             The index is a standard zero based array subscript which corresponds
             to the position of an item in a list of objects. The list happens to
             be the items that correspond to the format items in a format string.
             </param>
             <param name="puintMaximumWidth">
             The maximum width is a positive integer that specifies the desired
             width of the item.
             </param>
             <param name="penmAlignment">
             Specify Left or Right. Center alignment is unsupported, although it
             could be achieved with custom code.
             </param>
             <param name="pstrFormatString">
             Specify a Standard Numeric, Date, or Text format string or a custom
             string composed around a standard string.
             </param>
             <returns>
             The returned string is ready to insert into a complete format string
             for use with string.Format, Console.WriteLine, and their numerous
             cousins.
            
             The safest way to insert it into a format string is by calling a
             companion method, UpgradeFormatItem, which expects a format string,
             puintItemIndex, and the string returned by this method.
             </returns>
             <see cref="M:WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,System.String)"/>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.UInt32,System.Int32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String)">
             <summary>
             Assemble a composite format item from its constituents.
             </summary>
             <param name="puintItemIndex">
             The index is a standard zero based array subscript which corresponds
             to the position of an item in a list of objects. The list happens to
             be the items that correspond to the format items in a format string.
             </param>
             <param name="pintMaximumWidth">
             The maximum width is a positive integer that specifies the desired
             width of the item.
             </param>
             <param name="penmAlignment">
             Specify Left or Right. Center alignment is unsupported, although it
             could be achieved with custom code.
             </param>
             <param name="pstrFormatString">
             Specify a Standard Numeric, Date, or Text format string or a custom
             string composed around a standard string.
             </param>
             <returns>
             The returned string is ready to insert into a complete format string
             for use with string.Format, Console.WriteLine, and their numerous
             cousins.
            
             The safest way to insert it into a format string is by calling a
             companion method, UpgradeFormatItem, which expects a format string,
             puintItemIndex, and the string returned by this method.
             </returns>
             <see cref="M:WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,System.String)"/>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.Int32,System.Int32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String)">
             <summary>
             Assemble a composite format item from its constituents.
             </summary>
             <param name="pintItemIndex">
             The index is a standard zero based array subscript which corresponds
             to the position of an item in a list of objects. The list happens to
             be the items that correspond to the format items in a format string.
             </param>
             <param name="pintMaximumWidth">
             The maximum width is a positive integer that specifies the desired
             width of the item.
             </param>
             <param name="penmAlignment">
             Specify Left or Right. Center alignment is unsupported, although it
             could be achieved with custom code.
             </param>
             <param name="pstrFormatString">
             Specify a Standard Numeric, Date, or Text format string or a custom
             string composed around a standard string.
             </param>
             <returns>
             The returned string is ready to insert into a complete format string
             for use with string.Format, Console.WriteLine, and their numerous
             cousins.
            
             The safest way to insert it into a format string is by calling a
             companion method, UpgradeFormatItem, which expects a format string,
             puintItemIndex, and the string returned by this method.
             </returns>
             <see cref="M:WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,System.String)"/>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String,System.Int32,System.Int32)">
            <summary>
            Replace a basic format item of the form "{n}" where "n" is the item
            number, with a composite item that right aligns a numeric value in a
            screen width that will accommodate the maximum value that will be
            substituted for it in the current instance.
            </summary>
            <param name="pstrInputFormatString">
            Specify the format string into which to substitute the composite
            format item.
            </param>
            <param name="pintItemIndex">
            Specify the index number of the item to be replaced. The string must
            contain a format item "{pintItemIndex}" which is replaced.
            </param>
            <param name="pintHighestValue">
            Specify the highest value that you expect to substitute for format
            item {pintItemIndex} such as the Count property of an array that
            holds items to be listed.
            </param>
            <returns>
            A new string is returned, with format item {pintItemIndex} replaced
            with {pintItemIndex,m:N0}, where m = the minimum width required to
            display pintHighestValue using the numeric formatting defined by the
            current Region and Language settings in the Windows Control Panel,
            overriding the decimal places value with a value of zero.
            </returns>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String,System.UInt32,System.Int32)">
            <summary>
            Replace a basic format item of the form "{n}" where "n" is the item
            number, with a composite item that right aligns a numeric value in a
            screen width that will accommodate the maximum value that will be
            substituted for it in the current instance.
            </summary>
            <param name="pstrInputFormatString">
            Specify the format string into which to substitute the composite
            format item.
            </param>
            <param name="puintItemIndex">
            Specify the index number of the item to be replaced. The string must
            contain a format item "{pintItemIndex}" which is replaced.
            </param>
            <param name="pintHighestValue">
            Specify the highest value that you expect to substitute for format
            item {pintItemIndex} such as the Count property of an array that
            holds items to be listed.
            </param>
            <returns>
            A new string is returned, with format item {pintItemIndex} replaced
            with {pintItemIndex,m:N0}, where m = the minimum width required to
            display pintHighestValue using the numeric formatting defined by the
            current Region and Language settings in the Windows Control Panel,
            overriding the decimal places value with a value of zero.
            </returns>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String,System.Int32,System.UInt32)">
            <summary>
            Replace a basic format item of the form "{n}" where "n" is the item
            number, with a composite item that right aligns a numeric value in a
            screen width that will accommodate the maximum value that will be
            substituted for it in the current instance.
            </summary>
            <param name="pstrInputFormatString">
            Specify the format string into which to substitute the composite
            format item.
            </param>
            <param name="pintItemIndex">
            Specify the index number of the item to be replaced. The string must
            contain a format item "{pintItemIndex}" which is replaced.
            </param>
            <param name="puintHighestValue">
            Specify the highest value that you expect to substitute for format
            item {pintItemIndex} such as the Count property of an array that
            holds items to be listed.
            </param>
            <returns>
            A new string is returned, with format item {pintItemIndex} replaced
            with {pintItemIndex,m:N0}, where m = the minimum width required to
            display pintHighestValue using the numeric formatting defined by the
            current Region and Language settings in the Windows Control Panel,
            overriding the decimal places value with a value of zero.
            </returns>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String,System.UInt32,System.UInt32)">
            <summary>
            Replace a basic format item of the form "{n}" where "n" is the item
            number, with a composite item that right aligns a numeric value in a
            screen width that will accommodate the maximum value that will be
            substituted for it in the current instance.
            </summary>
            <param name="pstrInputFormatString">
            Specify the format string into which to substitute the composite
            format item.
            </param>
            <param name="puintItemIndex">
            Specify the index number of the item to be replaced. The string must
            contain a format item "{pintItemIndex}" which is replaced.
            </param>
            <param name="puintHighestValue">
            Specify the highest value that you expect to substitute for format
            item {pintItemIndex} such as the Count property of an array that
            holds items to be listed.
            </param>
            <returns>
            A new string is returned, with format item {pintItemIndex} replaced
            with {pintItemIndex,m:N0}, where m = the minimum width required to
            display pintHighestValue using the numeric formatting defined by the
            current Region and Language settings in the Windows Control Panel,
            overriding the decimal places value with a value of zero.
            </returns>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String,System.Int32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.Int32,System.String)">
            <summary>
            Replace a basic format item of the form "{n}" where "n" is the item
            number, with a composite item that right aligns a numeric value in a
            screen width that will accommodate the maximum value that will be
            substituted for it in the current instance.
            </summary>
            <param name="pstrFormat">
            Specify a valid format string to upgrade. The string must contain a
            token of the form {n}, where n is equal to pintItemIndex.
            </param>
            <param name="pintItemIndex">
            Specify the index of the item to be upgraded. The integer must be
            positive, and pstrFormat must contain at least once instance of a
            correspondingly numbered format item.
            </param>
            <param name="penmAlignment">
            Specify Left or Right. Center alignment is unsupported, although it
            could be achieved with custom code.
            </param>
            <param name="pintMaximumWidth">
            The maximum width is a positive integer that specifies the desired
            width of the item.
            </param>
            <param name="pstrFormatString">
            Specify a Standard Numeric, Date, or Text format string or a custom
            string composed around a standard string.
            </param>
            <returns>
            The return value is a new format control string, with the original
            vanilla format item at the specified index replaced with a new one
            that has its width adjusted precisely to accommodate the widest
            expected value.
            </returns>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.Int32,System.String)">
             <summary>
             Upgrade a plain vanilla format item of the form {n}, where n is the
             number of a format item that exists somewhere in a format string to
             a composite string that specifies a width that is computed at run
             time to be appropriate to the current data set.
             </summary>
             <param name="pstrFormat">
             Specify a valid format string to upgrade. The string must contain a
             token of the form {n}, where n is equal to pintItemIndex.
             </param>
             <param name="pintItemIndex">
             Specify the index of the item to be upgraded. The integer must be
             positive, and pstrFormat must contain at least once instance of a
             correspondingly numbered format item.
             </param>
             <param name="pstrUpgrade">
             Specify the upgraded format item, such as the string returned by the
             static AdjustToMaximumWidth method of this class.
            
             Contrast this with pstrFormatString, which expects you to supply a
             standard or custom Numeric or DateTime format string, from which it
             constructs a complete, well formed Format Item.
             </param>
             <returns>
             If the function succeeds, the return value is the upgraded format
             string, in which the indicated plain vanilla format item has been
             replaced with a dynamically generated composite format item.
             </returns>
             <remarks>
             This routine expends a good deal of effort to validate its inputs,
             so that it can be safely used to process user input, such as data
             read into the program from a configuration file.
             </remarks>
             <see cref="M:WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.UInt32,System.UInt32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String)"/>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,System.String)">
             <summary>
             Upgrade a plain vanilla format item of the form {n}, where n is the
             number of a format item that exists somewhere in a format string to
             a composite string that specifies a width that is computed at run
             time to be appropriate to the current data set.
             </summary>
             <param name="pstrFormat">
             Specify a valid format string to upgrade. The string must contain a
             token of the form {n}, where n is equal to puintItemIndex.
             </param>
             <param name="puintItemIndex">
             Specify the index of the item to be upgraded. The integer must be
             positive, and pstrFormat must contain at least once instance of a
             correspondingly numbered format item.
             </param>
             <param name="pstrUpgrade">
             Specify the upgraded format item, such as the string returned by the
             static AdjustToMaximumWidth method of this class.
            
             Contrast this with pstrFormatString, which expects you to supply a
             standard or custom Numeric or DateTime format string, from which it
             constructs a complete, well formed Format Item.
             </param>
             <returns>
             If the function succeeds, the return value is the upgraded format
             string, in which the indicated plain vanilla format item has been
             replaced with a dynamically generated composite format item.
             </returns>
             <remarks>
             This routine expends a good deal of effort to validate its inputs,
             so that it can be safely used to process user input, such as data
             read into the program from a configuration file.
             </remarks>
             <see cref="M:WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.UInt32,System.UInt32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String)"/>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.Int32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String,System.String[])">
             <summary>
             Upgrade a plain vanilla format item of the form {n}, where n is the
             number of a format item that exists somewhere in a format string to
             a composite string that specifies a width that is computed at run
             time to be appropriate to the current data set.
             </summary>
             <param name="pstrFormat">
             Specify a valid format string to upgrade. The string must contain a
             token of the form {n}, where n is equal to pintItemIndex.
             </param>
             <param name="pintItemIndex">
             Specify the index of the item to be upgraded. The integer must be
             positive, and pstrFormat must contain at least once instance of a
             correspondingly numbered format item.
             </param>
             <param name="penmAlignment">
             Specify Left or Right. Center alignment is unsupported, although it
             could be achieved with custom code.
             </param>
             <param name="pstrFormatString">
             Specify a standard or custom Numeric or DateTime format string.
            
             Contrast this with pstrUpgrade, which expects you to supply the
             entire format item, ready for substitution.
             </param>
             <param name="pastrValueArray">
             Specify an array of strings, all of which are values intended to be
             formatted by the upgraded format item. This routine determines the
             length of the longest string, which becomes the basis of the
             alignment parameter inserted into the upgraded format item.
             </param>
             <returns>
             If the function succeeds, the return value is the upgraded format
             string, in which the indicated plain vanilla format item has been
             replaced with a dynamically generated composite format item.
             </returns>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String,System.Collections.Generic.List{System.String})">
             <summary>
             Upgrade a plain vanilla format item of the form {n}, where n is the
             number of a format item that exists somewhere in a format string to
             a composite string that specifies a width that is computed at run
             time to be appropriate to the current data set.
             </summary>
             <param name="pstrFormat">
             Specify a valid format string to upgrade. The string must contain a
             token of the form {n}, where n is equal to pintItemIndex.
             </param>
             <param name="puintItemIndex">
             Specify the index of the item to be upgraded. The integer must be
             positive, and pstrFormat must contain at least once instance of a
             correspondingly numbered format item.
             </param>
             <param name="penmAlignment">
             Specify Left or Right. Center alignment is unsupported, although it
             could be achieved with custom code.
             </param>
             <param name="pstrFormatString">
             Specify a standard or custom Numeric or DateTime format string.
            
             Contrast this with pstrUpgrade, which expects you to supply the
             entire format item, ready for substitution.
             </param>
             <param name="pastrValueArray">
             Specify an array of strings, all of which are values intended to be
             formatted by the upgraded format item. This routine determines the
             length of the longest string, which becomes the basis of the
             alignment parameter inserted into the upgraded format item.
             </param>
             <returns>
             If the function succeeds, the return value is the upgraded format
             string, in which the indicated plain vanilla format item has been
             replaced with a dynamically generated composite format item.
             </returns>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.XofY(System.UInt32,System.UInt32)">
            <summary>
            Given two integral values X and Y, where X is less than or equal to
            Y, return a string of the form "X of Y" for use on a report.
            </summary>
            <param name="puintX">
            X is the ordinal number of the item in the list, expressed as an
            unsigned integer.
            </param>
            <param name="puintY">
            Y is the total number of items in the list, expressed as an unsigned
            integer.
            </param>
            <returns>
            The returned string is literally "X of Y," where X and Y are the two
            integers representing, respectively, the current item number and the
            total number of items in the set. The formatting of X and Y is such
            that a list is guaranteed to be vertically aligned, because X is set
            in a right aligned field whose width is the same as that of a string
            representation of Y.
            </returns>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.XofY(System.Int32,System.UInt32)">
            <summary>
            Given two integral values X and Y, where X is less than or equal to
            Y, return a string of the form "X of Y" for use on a report.
            </summary>
            <param name="pintX">
            X is the ordinal number of the item in the list, expressed as a
            signed integer.
            </param>
            <param name="puintY">
            Y is the total number of items in the list, expressed as an unsigned
            integer.
            </param>
            <returns>
            The returned string is literally "X of Y," where X and Y are the two
            integers representing, respectively, the current item number and the
            total number of items in the set. The formatting of X and Y is such
            that a list is guaranteed to be vertically aligned, because X is set
            in a right aligned field whose width is the same as that of a string
            representation of Y.
            </returns>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.XofY(System.UInt32,System.Int32)">
            <summary>
            Given two integral values X and Y, where X is less than or equal to
            Y, return a string of the form "X of Y" for use on a report.
            </summary>
            <param name="puintX">
            X is the ordinal number of the item in the list, expressed as an
            unsigned integer.
            </param>
            <param name="pintY">
            Y is the total number of items in the list, expressed as a signed
            integer.
            </param>
            <returns>
            The returned string is literally "X of Y," where X and Y are the two
            integers representing, respectively, the current item number and the
            total number of items in the set. The formatting of X and Y is such
            that a list is guaranteed to be vertically aligned, because X is set
            in a right aligned field whose width is the same as that of a string
            representation of Y.
            </returns>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.XofY(System.Int32,System.Int32)">
            <summary>
            Given two integral values X and Y, where X is less than or equal to
            Y, return a string of the form "X of Y" for use on a report.
            </summary>
            <param name="pintX">
            X is the ordinal number of the item in the list, expressed as a
            signed integer.
            </param>
            <param name="pintY">
            Y is the total number of items in the list, expressed as a signed
            integer.
            </param>
            <returns>
            The returned string is literally "X of Y," where X and Y are the two
            integers representing, respectively, the current item number and the
            total number of items in the set. The formatting of X and Y is such
            that a list is guaranteed to be vertically aligned, because X is set
            in a right aligned field whose width is the same as that of a string
            representation of Y.
            </returns>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.SetAppearanceOrder(System.UInt32)">
            <summary>
            Sets the Alignment property associated with the item.
            </summary>
            <remarks>
            This property is set by the overridden Add method of the
            FormatItemsCollection. Since that class isn't in the
            inheritance chain of this one, and the property must be
            protected from tampering by consumers, the property is
            assigned Internal scope.
            </remarks>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.SetRawLength(System.Int32)">
            <summary>
            Calculate the raw length of the format item from the character
            position (zero based offset) where the closing French brace was
            found and the offset where the opening French brace occurred. The
            opening position is supplied to the constructor, and saved in the
            immutable StartOffset property.
            </summary>
            <param name="pintPosClosingBrace">
            The FormatStringParser passes in the current character position.
            Both pintPosClosingBrace and _intStartOffset are zero based string
            offsets, to which we add 1 to derive a length.
            </param>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.UpdateIndex(System.Char)">
            <summary>
            Call this method to add a digit to the index. Although the index is
            an integer and the digit arrives as a character, it is converted to
            an integer, then added to the current index value times ten,
            shifting the decimal place to make room for it.
            </summary>
            <param name="pchrNextDigit">
            The next digit is passed into the method without conversion, so that
            one routine can service both Index and MininumWidth properties.
            </param>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.UpdateMinimumWidth(System.Char)">
            <summary>
            Call this method to add a digit to the minimum width attribute of an
            Alignment. Although the width is an integer and the digit arrives as
            a character, it is converted to an integer, then added to the
            current width value times ten, shifting the decimal place to make
            room for it.
            </summary>
            <param name="pchrNextDigit">
            The next digit is passed into the method without conversion, so that
            one routine can service both Index and MininumWidth properties.
            </param>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.AddDigitToInteger(System.Char,System.Int32)">
            <summary>
            Instance methods UpdateIndex and UpdateMinimumWidth call this method
            to add a digit to the index or minimum width, respectively. Although
            both values are integers and the digit arrives as a character, it is
            converted to an integer, then added to the supplied value times ten,
            shifting the decimal place to make room for it.
            </summary>
            <param name="pchrNextDigit">
            The next digit is passed into the method without conversion, so that
            one routine can service both Index and MininumWidth properties.
            </param>
            <param name="pintCurrentValue">
            The current value to be converted is passed into this method from a
            calling instance method.
            </param>
            <returns>
            The new value is the sum of pintCurrentValue times ten and a single
            digit integer representation of pchrNextDigit, which replaces
            pintCurrentValue in the instance.
            </returns>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.DeclineUpgrade(System.String,System.String,System.UInt32,System.String)">
            <summary>
            Assemble a message to accompany the InvalidOperationException
            exception that UpgradeFormatItem is about to throw.
            </summary>
            <param name="pstrMainMessage">
            The caller selects a message from the collection of resource strings
            to state the reason the upgrade is being rejected.
            </param>
            <param name="pstrFormat">
            The caller hands off the format string that it was asked to upgrade.
            </param>
            <param name="puintItemIndex">
            The caller hands off the index number of the format item that it was
            asked to upgrade.
            </param>
            <param name="pstrUpgrade">
            The caller hands off the format string that it was asked to
            substitute for the plain vanilla format item.
            </param>
            <returns>
            The caller hands off the returned string to a new
            InvalidOperationException exception.
            </returns>
            <remarks>
            The reason for handing off the string, rather than creating the
            exception and returning it is that it makes the origin of the
            exception unambiguous.
            </remarks>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.DeclineUpgrade(System.String,System.String,System.Int32,System.String)">
            <summary>
            Assemble a message to accompany the InvalidOperationException
            exception that UpgradeFormatItem is about to throw.
            </summary>
            <param name="pstrMainMessage">
            The caller selects a message from the collection of resource strings
            to state the reason the upgrade is being rejected.
            </param>
            <param name="pstrFormat">
            The caller hands off the format string that it was asked to upgrade.
            </param>
            <param name="pintItemIndex">
            The caller hands off the index number of the format item that it was
            asked to upgrade.
            </param>
            <param name="pstrUpgrade">
            The caller hands off the format string that it was asked to
            substitute for the plain vanilla format item.
            </param>
            <returns>
            The caller hands off the returned string to a new
            InvalidOperationException exception.
            </returns>
            <remarks>
            The reason for handing off the string, rather than creating the
            exception and returning it is that it makes the origin of the
            exception unambiguous.
            </remarks>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.FinishFormatItem(System.String,System.Text.StringBuilder)">
            <summary>
            Evaluate the third argument to AdjustToMaximumWidth, and append it
            to the new format item, unless it is a null reference (Nothing in
            Visual Basic) or the empty string.
            </summary>
            <param name="pstrFormatString">
            This string is the optional format string to append to the item.
            </param>
            <param name="prsb">
            The calling AdjustToMaximumWidth overload hands off a StringBuilder
            that it populated with the first two items, both required in the
            context in which this method is used.
            </param>
            <returns>
            This function constructs a string containing the completed format
            item that was assembled in the StringBuilder that
            AdjustToMaximumWidth handed off.
            </returns>
            <remarks>
            This piece was originally coded inline, trading a tad of code bloat
            for efficiency. The additional complexity significantly tips the
            balance in favor of refactoring.
            </remarks>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.Integer(System.Int32)">
            <summary>
            Format any integer per the Regional Settings, overriding the digits
            past the decimal point to render an integer.
            </summary>
            <param name="pintAnyInteger">
            Integer to be formatted
            </param>
            <returns>
            Formatted integer, ready to display
            </returns>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.IntegerPerRegSettings">
            <summary>
            Return a string suitable for formatting an integer per the Regional
            Settings, overriding the default number of digits to display to the
            right of the decimal point to display zero digits to the right of
            the decimal point.
            </summary>
            <returns>
            Format string suitable for formatting an integer
            </returns>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#NFormatString"/>
            <see cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_0D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_2D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_3D"/>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.MaxStringLength(System.Collections.Generic.List{System.String})">
             <summary>
             Given an array of objects of any type, return the length of the
             longest string made from them. See Remarks.
             </summary>
             <param name="plstObjs">
             This argument expects a generic List of strings.
             </param>
             <returns>
             The return value is the length of the longest string made from the
             objects in the input array. Since it is intended for use with the
             PadRight method on a string, it is cast to int. See Remarks.
             </returns>
             <remarks>
             This specialized implementation exists to decouple this class from
             class library WizardWrx.SharedUtl4.dll, since I want the option of
             distributing this class library separately.
            
             As a bonus, this implementation is slightly more efficient, since it
             dispenses with a redundant ToString call on each member of the
             collection.
             </remarks>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItem.XFormatFixup(System.String)">
            <summary>
            Return a format string suitable for displaying a string of the form,
            "X of Y," where X and Y are integers, such that X is less than or
            equal to Y.
            </summary>
            <param name="pstrOfY">
            Since Y is the larger of the two integers, formatting it as a string
            determines the maximum number of characters needed to display X with
            the same standard numeric format string, N0.
            </param>
            <returns>
            Use the returned string to format a string "X of Y" for display in
            a report. The outcome is a report in which a list of items, all of
            which begin with "X of Y," will align vertically.
            </returns>
        </member>
        <member name="T:WizardWrx.FormatStringEngine.FormatItemsCollection">
             <summary>
             This generic List derivative holds the collection of FormatItems found
             in a FormatString.
            
             While the class, itself, is marked Public, everything else about it is
             marked as Internal, so that only instances of classes defined in this
             assembly can create a collection or add items to it, while instances of
             the FormatStringParser class expose it as a read only property.
             </summary>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItemsCollection.#ctor">
            <summary>
            The default constructor creates the collection, leaving it empty and
            with its capacity unspecified.
            </summary>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItemsCollection.#ctor(System.Int32)">
            <summary>
            Create the empty collection, and specify its capacity.
            </summary>
            <param name="pintCapacity">
            Set aside memory to hold this many items.
            </param>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItemsCollection.#ctor(System.Collections.Generic.ICollection{WizardWrx.FormatStringEngine.FormatItem})">
            <summary>
            Create the collection, and load an ICollection into it.
            </summary>
            <param name="pICollection">
            Specify the ICollection to load into the object. Since the base
            constructor already ran, the class is locked before the collection
            is loaded into it.
            </param>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatItemsCollection.Add(WizardWrx.FormatStringEngine.FormatItem)">
            <summary>
            Add a new item to the collection, setting its AppearanceOrder
            property equal to the Count of this collection, which already
            reflects its addtion, since it is added before the property is
            set.
            </summary>
            <param name="pfi">
            Specify the FormatItem to add to the collection.
            </param>
        </member>
        <member name="T:WizardWrx.FormatStringEngine.FormatStringError">
             <summary>
             The FormatStringParser exposes a List of these objects if errors exist
             in its current format string.
             </summary>
             <remarks>
             The only property that has any use outside the defining assembly is the
             string representation, which returns the properties in a well formed CSV
             string.
            
             Likewise, only other classes defined in the same assembly are allowed to
             create instances of this object, which are immutable.
             </remarks>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatStringError.FIELD_DELIMITER">
            <summary>
            This constant is the field delimiter.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatStringError.COMMA_GUARD">
            <summary>
            Since some strings necessarily contain embedded commas, such commas
            must be protected. This is accomplished by enclosing the affected
            string in double quotation marks before it is appended.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatStringError.LABEL_VALUE_DELIMITER">
            <summary>
            This constant delimits the field label from its value.
            </summary>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatStringError.Split">
             <summary>
             Split the message into an array of parts, each containing a property
             value and its label.
            
             Please see the remarks.
             </summary>
             <returns>
             The return value is an array of strings.
            
             Please see the remarks for essential information about this string.
             </returns>
             <remarks>
             This function is provided to facilitate correctly splitting a string,
             returned by the ToString method on an instance, into fields, each of
             which is a name/value pair that can be further subdivided, using the
             built-in string.Split method, along with LABEL_VALUE_DELIMITER, the
             correct delimiter to use with string.Split.
            
             Under the covers, Split passes the string returned by a call to the
             instance ToString method to the static WizardWrx.AnyCSV.Parser.Parse
             method, which does most of the work.
            
             IMPORTANT: Since the new version of WizardWrx.AnyCSV.dll has a COM
             interface, it had to target the x86 platform. This can eventually be
             corrected by building a parallel version that isn't exposed to COM.
             </remarks>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatStringError.ToString">
             <summary>
             Format the properties into a comma-delimited string, which may be
             used as is or processed by the Split method on this instance.
            
             Please see the remarks for essential information about this string.
             </summary>
             <returns>
             Please see the remarks for essential information about this string.
             </returns>
             <remarks>
             The standard string.Split method cannot split this string correctly,
             because it treats commas embedded in its strings as delimiters, thus
             splitting the string into too many pieces, and at the wrong places.
            
             Use the Split method on this instance, which employs a robust CSV
             parsing engine that splits it correctly.
             </remarks>
        </member>
        <member name="T:WizardWrx.FormatStringEngine.FormatStringParser">
            <summary>
            Use this class to parse format control strings that you intend to use
            with string.Format or one of the Write or WriteLine methods of a stream
            object, such as a Console or TextWriter. Properties and methods report
            on its attributes, including its FormaItems, and errors flagged by the
            parser.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatStringParser.ESCAPED_ITEM_BEGIN">
            <summary>
            To include a literal opening brace (that is, one that you want to
            appear in the completed string), it must be escaped, which is
            accomplished by including a pair of them where you want one to
            appear.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatStringParser.ESCAPED_ITEM_END">
            <summary>
            To include a literal closing brace (that is, one that you want to
            appear in the completed string), it must be escaped, which is
            accomplished by including a pair of them where you want one to
            appear.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatStringParser.ITEM_BEGIN">
            <summary>
            One left French brace is assumed to be the beginning of a new format
            item.
            </summary>
            <remarks>
            To disable this interpretation, and have the left French brace
            appear in the output, use a ESCAPED_ITEM_BEGIN string.
            </remarks>
            <see cref="F:WizardWrx.FormatStringEngine.FormatStringParser.ESCAPED_ITEM_BEGIN"/>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatStringParser.ITEM_END">
            <summary>
            One right French brace is assumed to be the end of the format item.
            </summary>
            <remarks>
            To disable this interpretation, and have the right French brace
            appear in the output, use a ESCAPED_ITEM_END string.
            </remarks>
            <see cref="F:WizardWrx.FormatStringEngine.FormatStringParser.ESCAPED_ITEM_END"/>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatStringParser.ITEM_HAS_ALIGNMENT_ATTRIBUTE">
            <summary>
            When one appears within French braces that are not escaped, a comma
            indicates an alignment and minimum width are specified. The
            documentation of a composite format string refers to this as the
            Alignment component.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatStringParser.ITEM_IS_LEFT_ALIGNED">
            <summary>
            Since a negative number signifies left alignment, the presence of a
            minus sign immediately following the comma acts as a switch.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatStringParser.ITEM_IS_RIGHT_ALIGNED">
            <summary>
            Since a negative number signifies left alignment, the presence of a
            plus sign immediately following the comma acts as a dummy switch.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatStringParser.ITEM_HAS_FORMAT_STRING_ATTRIBUTE">
            <summary>
            When one appears within French braces, a colon indicates a format
            string, to be applied to the item is specified. The documentation
            of a composite format string refers to this as the Format String
            component.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatStringParser.NO_ERRORS">
            <summary>
            The FormatStringErrorCount returns this value when the
            FormatStringErrors collection is null. The collection remains so
            unless at least one error is found in the string.
            </summary>
        </member>
        <member name="T:WizardWrx.FormatStringEngine.FormatStringParser.State">
            <summary>
            The Parse method defines a local State variable and uses it to keep
            track of its internal state.
            </summary>
            <remarks>
            While the beginning of a format string is represented in the State
            enumeration by NotStarted, no value is reserved for the end, because
            the main loop of the parser is a loop that processes the format
            string character by character, making such a state moot.
            </remarks>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatStringParser.State.NotStarted">
            <summary>
            The Parse method has not processed anything. This is the initial
            value of the internal state variable, which ends when the first
            character is processed.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatStringParser.State.ProcessingLiterals">
            <summary>
            The last character seen by the parser is an ordinary literal or
            an escaped French brace.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatStringParser.State.ItemBegin">
            <summary>
            The last character seen by the parser is the unescaped opening
            French brace that marks the beginning of a new Format Item.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatStringParser.State.IndexComponet">
            <summary>
            The last character seen by the parser is a digit of a Index
            component.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatStringParser.State.AlignmentBegin">
            <summary>
            The last character seen by the parser is the comma that delimits
            the Alignment component.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatStringParser.State.AlignmentFlag">
            <summary>
            The last character seen by the parser is a sign, immediately
            preceded by a comma, both of which follow a French brace.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatStringParser.State.AlignmentComponent">
            <summary>
            The last character seen by the parser is either a minus sign or
            a decimal digit, both preceded by a comma.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatStringParser.State.FormatBegin">
            <summary>
            The last character seen by the parser is the colon that delimits
            the Format String component.
            </summary>
        </member>
        <member name="F:WizardWrx.FormatStringEngine.FormatStringParser.State.FormatString">
            <summary>
            The last character seen by the parser follows a colon and
            precedes a closing French brace.
            </summary>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatStringParser.#ctor">
            <summary>
            Create the empty parser.
            </summary>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatStringParser.#ctor(System.String)">
            <summary>
            Create the parser and set the initial value of its FormatString
            property.
            </summary>
            <param name="pstrFormatString">
            Pass a reference to the format control string that you want parsed.
            Since the constructor parses the string, the properties are set, and
            all that remains for you to do is evaluate them.
            </param>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.FormatStringParser.FormatItems">
            <summary>
            Gets the collection of FormatItems found in the string.
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.FormatStringParser.FormatString">
            <summary>
            Get or set the value of the FormatString property, from which all
            other properties are derived.
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrorCount">
            <summary>
            Gets the count of errors found in the format string.
            </summary>
            <remarks>
            This convenience property exists because the FormatStringErrors
            collection is null unless at least one error was found in the format
            string.
            </remarks>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrors">
            <summary>
            Gets the list of errors, which may be null.
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.FormatStringParser.HighestFormatItemIndex">
            <summary>
            Gets the higest format item index number.
            </summary>
            <remarks>
            The array of format items must contains at least this many items,
            plus one.
            </remarks>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatStringParser.ReportNewError(System.Int32,System.Char,WizardWrx.FormatStringEngine.FormatStringParser.State,System.String)">
            <summary>
            Errors are reported by appending them to a List that is exposed
            through the FormatStringErrors property.
            </summary>
            <param name="pintCharPos">
            The current character position is a zero based offset from the start
            of the format string.
            </param>
            <param name="pchrCurrent">
            The character found at offset pintCharPos is included as further
            hint.
            </param>
            <param name="penmState">
            The current value of the State enumeration tells what the parser is
            expecting to find at this point in the string.
            </param>
            <param name="pstrMessage">
            The message offers a human readable explanation of what happened.
            </param>
        </member>
        <member name="M:WizardWrx.FormatStringEngine.FormatStringParser.SaveFormatItem(WizardWrx.FormatStringEngine.FormatStringParser.State@,System.Int32,WizardWrx.FormatStringEngine.FormatItem@)">
             <summary>
             Although its name, SaveFormatItem, suggests that its sole task is to
             save the populated FormatItem into the collection, it performs some
             related tasks, each of which is noted in the argument comments.
             </summary>
             <param name="prenmState">
             The State enumeration, which governs the behavior of the parsing
             engine, is set to ProcessingLiterals to indicate that processing is
             between format items.
            
             Since this method changes its value, and it is a value type (Any
             enumeration is really an integer in handcuffs.), it is passed by
             reference, so that the change is reflected in the caller's address
             space.
             </param>
             <param name="pintCharPos">
             Since this integer is used, but not changed, it can be safely passed
             by value.
             </param>
             <param name="prfiCurrent">
             After the FormatItem is copied into a FormatItemsCollection object,
             the locally scoped copy is discarded. Sooner or later, this would
             happen on its own, but I like to discard objects as soon as I know
             that I am finished with them, especially if their lingering presence
             could cause confusion about the current state of affairs.
             </param>
        </member>
        <member name="T:WizardWrx.FormatStringEngine.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.ERRMSG_FORMAT_COMPONENT_IS_EMPTY">
            <summary>
              Looks up a localized string similar to The Format compoent of the FormatItem is empty. The colon that signals its presence is immediately followed by a closing brace..
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.ERRMSG_FORMAT_ITEM_DETAILS">
            <summary>
              Looks up a localized string similar to {3}    Format String        = {0}{3}    Format Item Number   = {1}{3}    Proposed Replacement = {2}.
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.ERRMSG_FORMAT_ITEM_ITEMFORMAT_SUBSTRING">
            <summary>
              Looks up a localized string similar to The format substring of a FormatStringItem cannot be the empty string..
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.ERRMSG_FORMAT_STRING_ERROR_TPL">
            <summary>
              Looks up a localized string similar to Offset = {0}, Character = {1}, Parser State = {2}, Message = {3}.
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.ERRMSG_INVALID_APPEARANCE_ORDER">
            <summary>
              Looks up a localized string similar to The ApperanceOrder property of a FormatItem object must be greater than zero..
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.ERRMSG_INVALID_FORMAT_ITEM">
            <summary>
              Looks up a localized string similar to TThe specified format item upgrade string is invalid.{0}.
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.ERRMSG_INVALID_INDEX_FOR_FORMAT_ITEM">
            <summary>
              Looks up a localized string similar to Value must be a positive integer..
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.ERRMSG_INVALID_RAW_LENGTH">
            <summary>
              Looks up a localized string similar to The specified RawLength value is invalid..
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.ERRMSG_INVALID_WIDTH_FORMAT_ITEM">
            <summary>
              Looks up a localized string similar to Value must be greater than zero..
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.ERRMSG_LAST_ITEM_INCOMPLETE">
            <summary>
              Looks up a localized string similar to The last format item in the string is incomplete..
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.ERRMSG_MINIMUM_WIDTH_ALREADY_INITIALIZED">
            <summary>
              Looks up a localized string similar to The MinimumWidth property is already initialized. Call the UpdateMinimumWidth method to add digits..
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.ERRMSG_MISSING_FORMAT_ITEM">
            <summary>
              Looks up a localized string similar to The specified format string is missing the specified format item.{0}.
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.ERRMSG_NONDIGIT_AFTER_LEFTBRACE">
            <summary>
              Looks up a localized string similar to Nondigit immediately following left brace..
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.ERRMSG_RAW_LENGTH_ALREADY_SET">
            <summary>
              Looks up a localized string similar to The RawLength property is immutable, and has already been set..
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.FORMAT_ITEM_APPEARANCE_ORDER">
            <summary>
              Looks up a localized string similar to ApperanceOrder property of FormatItem object.
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.FORMAT_ITEM_INDEX_PROPERTY">
            <summary>
              Looks up a localized string similar to Index property of FormatStringItem object.
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.FORMAT_ITEM_ITEMFORMAT_SUBSTRING">
            <summary>
              Looks up a localized string similar to Index property of FormatStringItem object.
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.FORMAT_ITEM_MINIMUM_WIDTH_PROPERTY">
            <summary>
              Looks up a localized string similar to MinimumWidth property of FormatStringItem object.
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.PARSER_INPUT_STRING">
            <summary>
              Looks up a localized string similar to FormatString property.
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.RAW_LENGTH_PROPERTY_LABEL">
            <summary>
              Looks up a localized string similar to RawLength Property Value of FormatItem Object.
            </summary>
        </member>
        <member name="P:WizardWrx.FormatStringEngine.Properties.Resources.X_OF_Y_FIXED_TEXT">
            <summary>
              Looks up a localized string similar to {0} of {1}.
            </summary>
        </member>
    </members>
</doc>
