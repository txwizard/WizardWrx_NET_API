<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WizardWrx.AssemblyUtils</name>
    </assembly>
    <members>
        <member name="T:WizardWrx.AssemblyUtils.AssemblyContainer">
            <summary>
            Use this class to hold a reference to an assembly that you want to
            confine to a separate AppDomain, so that the assembly can be unloaded by
            discarding its domain.
            </summary>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.AssemblyContainer.#ctor">
            <summary>
            The public constructor creates an empty container.
            </summary>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.AssemblyContainer.Store(System.Reflection.AssemblyName)">
            <summary>
            Call this method to load an assembly into the container.
            </summary>
            <param name="panThis">
            Designate the assembly to load by its AssemblyName.
            </param>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.AssemblyContainer.ShowMe">
            <summary>
            Get a transparent reference to the assembly stored in the container.
            </summary>
            <returns>
            The reference is returned through a transparent proxy, and the main
            AppDomain can treat it as if it were local. Hence, it can be used to
            instantiate objects, query their properties, and call their methods.
            </returns>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.AssemblyContainer._pvtAsm">
            <summary>
            The real assembly reference is hidden in this property, so that it
            isn't created simultaneously in both AppDomains.
            </summary>
        </member>
        <member name="T:WizardWrx.AssemblyUtils.DependentAssemblies">
            <summary>
            Use instances of this class to enumerate the dependents of an assembly.
            </summary>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.DependentAssemblies.#ctor">
            <summary>
            Create an instance that has the calling assembly as its root.
            </summary>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.DependentAssemblies.#ctor(System.Reflection.Assembly)">
            <summary>
            Create an instance that has a specified assembly as its root.
            </summary>
            <param name="pasmTopLevel">
            Specify the assembly to establish as the top level reference assembly.
            </param>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.DependentAssemblies.AssemblyDependsUpon(System.Reflection.AssemblyName)">
            <summary>
            Return TRUE if the root assembly of the instance depends upon the
            assembly named in its argument.
            </summary>
            <param name="panMaybeDependent">
            Specify the AssemblyName property, preferably fully qualified.
            </param>
            <returns>
            If the assembly specified as the root when the instance was created
            depends upon the assembly named in the argument, the return value is
            TRUE. Otherwise, the return value is FALSE.
            </returns>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.DependentAssemblies.DependentAssemblyIsLoaded(System.Reflection.AssemblyName)">
            <summary>
            Return TRUE if the root assembly of the instance depends upon the
            assembly named in its argument AND that assembly  is loaded.
            </summary>
            <param name="panMaybeDependent">
            Specify the AssemblyName property, preferably fully qualified.
            </param>
            <returns>
            If the assembly specified as the root when the instance was created
            depends upon the assembly named in the argument, and the named
            assembly is loaded into the default Application Domain, the return
            value is TRUE. Otherwise, the return value is FALSE.
            </returns>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.DependentAssemblies.DestroyDependents">
            <summary>
            This object gets an explicitly implemented destructor, because it
            may acquire a secondary AppDomain that should be destroyed before
            the main processing routine progresses further.
            </summary>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.DependentAssemblies.DisplayProperties(System.IO.StreamWriter,System.Char)">
            <summary>
            List the properties of each dependent assembly.
            </summary>
            <param name="pswOut">
            Specify the optional output StreamWriter onto which the dependent
            assembly details are to be written. The default value is NULL, which
            suppresses output.
            </param>
            <param name="pchrDelimiter">
            Specify the optional field delimiter. The default value is a comma.
            </param>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.DependentAssemblies.EnumerateDependents">
            <summary>
            Enumerate the dependent assemblies.
            </summary>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.DependentAssemblies.GetDependentAssemblyInfos">
            <summary>
            When called on an instance, this method returns a sorted list of the
            dependent assemblies of the assembly that was passed into its
            constructor.
            </summary>
            <returns>
            If the method succeeds, the return value is a generic list of
            DependentAssemblyInfo objects, sorted by name.
            </returns>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.DependentAssemblies.GetDependentAssemblyByName(System.Reflection.AssemblyName,System.Boolean)">
            <summary>
            Get a reference to the named dependent assembly.
            </summary>
            <param name="panMaybeDependent">
            Specify the AssemblyName property, preferably fully qualified.
            </param>
            <param name="pfDynamicLoadingPermitted">
            Set this flag to TRUE to permit an assembly to be loaded to satisfy
            the request. The default is FALSE, so that a request is unsatisfied
            unless the required assembly is already loaded.
            </param>
            <returns>
            If the named assembly is a dependent, and it is successfully loaded,
            the return value is a reference to the assembly. If the assembly was
            already loaded into the default application domain, the reference is
            to that assembly. Otherwise, the reference is to the assembly that
            was loaded into the private application domain.
            </returns>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.DependentAssemblies.Root">
            <summary>
            Get the root assembly around which the instance was constructed.
            </summary>
        </member>
        <member name="T:WizardWrx.AssemblyUtils.DependentAssemblyInfo">
            <summary>
            An instance of this class is created for each assembly listed as a
            dependent, and is used to track the assemblies that must be loaded to
            query their properties.
            </summary>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.DependentAssemblyInfo.IS_LOADED">
            <summary>
            The IsLoaded property has this value when the assembly is loaded
            when the DependentAssemblies query loop runs.
            </summary>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.DependentAssemblyInfo.NOT_LOADED">
            <summary>
            The IsLoaded property has this value when the assembly is unloaded
            when the DependentAssemblies query loop runs.
            </summary>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.DependentAssemblyInfo.#ctor(System.Reflection.AssemblyName)">
            <summary>
            The public constructor requires an AssemblyName from which to
            create an initialized instance.
            </summary>
            <param name="panmAssemblyName">
            AssemblyName fully describes an assembly, including properties that
            give direct access to the base (simple) name, version, culture, and
            public key token.
            </param>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.DependentAssemblyInfo.DestroyOwneAppdDomains">
            <summary>
            You must call this method once, when you are finished using the
            object, but before it goes out of scope, to unload the private
            AppDomain, along with the assemblies that were loaded into it.
            </summary>
            <remarks>
            This activity cannot be performed by a destructor, because the
            unload fails with HRESULT 0x80131015 when the unload is initiated by
            a destructor, or when a destructor is active.
            </remarks>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.DependentAssemblyInfo.LoadForInspection">
            <summary>
            The name of this method reflects its motivation, which was to report
            on the assemblies upon which a specified "root" assembly depends.
            </summary>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.DependentAssemblyInfo.MarkAsLoaded(System.Reflection.Assembly)">
            <summary>
            Call this method to mark an assembly as loaded.
            </summary>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.DependentAssemblyInfo.Equals(System.Object)">
            <summary>
            Test a pair of object instances for logical equality.
            </summary>
            <param name="obj">
            Supply a reference to the other object to test for equality with the
            calling instance.
            </param>
            <returns>
            This method returns TRUE if the two objects are of the same or
            equivalent types and their FullName properties are equal. Otherwise,
            the return value is FALSE.
            </returns>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.DependentAssemblyInfo.GetHashCode">
            <summary>
            Return the HashCode property of the FullName property of the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.DependentAssemblyInfo.ToString">
            <summary>
            Return a string representation of the instance.
            </summary>
            <returns>
            The returned string consists of the object type, as it would be
            reported by the base ToString method, followed by the FullName and
            IsLoaded property values.
            </returns>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.DependentAssemblyInfo.AssemblyDetails">
            <summary>
            Get the Assembly, itself. If it was already loaded for use, this is
            a reference to the live assembly. Otherwise, it is a copy that was
            loaded for reflection, and will be unloaded by the destructor.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.DependentAssemblyInfo.FullName">
            <summary>
            Get the FullName of the assembly.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.DependentAssemblyInfo.IsLoaded">
            <summary>
            Get the load state of the assembly.
            </summary>
        </member>
        <member name="T:WizardWrx.AssemblyUtils.PESubsystemInfo">
            <summary>
            This class exposes methods for obtaining the subsystem ID encoded into
            the NT header of a Windows Portable Executable (PE) file. Such files
            include, but are not limited to, character mode and graphical mode
            programs implemented in both native or managed programming languages,
            dynamic link libraries, and device drivers.
            </summary>
        </member>
        <member name="T:WizardWrx.AssemblyUtils.PESubsystemInfo.PESubsystemID">
            <summary>
            Map the unsigned integer returned by GetExeSubsystem onto an
            enumerated type that conveys its correct interpretation.
            </summary>
            <see cref="M:WizardWrx.AssemblyUtils.PESubsystemInfo.GetPESubsystemID(System.String)"/>
            <see cref="M:WizardWrx.AssemblyUtils.PESubsystemInfo.GetPESubsystemDescription(System.Int16,WizardWrx.AssemblyUtils.PESubsystemInfo.SubsystemDescription)"/>
            <see cref="M:WizardWrx.AssemblyUtils.PESubsystemInfo.GetPESubsystemDescription(WizardWrx.AssemblyUtils.PESubsystemInfo.PESubsystemID,WizardWrx.AssemblyUtils.PESubsystemInfo.SubsystemDescription)"/>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.PESubsystemInfo.PESubsystemID.IMAGE_SUBSYSTEM_UNKNOWN">
            <summary>
            Unknown subsystem.
            </summary>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.PESubsystemInfo.PESubsystemID.IMAGE_SUBSYSTEM_NATIVE">
            <summary>
            Image doesn't require a subsystem.
            </summary>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.PESubsystemInfo.PESubsystemID.IMAGE_SUBSYSTEM_WINDOWS_GUI">
            <summary>
            Image runs in the Windows GUI subsystem.
            </summary>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.PESubsystemInfo.PESubsystemID.IMAGE_SUBSYSTEM_WINDOWS_CUI">
            <summary>
            Image runs in the Windows character subsystem.
            </summary>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.PESubsystemInfo.PESubsystemID.IMAGE_SUBSYSTEM_OS2_CUI">
            <summary>
            Image runs in the OS/2 character subsystem.
            </summary>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.PESubsystemInfo.PESubsystemID.IMAGE_SUBSYSTEM_POSIX_CUI">
            <summary>
            Image runs in the Posix character subsystem.
            </summary>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.PESubsystemInfo.PESubsystemID.IMAGE_SUBSYSTEM_NATIVE_WINDOWS">
            <summary>
            Image is a native Win9x driver.
            </summary>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.PESubsystemInfo.PESubsystemID.IMAGE_SUBSYSTEM_WINDOWS_CE_GUI">
            <summary>
            Image runs in the Windows CE subsystem.
            </summary>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.PESubsystemInfo.PESubsystemID.IMAGE_SUBSYSTEM_EFI_APPLICATION">
            <summary>
            Image is an EFI Application.
            </summary>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.PESubsystemInfo.PESubsystemID.IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER">
            <summary>
            Image is a EFI Boot Service Driver.
            </summary>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.PESubsystemInfo.PESubsystemID.IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER">
            <summary>
            Image is a EFI Runtime Driver.
            </summary>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.PESubsystemInfo.PESubsystemID.IMAGE_SUBSYSTEM_EFI_ROM">
            <summary>
            Image runs from a EFI ROM.
            </summary>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.PESubsystemInfo.PESubsystemID.IMAGE_SUBSYSTEM_XBOX">
            <summary>
            Image runs on XBOX.
            </summary>
        </member>
        <member name="T:WizardWrx.AssemblyUtils.PESubsystemInfo.SubsystemDescription">
            <summary>
            Each subsystem ID has both a short and long description. Use this
            enumeration as the second argument, penmSubsystemDescription, to
            static method GetPESubsystemDescription.
            </summary>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.PESubsystemInfo.SubsystemDescription.Unspecified">
            <summary>
            This value is invalid as input to GetPESubsystemDescription, and
            is defined to require the parameter to be explicitly set, so
            that there is no default value for penmSubsystemDescription.
            </summary>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.PESubsystemInfo.SubsystemDescription.Short">
            <summary>
            Return the short (one and two word) description.
            </summary>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.PESubsystemInfo.SubsystemDescription.Long">
            <summary>
            Return the long (complete sentence) description.
            </summary>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.PESubsystemInfo.IMAGE_SUBSYSTEM_UNKNOWN">
            <summary>
            The ProcessSubsystmID property returns this value until the private
            constructor initializes it.
            </summary>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.PESubsystemInfo.IMAGE_SUBSYSTEM_WINDOWS_GUI">
            <summary>
            The ProcessSubsystmID property returns this value when queried on an
            PESubsystemInfo singleton instance that was initialized by a Windows
            (graphical mode) entry assembly.
            
            Static method GetPESubsystemID returns this value when queried about
            the subsystem ID of a Windows (graphical mode) assembly or compiled
            native program.
            </summary>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.PESubsystemInfo.IMAGE_SUBSYSTEM_WINDOWS_CUI">
            <summary>
            The ProcessSubsystmID property returns this value when queried on an
            PESubsystemInfo singleton instance that was initialized by a console
            (character mode) entry assembly.
            
            Static method GetPESubsystemID returns this value when queried about
            the subsystem ID of a console (character mode) assembly or compiled
            native program.
            </summary>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.PESubsystemInfo.s_astrShortNames">
            <summary>
            This table maps the short description resource strings to the 
            subsystem ID that they describe. Since subsystem IDs 4 and 6 are
            undefined, the corresponding elements are null references. If one is
            actually referenced, the resulting null reference exception must be
            caught, reported, and investigated.
            </summary>
        </member>
        <member name="F:WizardWrx.AssemblyUtils.PESubsystemInfo.s_astrLongNames">
            This table maps the long description resource strings to the 
            subsystem ID that they describe. Since subsystem IDs 4 and 6 are
            undefined, the corresponding elements are null references. If one is
            actually referenced, the resulting null reference exception must be
            caught, reported, and investigated.
        </member>
        <member name="P:WizardWrx.AssemblyUtils.PESubsystemInfo.DefaultAppDomainSubsystemID">
            <summary>
            Get the subsystem ID of the default application domain.
            </summary>
            <seealso cref="P:WizardWrx.AssemblyUtils.PESubsystemInfo.DefaultAppDomainSubsystem"/>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.PESubsystemInfo.DefaultAppDomainSubsystem">
            <summary>
            Get the subsystem in which the default application domain executes.
            </summary>
            <seealso cref="P:WizardWrx.AssemblyUtils.PESubsystemInfo.DefaultAppDomainSubsystemID"/>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.PESubsystemInfo.DomainEntryAssemblyLocation">
            <summary>
            Get the fully qualified name of the file from which the first
            assembly that was loaded into the default application domain was
            read.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.PESubsystemInfo.DefaultDomainEntryAssemblyName">
            <summary>
            Get the fully qualified AssemblyName of the first assembly that was
            loaded into the default application domain.
            </summary>
            <remarks>
            AssemblyName has properties that expose the parts of an assembly
            name, its simple name, version, culture, and public key token.
            </remarks>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.PESubsystemInfo.GetPESubsystemID(System.String)">
            <summary>
            Call this method with the name of a file to get its subsystem ID.
            </summary>
            <param name="pstrFileName">
            This string must be the name of a file that can be found in the
            current security context. Names may be either relative or fully
            qualified. Relative file names are resolved relative to the current
            working directory.
            </param>
            <returns>
            If the specified file exists and is a valid Windows Portable
            Executable (PE) file, its subsystem ID is returned. Since the ID is
            represented internally as a 16 bit signed integer, the return type
            of Int16 is guaranteed to be correct, regardless of the machine 
            architecture. Debuggers and stack traces may represent this type as
            a short, a common alias for Int16.
            </returns>
            <see cref="M:WizardWrx.AssemblyUtils.PESubsystemInfo.GetPESubsystemDescription(System.Int16,WizardWrx.AssemblyUtils.PESubsystemInfo.SubsystemDescription)"/>
            <see cref="M:WizardWrx.AssemblyUtils.PESubsystemInfo.GetPESubsystemDescription(WizardWrx.AssemblyUtils.PESubsystemInfo.PESubsystemID,WizardWrx.AssemblyUtils.PESubsystemInfo.SubsystemDescription)"/>
            <exception cref="T:System.ArgumentException">
            The following conditions elicit an ArgumentException exception.
            
            1) String argument pstrFileName is a null reference or points to the
            empty string.
            
            2) String argument pstrFileName specifies a file that cannot be
            found in the current security context.
            
            3) String argument pstrFileName specifies a file that is too small
            to contain a valid PE header, let alone its associated code and'
            data.
            </exception>
            <exception cref="T:System.Exception">
            The following conditions elicit an Exception (the garden variety
            exception class) exception.
            
            1) The file read returned, indicating that fewer than the expected
            number of bytes was read. This is probably the result of an internal
            programming error, and is unlikely to arise in practice, since this
            type of error should elicit an I/O exception.
            
            2) The Int16 (16 bit signed integer) that marks the start of a valid
            DOS file header is missing.
            
            3) The DWORD (32 bit unsigned integer) in the DOS header that should
            point to the start of the NT header is either null, or it points to
            a location beyond the first 1024 bytes of the file.
            
            4) The magic Int32 (32 bit signed integer) that marks the start of
            the NT header is not where the pointer in the DOS header says it
            should be.
            
            5) The I/O subsystem threw an exception. A new garden variety
            exception object is created, the I/O exception is attached as its
            InnerException property, and the new exception is thrown up the call
            stack. 
            
            Wrapping the I/O exception in a garden variety exception lets the
            final exception report include the name of the file that was being
            processed when the exception arose, which may provide useful clues
            about its root cause.
            
            6) A completely unexpected event gave rise to an exception. A new
            garden variety exception object is created, the original exception
            is attached as its InnerException property, and the new exception is
            thrown up the call stack.
            
            Wrapping the original I/O exception in a new exception lets the 
            final exception report include the name of the file that was being
            processed when the exception arose, which may provide useful clues
            about its root cause.
            </exception>
            <seealso cref="M:WizardWrx.AssemblyUtils.PESubsystemInfo.GetPESubsystem(System.String)"/>
            <seealso cref="M:WizardWrx.AssemblyUtils.PESubsystemInfo.GetPESubsystemDescription(WizardWrx.AssemblyUtils.PESubsystemInfo.PESubsystemID,WizardWrx.AssemblyUtils.PESubsystemInfo.SubsystemDescription)"/>
            <seealso cref="P:WizardWrx.AssemblyUtils.PESubsystemInfo.DefaultAppDomainSubsystemID"/>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.PESubsystemInfo.GetPESubsystem(System.String)">
            <summary>
            Use this wrapper to get the PESubsystemID enumeration member
            equivalent to the integer returned by GetPESubsystemID.
            </summary>
            <param name="pstrFileName">
            This string must be the name of a file that can be found in the
            current security context. Names may be either relative or fully
            qualified. Relative file names are resolved relative to the current
            working directory.
            </param>
            <returns>
            If the function succeeds, its return value is a PESubsystemID member
            that corresponds to the 16-bit integer returned by GetPESubsystemID,
            which it calls internally.
            </returns>
            <seealso cref="M:WizardWrx.AssemblyUtils.PESubsystemInfo.GetPESubsystemID(System.String)"/>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.PESubsystemInfo.GetPESubsystemDescription(System.Int16,WizardWrx.AssemblyUtils.PESubsystemInfo.SubsystemDescription)">
            <summary>
            Get the short (one or two word) or long (complete, grammatically
            correct sentence) description that corresponds to a Portable
            Executable (PE) subsystem ID, such as the value returned by passing
            a file name to GetPESubsystemID.
            </summary>
            <param name="pintSubsystemID">
            Specify the subsystem ID for which the corresponding short or long
            description is wanted. Suitable inputs include the signed integer
            returned by GetPESubsystemID, which may be called as a nested method
            if you have no further use for the subsystem ID.
            </param>
            <seealso cref="M:WizardWrx.AssemblyUtils.PESubsystemInfo.GetPESubsystemID(System.String)"/>
            <param name="penmSubsystemDescription">
            A member of the SubsystemDescription specifies whether to return the
            short (one or two word) description or the long (complete sentence)
            description that corresponds to the specified subsystem ID.
            </param>
            <see cref="T:WizardWrx.AssemblyUtils.PESubsystemInfo.SubsystemDescription"/>
            <returns>
            If the function succeeds, the return value is a string containing a
            short or long description that corresponds to a specified subsystem
            ID.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the subsystem ID specified by argument pintSubsystemID is either
            negative or greater than the largest valid subsystem ID (9, at
            present, though future editions of the Microsoft Platform SDK might
            define additional IDs), an ArgumentOutOfRangeException exception is
            thrown, which reports the
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            An System.ComponentModel.InvalidEnumArgumentException exception is
            thrown when the second argument, penmSubsystemDescription, is either
            SubsystemDescription.Unspecified or is not a valid member of the
            SubsystemDescription enumeration. Unspecified is defined, but marked
            as invalid to ensure that if penmSubsystemDescription is a variable,
            it is initialized.
            </exception>
            <see cref="M:WizardWrx.AssemblyUtils.PESubsystemInfo.GetPESubsystemID(System.String)"/>
            <seealso cref="M:WizardWrx.AssemblyUtils.PESubsystemInfo.GetPESubsystemDescription(WizardWrx.AssemblyUtils.PESubsystemInfo.PESubsystemID,WizardWrx.AssemblyUtils.PESubsystemInfo.SubsystemDescription)"/>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.PESubsystemInfo.GetPESubsystemDescription(WizardWrx.AssemblyUtils.PESubsystemInfo.PESubsystemID,WizardWrx.AssemblyUtils.PESubsystemInfo.SubsystemDescription)">
            <summary>
            Get the short (one or two word) or long (complete, grammatically
            correct sentence) description that corresponds to a Portable
            Executable (PE) subsystem ID, such as the value returned by passing
            a file name to GetPESubsystemID.
            </summary>
            <param name="penmSubsystemID">
            Specify the PESubsystemID enumeration value for which the
            corresponding string is needed. Suitable inputs include the value
            returned by GetPESubsystem or the DefaultDomainSubsystem property
            returned by the singleton instance.
            </param>
            <param name="penmSubsystemDescription">
            A member of the SubsystemDescription specifies whether to return the
            short (one or two word) description or the long (complete sentence)
            description that corresponds to the specified subsystem ID.
            </param>
            <see cref="T:WizardWrx.AssemblyUtils.PESubsystemInfo.SubsystemDescription"/>
            <returns>
            If the function succeeds, the return value is a string containing a
            short or long description that corresponds to a specified subsystem
            ID.
            </returns>
            <remarks>
            This method casts penmSubsystemID to Int16, and feeds it to
            GetPESubsystemDescription, since the cast wound be necessary, sooner
            or later, to use the lookup tables that contain the descriptions.
            </remarks>
            <see cref="M:WizardWrx.AssemblyUtils.PESubsystemInfo.GetPESubsystem(System.String)"/>
            <seealso cref="M:WizardWrx.AssemblyUtils.PESubsystemInfo.GetPESubsystemID(System.String)"/>
            <seealso cref="M:WizardWrx.AssemblyUtils.PESubsystemInfo.GetPESubsystemDescription(System.Int16,WizardWrx.AssemblyUtils.PESubsystemInfo.SubsystemDescription)"/>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.PESubsystemInfo.ToString">
            <summary>
            Override the default ToString method to display the subsystem type.
            </summary>
            <returns>
            The returned string resembles the following example.
            
            {{Subsystem ID = Console (3)}} WizardWrx.AssemblyUtils.PESubsystemInfo
            </returns>
        </member>
        <member name="T:WizardWrx.AssemblyUtils.ReportGenerators">
            <summary>
            The static members of this class generate reports about assemblies and
            their dependents.
            </summary>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.ReportGenerators.GetAssemblyGuidString(System.Reflection.Assembly)">
            <summary>
            Get the GUID string (Registry format) attached to an assembly.
            </summary>
            <param name="pasm">
            Assembly from which to return the GUID string.
            </param>
            <returns>
            If the method succeeds, the return value is the GUID attached to it
            and intended to be associated with its type library if the assembly
            is exposed to COM.
            </returns>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.ReportGenerators.LabelKeyAssemblyProperties(System.IO.StreamWriter,System.Char)">
            <summary>
            Generate the label row on the <paramref name="pswOut"/> StreamWriter
            that is delimited by <paramref name="pchrDlm"/> characters.
            </summary>
            <param name="pswOut">
            Specify the open StreamWriter upon which to write.
            </param>
            <param name="pchrDlm">
            Specify the delimiter character.
            </param>
            <remarks>
            The label template is a managed resource string, REPORT_FIELD_NAMES,
            which governs the field order.
            </remarks>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.ReportGenerators.ListKeyAssemblyProperties(System.Reflection.Assembly,System.IO.StreamWriter,System.Char)">
            <summary>
            Create a record and append it to the flat file behind a
            StreamWriter.
            </summary>
            <param name="pasmSubject">
            Specify the assembly to be evaluated.
            </param>
            <param name="pswOut">
            Specify the open StreamWriter upon which to write.
            </param>
            <param name="pchrDlm">
            Specify the delimiter character.
            </param>
            <remarks>
            The label template is a managed resource string, REPORT_FIELD_NAMES,
            which governs the field order.
            </remarks>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.ReportGenerators.ShowKeyAssemblyProperties(System.Reflection.Assembly,System.Int32,System.Int32)">
            <summary>
            List selected properties of any assembly on a console.
            </summary>
            <param name="pasmSubject">
            Pass in a reference to the desired assembly, which may be the
            assembly that exports a specified type, the executing assembly, the
            calling assembly, the entry assembly, or any other assembly for
            which you can obtain a reference.
            </param>
            <param name="pintJ">
            Pass in the array subscript, a 32 bit signed integer.
            </param>
            <param name="pintNDependents">
            Pass in the array element count, a 32 bit signed integer.
            </param>
        </member>
        <member name="T:WizardWrx.AssemblyUtils.SortableManagedResourceItem">
            <summary>
            Instances of this class represent arbitrary managed resource items.
            </summary>
            <remarks>
            This class is necessary because the public dictionary is opaque, so a
            consumer has no control over the order in which they are returned. Since
            this wrapper implements the IComparable interface, collections of these
            objects can be sorted.
            </remarks>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.SortableManagedResourceItem.#ctor">
            <summary>
            Other than satisfying the requirements of the IList interface, the
            uninitialized object is useless.
            </summary>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.SortableManagedResourceItem.#ctor(System.String,System.Object)">
            <summary>
            This constructor creates a fully initialized instance from the data
            in the Current property of the IDictionaryEnumerator object returned
            by a ResourceSet instance.
            </summary>
            <param name="pstrName">
            Set the Name to the string returned by the Key property of the
            enumerator.
            </param>
            <param name="pobjValue">
            Set the Value to the System.object returned by the Value property of
            the enumerator.
            </param>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.SortableManagedResourceItem.Name">
            <summary>
            The Name is the Name shown in the property sheet grid into which 
            garden variety managed string resources are input.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.SortableManagedResourceItem.Value">
            <summary>
            The ResourceValue property is the Value property shown in the
            property sheet grid into which garden variety managed string
            resources are input, and its type is usually System.string.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.SortableManagedResourceItem.TypeName">
            <summary>
            Since the full type specification is accessible through the Value
            property, and the string representation of the FullName is its most
            useful property, it gets its own read only property, which also
            returns just "string" for the common case, for which the prefix is
            redundant.
            </summary>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.SortableManagedResourceItem.System#IComparable{WizardWrx#AssemblyUtils#SortableManagedResourceItem}#CompareTo(WizardWrx.AssemblyUtils.SortableManagedResourceItem)">
            <summary>
            Making the comparison based on the Name property permits sorting the
            resources in the most logical order.
            </summary>
            <param name="other">
            The explicit implementation puts the burden of enforcing type safety
            on the runtime system.
            </param>
            <returns>
            Since it is a pass-through of another CompareTo method, the return
            type is guaranteed to adhere to the interface specification.
            </returns>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.SortableManagedResourceItem.GetInternalResourceName(System.String,System.Reflection.Assembly)">
            <summary>
            Use the list of Manifest Resource Names returned by method
            GetManifestResourceNames on a specified assembly. Each of several
            methods employs a different mechanism to identify the assembly of
            interest.
            </summary>
            <param name="pstrResourceName">
            Specify the name of the file from which the embedded resource was
            created. Typically, this will be the local name of the file in the
            source code tree.
            </param>
            <param name="pasmSource">
            Pass a reference to the Assembly that is supposed to contain the
            desired resource.
            </param>
            <returns>
            If the function succeeds, the return value is the internal name of
            the requested resource, which is fed to GetManifestResourceStream on
            the same assembly, which returns a read-only Stream backed by the
            embedded resource. If the specified resource is not found, it
            returns null.
            </returns>
            <remarks>
            Since I cannot imagine any use for this method beyond its
            infrastructure role in this class, I marked it private.
            </remarks>
        </member>
        <member name="M:WizardWrx.AssemblyUtils.SortableManagedResourceItem.ListResourcesInAssemblyByName(System.Reflection.Assembly,System.IO.StreamWriter)">
            <summary>
            Call this static method from a console program to list the resources
            defined in an assembly alphabetically by name.
            </summary>
            <param name="pasmInWhichEmbedded">
            Specify the assembly that contains the resources to be enumerated.
            </param>
            <param name="pswReportFile">
            Pass in a reference to an open StreamWriter to generate a
            tab-delimited report in addition to the console output. File output
            is suppressed when this parameter is null.
            </param>
            <remarks>
            This method creates and consumes a generic List of instances of the
            class that hosts it, and uses string padding to vertically align the
            list without resorting to composite format items.
            </remarks>
        </member>
        <member name="T:WizardWrx.AssemblyUtils.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.DEPENDENT_ASSEMBLYINFO_TOSTRING_TEMPLATE">
            <summary>
              Looks up a localized string similar to {{{0} (FullName = {1}, IsLoaded = {2})}}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_DEPENDENTS_DETAILS_HEAD">
            <summary>
              Looks up a localized string similar to Properties of direct dependent assemblies follow.{0}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_DEPENDENTS_DETAILS_TAIL">
            <summary>
              Looks up a localized string similar to {1}End of list for Assembly {0}:{1}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_DEPENDENTS_LIST_HEADER">
            <summary>
              Looks up a localized string similar to {2}Assembly {0} depends upon the following {1} assemblies:{2}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_DEPENDENTS_LIST_TAIL">
            <summary>
              Looks up a localized string similar to {1}End of list for Assembly {0}:{1}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_PROPS_ASSEMBLYFILEBASENAME">
            <summary>
              Looks up a localized string similar to         AssemblyFileBaseName = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_PROPS_ASSEMBLYFILENAME">
            <summary>
              Looks up a localized string similar to         AssemblyFileName     = {0}{1}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_PROPS_ASSEMBLYGUIDSTRING">
            <summary>
              Looks up a localized string similar to         AssemblyGuidString   = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_PROPS_ASSEMBLYVERSION">
            <summary>
              Looks up a localized string similar to         AssemblyVersion      = {0} (per AssemblyName.GetAssemblyName).
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_PROPS_ASSEMBYDIRNAME">
            <summary>
              Looks up a localized string similar to         AssembyDirName       = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_PROPS_COMMENTS">
            <summary>
              Looks up a localized string similar to         Comments             = {0}{1}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_PROPS_COMPANYNAME">
            <summary>
              Looks up a localized string similar to         CompanyName          = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_PROPS_CULTURE">
            <summary>
              Looks up a localized string similar to         Culture              = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_PROPS_DESCRIPTION">
            <summary>
              Looks up a localized string similar to         Description          = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_PROPS_FILE_CREATION_DATE">
            <summary>
              Looks up a localized string similar to         File Creation Date   = {0} ({1} UTC).
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_PROPS_FILE_MODIFIED_DATE">
            <summary>
              Looks up a localized string similar to         File Modified Date   = {0} ({1} UTC).
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_PROPS_LEGALCOPYRIGHT">
            <summary>
              Looks up a localized string similar to         LegalCopyright       = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_PROPS_LEGALTRADEMARKS">
            <summary>
              Looks up a localized string similar to         LegalTrademarks      = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_PROPS_PRODUCTNAME">
            <summary>
              Looks up a localized string similar to         ProductName          = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_PROPS_PUBLICKEYTOKEN">
            <summary>
              Looks up a localized string similar to         PublicKeyToken       = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_PROPS_RUNTIME_VERSION">
            <summary>
              Looks up a localized string similar to         Runtime Version      = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_PROPS_SELECTED_DLL_PROPS_BEGIN">
            <summary>
              Looks up a localized string similar to     Selected properties of assembly {0} of {1}, {2}:{3}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_PROPS_SELECTED_DLL_PROPS_END">
            <summary>
              Looks up a localized string similar to {2}    End of selected properties of assembly {0} of {1}{2}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_ASM_PROPS_VERSIONSTRING">
            <summary>
              Looks up a localized string similar to         VersionString        = {0} (per System.Diagnostics.FileVersionInfo.GetVersionInfo).
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_GETSUBSYST_FILE_NOT_FOUND">
            <summary>
              Looks up a localized string similar to The specified file, {1}{0}{1}, cannot be found..
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_GETSUBSYST_FILE_READ_ERROR">
            <summary>
              Looks up a localized string similar to An I/O error occurred while reading input file {1}{2}Exception type: {0}{2}Additional details are in the inner exception..
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_GETSUBSYST_FILE_READ_SHORT">
            <summary>
              Looks up a localized string similar to An I/O error occurred while reading input file {0}{3}Only {1} of the expected {2} bytes were read..
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_GETSUBSYST_FILE_TOO_SMALL">
            <summary>
              Looks up a localized string similar to The specified file, {1}{0}{1}, is too short to be a valid Portable Executable.{4}Actual File Size (bytes) = {2:N0}{4}Minimum Size of PE File  = {3:N0}{4}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_GETSUBSYST_FILENAME_POINTER_EMPTY_STRING">
            <summary>
              Looks up a localized string similar to The specified file name pointer is the empty string..
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_GETSUBSYST_GENERAL_EXCEPTION">
            <summary>
              Looks up a localized string similar to An {0} exception was raised by the Microsoft .NET runtime engine while processing input file {1}.{2}Additional details are in the inner exception..
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_GETSUBSYST_NO_MAGIC">
            <summary>
              Looks up a localized string similar to The system cannot find the magic WORD in file {0}..
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_GETSUBSYST_NO_NT_MAGIC">
            <summary>
              Looks up a localized string similar to The system cannot find the NT header magic DWORD in file {0}..
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_GETSUBSYST_NO_NT_SIGNATURE">
            <summary>
              Looks up a localized string similar to The NT header block pointer is invalid in file {0}{2}Pointer value = 0x{1:x8} ({1:N0} decimal.).
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_GETSUBSYST_NULL_FILENAME_POINTER">
            <summary>
              Looks up a localized string similar to The specified file name pointer is invalid (NULL)..
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_IMAGE_SUBSYSTEM_NATIVE">
            <summary>
              Looks up a localized string similar to Native.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_IMAGE_SUBSYSTEM_NATIVE_LONG">
            <summary>
              Looks up a localized string similar to Image doesn&apos;t require a subsystem..
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_IMAGE_SUBSYSTEM_NATIVE_WINDOWS">
            <summary>
              Looks up a localized string similar to Native Win9x driver.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_IMAGE_SUBSYSTEM_NATIVE_WINDOWS_LONG">
            <summary>
              Looks up a localized string similar to Image is a native Win9x driver..
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_IMAGE_SUBSYSTEM_OS2_CUI">
            <summary>
              Looks up a localized string similar to OS/2 character.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_IMAGE_SUBSYSTEM_OS2_CUI_LONG">
            <summary>
              Looks up a localized string similar to Image runs in the OS/2 character subsystem..
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_IMAGE_SUBSYSTEM_POSIX_CUI">
            <summary>
              Looks up a localized string similar to Posix character.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_IMAGE_SUBSYSTEM_POSIX_CUI_LONG">
            <summary>
              Looks up a localized string similar to Image runs in the Posix character subsystem..
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_IMAGE_SUBSYSTEM_UNKNOWN">
            <summary>
              Looks up a localized string similar to Unknown.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_IMAGE_SUBSYSTEM_UNKNOWN_LONG">
            <summary>
              Looks up a localized string similar to Unknown subsystem..
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_IMAGE_SUBSYSTEM_WINDOWS_CE_GUI">
            <summary>
              Looks up a localized string similar to Windows CE.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_IMAGE_SUBSYSTEM_WINDOWS_CE_GUI_LONG">
            <summary>
              Looks up a localized string similar to Image runs in the Windows CE subsystem..
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_IMAGE_SUBSYSTEM_WINDOWS_CUI">
            <summary>
              Looks up a localized string similar to Windows character.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_IMAGE_SUBSYSTEM_WINDOWS_CUI_LONG">
            <summary>
              Looks up a localized string similar to Image runs in the Windows character subsystem..
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_IMAGE_SUBSYSTEM_WINDOWS_GUI">
            <summary>
              Looks up a localized string similar to Windows GUI.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_IMAGE_SUBSYSTEM_WINDOWS_GUI_LONG">
            <summary>
              Looks up a localized string similar to Image runs in the Windows GUI subsystem..
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_PRIVATE_DOMAIN_NAME_TEMPLATE">
            <summary>
              Looks up a localized string similar to ReflectedAssemblyContainer for Assembly {0}&quot;.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_RESOURCE_LIST_BASENAME">
            <summary>
              Looks up a localized string similar to     Location   = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_RESOURCE_LIST_FQNAME">
            <summary>
              Looks up a localized string similar to Assembly Name  = {0}{1}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_RESOURCE_LIST_ITEM_COUNT">
            <summary>
              Looks up a localized string similar to     # of Items = {0}{1}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_RESOURCE_LIST_ITEM_DETAIL">
            <summary>
              Looks up a localized string similar to     {0} # {1}: Name = {2}, Value = {3}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_RESOURCE_LIST_NAMED_ITEM">
            <summary>
              Looks up a localized string similar to         Embedded Resource # {0}: {1}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_RESOURCE_LIST_NAMES_END">
            <summary>
              Looks up a localized string similar to {0}    End of list{0}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_RESOURCE_LIST_NO_STRINGS">
            <summary>
              Looks up a localized string similar to The speicifed assembly contains no embedded strings resources..
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_RESOURCE_LIST_NONE">
            <summary>
              Looks up a localized string similar to The specified assembly contains no embedded resources of any kind..
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_UNSUPPORTED_PE_SUBSYSTEM">
            <summary>
              Looks up a localized string similar to Only assemblies that run in the character mode subsystem are supported.{2}The subsytem ID of the entry assembly is {0} ({1})..
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.MSG_XLATE_SUBSYST_INVALID_ID">
            <summary>
              Looks up a localized string similar to The subsystem ID must be greater than zero and less than ten..
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.PESUBSYSTEMINFO_TOSTRING_TEMPLATE">
            <summary>
              Looks up a localized string similar to {{{0} (Subsystem ID = {1} ({2})}}.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.REPORT_FIELD_NAMES">
            <summary>
              Looks up a localized string similar to FullName,AssemblyFileBaseName,AssemblyFileName,AssemblyGuidString,AssembyDirName,Comments,CompanyName,Culture,Description,FileCreationDate,FileModifiedDate,LegalCopyright,LegalTrademarks,ProductName,PublicKeyToken,RuntimeVersion,VersionString.
            </summary>
        </member>
        <member name="P:WizardWrx.AssemblyUtils.Properties.Resources.RESOURCE_REPORT_LABELS">
            <summary>
              Looks up a localized string similar to ItemNbr\tName\tValue.
            </summary>
        </member>
    </members>
</doc>
