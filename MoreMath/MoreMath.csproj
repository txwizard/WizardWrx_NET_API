<?xml version="1.0" encoding="utf-8"?>
<!--
	============================================================================
	Project Name:		MoreMath.csproj

	Project Abstract:	Segregate the math routines so that they alone can be
	                    subjected to arithmetic overflow checking.

	Remarks:			As it applies to Roslyn compiler, the Deterministic
						switch implements determinism in a very narrow context,
						which affects only the versioning of the generated PE
						file in which the assembly is stored.

						This switch is relatively new, and its inclusion in the
						default generated project skeleton appears to be quite
						recent.

						For further details, please see the first article cited
						in the References section that follows.

	References:			1)	Deterministic builds in Roslyn
							http://blog.paranoidcoding.com/2016/04/05/deterministic-builds-in-roslyn.html

						2)	/deterministic switch for msbuild does not work
							https://stackoverflow.com/questions/39657709/deterministic-switch-for-msbuild-does-not-work

	============================================================================
	Revision History
	============================================================================

	Date       By  Description
	========== === =============================================================
	2018/12/23 DAG Disable deterministic versioning.

	2019/07/18 DAG Add automatic NuGet package publication.

    2020/10/17 DAG Define custom task NuGetPackageNameFixup, and add tasks to
                   build a package that uses SemVer version numbering and push
                   it to the NuGet repository, and add the new targets required
                   to publish NuGet packages.

                   Define he following MSBuild macros:

                   		PackageDir
                   		AllowedOutputExtensionsInPackageBuildOutputFolder
                   		SolutionPackageDir

    2020/10/18 DAG Add -Source nuget.org to NuGet Puse command line.

    2021/01/30 DAG Reinstate wwBldNbrMgr.

    2022/04/24 DAG 1) Define a new UsingTask, NuGetPackagePublishDecision, and
                      use it in a new PublishIfNew target that runs as the
                      AfterBuild target so that its output can prevent the
                      Package and Publish targets executing.

                   2) Move everything involved with NuGet package management
                      into a new WizardWrx_NuGet_Packages Targets file, which
                      is imported (and processed) last.

    2022/06/25 DAG Replace wwBldNbrMgr with AssemblyInfoUtil.

    2022/07/10 DAG When I replaced wwBldNbrMgr with AssemblyInfoUtil, I put it
                   in the PostBuildEvent event instead of the PreBuildEvent
                   target.
	============================================================================
-->
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{A9512FCD-3F59-4CE9-8923-367AED4511A8}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>WizardWrx</RootNamespace>
    <AssemblyName>WizardWrx.MoreMath</AssemblyName>
    <TargetFrameworkVersion>v4.8</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
    <!-- 2019/07/18 01:49:47 - DAG - Added for NuGet package builder -->
    <PackageDir>$(ProjectDir)Package</PackageDir>
    <SolutionPackageDir>$(ProjectDir)..\packages</SolutionPackageDir>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>.pdb$;(AllowedOutputExtensionsInPackageBuildOutputFolder)</AllowedOutputExtensionsInPackageBuildOutputFolder>
    <!-- 2020-10-17 01:27:48 - DAG - Add the Deterministic compiler switch, which goes well with SemVer version numbering. -->
    <Deterministic>true</Deterministic>
    <!-- 2020-10-17 01:27:48 - DAG - Define SolutionPackageDir, which points to the local NuGet package directory shared by the entire solution. -->
    <SolutionPackageDir>$(ProjectDir)..\packages</SolutionPackageDir>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <DocumentationFile>bin\Debug\WizardWrx.MoreMath.xml</DocumentationFile>
    <CheckForOverflowUnderflow>true</CheckForOverflowUnderflow>
    <LangVersion>default</LangVersion>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <DocumentationFile>bin\Release\WizardWrx.MoreMath.xml</DocumentationFile>
    <CheckForOverflowUnderflow>true</CheckForOverflowUnderflow>
    <Prefer32Bit>false</Prefer32Bit>
    <LangVersion>default</LangVersion>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Core" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="..\ProductAssemblyInfo.cs">
      <Link>Properties\ProductAssemblyInfo.cs</Link>
    </Compile>
    <Compile Include="MoreMath.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Common\Common.csproj">
      <Project>{c1fb48d6-4a54-4424-bca1-4777f3aae2df}</Project>
      <Name>Common</Name>
    </ProjectReference>
    <ProjectReference Include="..\DiagnosticInfo\DiagnosticInfo.csproj">
      <Project>{a248e5a4-b42b-4b10-8f52-e58b06a0bc18}</Project>
      <Name>DiagnosticInfo</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <None Include="MoreMath.nuspec" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it.
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
  <PropertyGroup>
    <PreBuildEvent>AssemblyInfoUtil.exe $(ProjectDir)Properties\AssemblyInfo.cs -inc:3 -fv -cy -onlywhenmodified</PreBuildEvent>
  </PropertyGroup>
  <PropertyGroup>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <Import Project="$(Custom_MSBuild_Targets)\WizardWrx_NuGet_Packages.TARGETS" Condition="Exists('$(Custom_MSBuild_Targets)\WizardWrx_NuGet_Packages.TARGETS')" />
</Project>