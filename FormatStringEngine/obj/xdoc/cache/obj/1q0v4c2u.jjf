id: WizardWrx.FormatStringEngine
language: CSharp
name:
  Default: WizardWrx.FormatStringEngine
qualifiedName:
  Default: WizardWrx.FormatStringEngine
type: Assembly
modifiers: {}
items:
- id: WizardWrx.FormatStringEngine
  commentId: N:WizardWrx.FormatStringEngine
  language: CSharp
  name:
    CSharp: WizardWrx.FormatStringEngine
    VB: WizardWrx.FormatStringEngine
  nameWithType:
    CSharp: WizardWrx.FormatStringEngine
    VB: WizardWrx.FormatStringEngine
  qualifiedName:
    CSharp: WizardWrx.FormatStringEngine
    VB: WizardWrx.FormatStringEngine
  type: Namespace
  assemblies:
  - WizardWrx.FormatStringEngine
  modifiers: {}
  items:
  - id: WizardWrx.FormatStringEngine.FormatItem
    commentId: T:WizardWrx.FormatStringEngine.FormatItem
    language: CSharp
    name:
      CSharp: FormatItem
      VB: FormatItem
    nameWithType:
      CSharp: FormatItem
      VB: FormatItem
    qualifiedName:
      CSharp: WizardWrx.FormatStringEngine.FormatItem
      VB: WizardWrx.FormatStringEngine.FormatItem
    type: Class
    assemblies:
    - WizardWrx.FormatStringEngine
    namespace: WizardWrx.FormatStringEngine
    source:
      id: FormatItem
      path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
      startLine: 142
    summary: "\nThis is an infrastructure class; instances represent a FormatItem found\nin the FormatString associated with the FormatStringParser that owns it.\n\nThe static methods of this class are public, and are very handy for\ncreating compact summary reports.\n\nUse them to construct composite format items that have their\ncharacteristics, especially their widths, established at runtime.\nSetting the width dynamically permits summary totals and their labels,\nall of which may have widely varying widths that are unknown in advance\nto be set in such a way that a set of numeric values and their labels\ncan be printed with labels on the left, and a minimum amount of white\nspace between the longest label and the numbers.\n"
    remarks: "\nWhile the class, itself, is marked Public, everything else about it is\nmarked as Internal, so that only instances of classes defined in this\nassembly can create instances, while instances of the FormatStringParser\nclass expose a collection of them through its FormatItems property, a\nFormatItemsCollection.\n"
    example: []
    syntax:
      content:
        CSharp: public class FormatItem
        VB: Public Class FormatItem
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: WizardWrx.FormatStringEngine.FormatItem.APPEARANCE_ORDER_NOT_SET
      commentId: F:WizardWrx.FormatStringEngine.FormatItem.APPEARANCE_ORDER_NOT_SET
      language: CSharp
      name:
        CSharp: APPEARANCE_ORDER_NOT_SET
        VB: APPEARANCE_ORDER_NOT_SET
      nameWithType:
        CSharp: FormatItem.APPEARANCE_ORDER_NOT_SET
        VB: FormatItem.APPEARANCE_ORDER_NOT_SET
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.APPEARANCE_ORDER_NOT_SET
        VB: WizardWrx.FormatStringEngine.FormatItem.APPEARANCE_ORDER_NOT_SET
      type: Field
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: APPEARANCE_ORDER_NOT_SET
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 176
      summary: "\nThe ApperanceOrder property evaluating to this value means that the\nproperty is uninitialized.\n"
      example: []
      syntax:
        content:
          CSharp: public const uint APPEARANCE_ORDER_NOT_SET = 0U
          VB: Public Const APPEARANCE_ORDER_NOT_SET As UInteger = 0UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.FormatStringEngine.FormatItem.INVALID_INDEX
      commentId: F:WizardWrx.FormatStringEngine.FormatItem.INVALID_INDEX
      language: CSharp
      name:
        CSharp: INVALID_INDEX
        VB: INVALID_INDEX
      nameWithType:
        CSharp: FormatItem.INVALID_INDEX
        VB: FormatItem.INVALID_INDEX
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.INVALID_INDEX
        VB: WizardWrx.FormatStringEngine.FormatItem.INVALID_INDEX
      type: Field
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: INVALID_INDEX
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 182
      summary: "\nMake the lower bound of an index visible to class consumers.\n"
      example: []
      syntax:
        content:
          CSharp: public const int INVALID_INDEX = -1
          VB: Public Const INVALID_INDEX As Integer = -1
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.FormatStringEngine.FormatItem.INVALID_OFFSET
      commentId: F:WizardWrx.FormatStringEngine.FormatItem.INVALID_OFFSET
      language: CSharp
      name:
        CSharp: INVALID_OFFSET
        VB: INVALID_OFFSET
      nameWithType:
        CSharp: FormatItem.INVALID_OFFSET
        VB: FormatItem.INVALID_OFFSET
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.INVALID_OFFSET
        VB: WizardWrx.FormatStringEngine.FormatItem.INVALID_OFFSET
      type: Field
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: INVALID_OFFSET
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 188
      summary: "\nMake the lower bound of a string offset visible to class consumers.\n"
      example: []
      syntax:
        content:
          CSharp: public const int INVALID_OFFSET = -1
          VB: Public Const INVALID_OFFSET As Integer = -1
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.FormatStringEngine.FormatItem.INVALID_RAW_LENGTH
      commentId: F:WizardWrx.FormatStringEngine.FormatItem.INVALID_RAW_LENGTH
      language: CSharp
      name:
        CSharp: INVALID_RAW_LENGTH
        VB: INVALID_RAW_LENGTH
      nameWithType:
        CSharp: FormatItem.INVALID_RAW_LENGTH
        VB: FormatItem.INVALID_RAW_LENGTH
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.INVALID_RAW_LENGTH
        VB: WizardWrx.FormatStringEngine.FormatItem.INVALID_RAW_LENGTH
      type: Field
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: INVALID_RAW_LENGTH
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 195
      summary: "\nMake the lower bound of the RawLength property visible to class\nconsumers.\n"
      example: []
      syntax:
        content:
          CSharp: public const int INVALID_RAW_LENGTH = 0
          VB: Public Const INVALID_RAW_LENGTH As Integer = 0
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.FormatStringEngine.FormatItem.INVALID_WIDTH
      commentId: F:WizardWrx.FormatStringEngine.FormatItem.INVALID_WIDTH
      language: CSharp
      name:
        CSharp: INVALID_WIDTH
        VB: INVALID_WIDTH
      nameWithType:
        CSharp: FormatItem.INVALID_WIDTH
        VB: FormatItem.INVALID_WIDTH
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.INVALID_WIDTH
        VB: WizardWrx.FormatStringEngine.FormatItem.INVALID_WIDTH
      type: Field
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: INVALID_WIDTH
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 202
      summary: "\nMake the lower bound of the MinimumWidth property visible to class\nconsumers.\n"
      example: []
      syntax:
        content:
          CSharp: public const int INVALID_WIDTH = 0
          VB: Public Const INVALID_WIDTH As Integer = 0
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.FormatStringEngine.FormatItem.MINIMUM_VALID_FORMAT_ITEM_INDEX
      commentId: F:WizardWrx.FormatStringEngine.FormatItem.MINIMUM_VALID_FORMAT_ITEM_INDEX
      language: CSharp
      name:
        CSharp: MINIMUM_VALID_FORMAT_ITEM_INDEX
        VB: MINIMUM_VALID_FORMAT_ITEM_INDEX
      nameWithType:
        CSharp: FormatItem.MINIMUM_VALID_FORMAT_ITEM_INDEX
        VB: FormatItem.MINIMUM_VALID_FORMAT_ITEM_INDEX
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.MINIMUM_VALID_FORMAT_ITEM_INDEX
        VB: WizardWrx.FormatStringEngine.FormatItem.MINIMUM_VALID_FORMAT_ITEM_INDEX
      type: Field
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: MINIMUM_VALID_FORMAT_ITEM_INDEX
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 208
      summary: "\nLike all good array subscripts, format item indexes start at zero.\n"
      example: []
      syntax:
        content:
          CSharp: public const int MINIMUM_VALID_FORMAT_ITEM_INDEX = 0
          VB: Public Const MINIMUM_VALID_FORMAT_ITEM_INDEX As Integer = 0
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.FormatStringEngine.FormatItem.INTEGER_PER_REG_SETTINGS
      commentId: F:WizardWrx.FormatStringEngine.FormatItem.INTEGER_PER_REG_SETTINGS
      language: CSharp
      name:
        CSharp: INTEGER_PER_REG_SETTINGS
        VB: INTEGER_PER_REG_SETTINGS
      nameWithType:
        CSharp: FormatItem.INTEGER_PER_REG_SETTINGS
        VB: FormatItem.INTEGER_PER_REG_SETTINGS
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.INTEGER_PER_REG_SETTINGS
        VB: WizardWrx.FormatStringEngine.FormatItem.INTEGER_PER_REG_SETTINGS
      type: Field
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: INTEGER_PER_REG_SETTINGS
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 216
      summary: "\nLike all good array subscripts, format item indexes start at zero.\n"
      example: []
      syntax:
        content:
          CSharp: public const string INTEGER_PER_REG_SETTINGS = "N0"
          VB: Public Const INTEGER_PER_REG_SETTINGS As String = "N0"
        return:
          type: System.String
      see:
      - linkType: HRef
        linkId: https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#NFormatString
        altText: https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#NFormatString
      - linkId: WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS
        commentId: F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
      references:
        WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS: 
    - id: WizardWrx.FormatStringEngine.FormatItem.AppearanceOrder
      commentId: P:WizardWrx.FormatStringEngine.FormatItem.AppearanceOrder
      language: CSharp
      name:
        CSharp: AppearanceOrder
        VB: AppearanceOrder
      nameWithType:
        CSharp: FormatItem.AppearanceOrder
        VB: FormatItem.AppearanceOrder
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.AppearanceOrder
        VB: WizardWrx.FormatStringEngine.FormatItem.AppearanceOrder
      type: Property
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: AppearanceOrder
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 327
      summary: "\nGets the AppearanceOrder property, which is the order, counting from\n1, of its appearance in the format string.\n"
      remarks: "\nThis property is set when the Add method of a FormatItemsCollection\nobject calls the SetAppearanceOrder on the instance just added. This\nis achieved by overriding the Add method of its base class.\n"
      example: []
      syntax:
        content:
          CSharp: public uint AppearanceOrder { get; }
          VB: Public ReadOnly Property AppearanceOrder As UInteger
        parameters: []
        return:
          type: System.UInt32
      overload: WizardWrx.FormatStringEngine.FormatItem.AppearanceOrder*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: WizardWrx.FormatStringEngine.FormatItem.Index
      commentId: P:WizardWrx.FormatStringEngine.FormatItem.Index
      language: CSharp
      name:
        CSharp: Index
        VB: Index
      nameWithType:
        CSharp: FormatItem.Index
        VB: FormatItem.Index
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.Index
        VB: WizardWrx.FormatStringEngine.FormatItem.Index
      type: Property
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: Index
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 338
      summary: "\nGets the Index property of the item, which is the first, or only,\nnumber found within the item string.\n\nA return value of minus one means that the Index property is\nuninitialized, which should be true only when the entire object is\nuninitialized.\n"
      example: []
      syntax:
        content:
          CSharp: public int Index { get; }
          VB: Public ReadOnly Property Index As Integer
        parameters: []
        return:
          type: System.Int32
      overload: WizardWrx.FormatStringEngine.FormatItem.Index*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: WizardWrx.FormatStringEngine.FormatItem.ItemFormat
      commentId: P:WizardWrx.FormatStringEngine.FormatItem.ItemFormat
      language: CSharp
      name:
        CSharp: ItemFormat
        VB: ItemFormat
      nameWithType:
        CSharp: FormatItem.ItemFormat
        VB: FormatItem.ItemFormat
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.ItemFormat
        VB: WizardWrx.FormatStringEngine.FormatItem.ItemFormat
      type: Property
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: ItemFormat
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 348
      summary: "\nGets or sets the optional ItemFormat property of the item.\n\nA return value of null (Nothing in Visual Basic) means that the\nItemFormat property is undefined, which is permissible, since it is\noptional.\n"
      example: []
      syntax:
        content:
          CSharp: public string ItemFormat { get; set; }
          VB: Public Property ItemFormat As String
        parameters: []
        return:
          type: System.String
      overload: WizardWrx.FormatStringEngine.FormatItem.ItemFormat*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: WizardWrx.FormatStringEngine.FormatItem.MinimumWidth
      commentId: P:WizardWrx.FormatStringEngine.FormatItem.MinimumWidth
      language: CSharp
      name:
        CSharp: MinimumWidth
        VB: MinimumWidth
      nameWithType:
        CSharp: FormatItem.MinimumWidth
        VB: FormatItem.MinimumWidth
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.MinimumWidth
        VB: WizardWrx.FormatStringEngine.FormatItem.MinimumWidth
      type: Property
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: MinimumWidth
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 379
      summary: "\nGets or sets the optional MinimumWidth property of the item.\n\nA return value of zero means that the MinimumWidth property is\nundefined, which is permissible, since it is optional.\n"
      remarks: "\nOnce initialized, this property may subsequently be updated by\ncalling the UpdateMinimumWidth method on the instance. The\nsynopsis of the UpdateMinimumWidth method explains in greater\ndetail.\n"
      example: []
      syntax:
        content:
          CSharp: public int MinimumWidth { get; set; }
          VB: Public Property MinimumWidth As Integer
        parameters: []
        return:
          type: System.Int32
      overload: WizardWrx.FormatStringEngine.FormatItem.MinimumWidth*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: WizardWrx.FormatStringEngine.FormatItem.RawLength
      commentId: P:WizardWrx.FormatStringEngine.FormatItem.RawLength
      language: CSharp
      name:
        CSharp: RawLength
        VB: RawLength
      nameWithType:
        CSharp: FormatItem.RawLength
        VB: FormatItem.RawLength
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.RawLength
        VB: WizardWrx.FormatStringEngine.FormatItem.RawLength
      type: Property
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: RawLength
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 415
      summary: "\nGets the RawLength property, the length, in characters, of the raw\nformat item in the format string.\n\nA return value of zero means that the StartOffset property is\nuninitialized or partially initialized.\n"
      remarks: "\nInstance method SetRawLength is called when the closing French brace\nis found to set this property.\n"
      example: []
      syntax:
        content:
          CSharp: public int RawLength { get; }
          VB: Public ReadOnly Property RawLength As Integer
        parameters: []
        return:
          type: System.Int32
      overload: WizardWrx.FormatStringEngine.FormatItem.RawLength*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: WizardWrx.FormatStringEngine.FormatItem.StartOffset
      commentId: P:WizardWrx.FormatStringEngine.FormatItem.StartOffset
      language: CSharp
      name:
        CSharp: StartOffset
        VB: StartOffset
      nameWithType:
        CSharp: FormatItem.StartOffset
        VB: FormatItem.StartOffset
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.StartOffset
        VB: WizardWrx.FormatStringEngine.FormatItem.StartOffset
      type: Property
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: StartOffset
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 430
      summary: "\nGets the required StartOffset property, the offset, counting from 0,\nwhere the format item appears in the format string.\n\nA return value of minus one means that the StartOffset property is\nuninitialized, which should be true only when the entire object is\nuninitialized.\n"
      remarks: "\nThis property is immutable.\n"
      example: []
      syntax:
        content:
          CSharp: public int StartOffset { get; }
          VB: Public ReadOnly Property StartOffset As Integer
        parameters: []
        return:
          type: System.Int32
      overload: WizardWrx.FormatStringEngine.FormatItem.StartOffset*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: WizardWrx.FormatStringEngine.FormatItem.TextAlignment
      commentId: P:WizardWrx.FormatStringEngine.FormatItem.TextAlignment
      language: CSharp
      name:
        CSharp: TextAlignment
        VB: TextAlignment
      nameWithType:
        CSharp: FormatItem.TextAlignment
        VB: FormatItem.TextAlignment
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.TextAlignment
        VB: WizardWrx.FormatStringEngine.FormatItem.TextAlignment
      type: Property
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: TextAlignment
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 437
      summary: "\nGets or sets the Alignment property, if any, associated with the\nitem.\n"
      example: []
      syntax:
        content:
          CSharp: public FormatItem.Alignment TextAlignment { get; set; }
          VB: Public Property TextAlignment As FormatItem.Alignment
        parameters: []
        return:
          type: WizardWrx.FormatStringEngine.FormatItem.Alignment
      overload: WizardWrx.FormatStringEngine.FormatItem.TextAlignment*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.UInt32,System.UInt32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String)
      commentId: M:WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.UInt32,System.UInt32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String)
      language: CSharp
      name:
        CSharp: AdjustToMaximumWidth(UInt32, UInt32, FormatItem.Alignment, String)
        VB: AdjustToMaximumWidth(UInt32, UInt32, FormatItem.Alignment, String)
      nameWithType:
        CSharp: FormatItem.AdjustToMaximumWidth(UInt32, UInt32, FormatItem.Alignment, String)
        VB: FormatItem.AdjustToMaximumWidth(UInt32, UInt32, FormatItem.Alignment, String)
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.UInt32, System.UInt32, WizardWrx.FormatStringEngine.FormatItem.Alignment, System.String)
        VB: WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.UInt32, System.UInt32, WizardWrx.FormatStringEngine.FormatItem.Alignment, System.String)
      type: Method
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: AdjustToMaximumWidth
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 476
      summary: "\nAssemble a composite format item from its constituents.\n"
      example: []
      syntax:
        content:
          CSharp: public static string AdjustToMaximumWidth(uint puintItemIndex, uint puintMaximumWidth, FormatItem.Alignment penmAlignment, string pstrFormatString)
          VB: Public Shared Function AdjustToMaximumWidth(puintItemIndex As UInteger, puintMaximumWidth As UInteger, penmAlignment As FormatItem.Alignment, pstrFormatString As String) As String
        parameters:
        - id: puintItemIndex
          type: System.UInt32
          description: "\nThe index is a standard zero based array subscript which corresponds\nto the position of an item in a list of objects. The list happens to\nbe the items that correspond to the format items in a format string.\n"
        - id: puintMaximumWidth
          type: System.UInt32
          description: "\nThe maximum width is a positive integer that specifies the desired\nwidth of the item.\n"
        - id: penmAlignment
          type: WizardWrx.FormatStringEngine.FormatItem.Alignment
          description: "\nSpecify Left or Right. Center alignment is unsupported, although it\ncould be achieved with custom code.\n"
        - id: pstrFormatString
          type: System.String
          description: "\nSpecify a Standard Numeric, Date, or Text format string or a custom\nstring composed around a standard string.\n"
        return:
          type: System.String
          description: "\nThe returned string is ready to insert into a complete format string\nfor use with string.Format, Console.WriteLine, and their numerous\ncousins.\n\nThe safest way to insert it into a format string is by calling a\ncompanion method, UpgradeFormatItem, which expects a format string,\npuintItemIndex, and the string returned by this method.\n"
      overload: WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth*
      see:
      - linkId: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,System.String)
        commentId: M:WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,System.String)
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,System.String): 
    - id: WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.Int32,System.UInt32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String)
      commentId: M:WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.Int32,System.UInt32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String)
      language: CSharp
      name:
        CSharp: AdjustToMaximumWidth(Int32, UInt32, FormatItem.Alignment, String)
        VB: AdjustToMaximumWidth(Int32, UInt32, FormatItem.Alignment, String)
      nameWithType:
        CSharp: FormatItem.AdjustToMaximumWidth(Int32, UInt32, FormatItem.Alignment, String)
        VB: FormatItem.AdjustToMaximumWidth(Int32, UInt32, FormatItem.Alignment, String)
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.Int32, System.UInt32, WizardWrx.FormatStringEngine.FormatItem.Alignment, System.String)
        VB: WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.Int32, System.UInt32, WizardWrx.FormatStringEngine.FormatItem.Alignment, System.String)
      type: Method
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: AdjustToMaximumWidth
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 520
      summary: "\nAssemble a composite format item from its constituents.\n"
      example: []
      syntax:
        content:
          CSharp: public static string AdjustToMaximumWidth(int pintItemIndex, uint puintMaximumWidth, FormatItem.Alignment penmAlignment, string pstrFormatString)
          VB: Public Shared Function AdjustToMaximumWidth(pintItemIndex As Integer, puintMaximumWidth As UInteger, penmAlignment As FormatItem.Alignment, pstrFormatString As String) As String
        parameters:
        - id: pintItemIndex
          type: System.Int32
          description: "\nThe index is a standard zero based array subscript which corresponds\nto the position of an item in a list of objects. The list happens to\nbe the items that correspond to the format items in a format string.\n"
        - id: puintMaximumWidth
          type: System.UInt32
          description: "\nThe maximum width is a positive integer that specifies the desired\nwidth of the item.\n"
        - id: penmAlignment
          type: WizardWrx.FormatStringEngine.FormatItem.Alignment
          description: "\nSpecify Left or Right. Center alignment is unsupported, although it\ncould be achieved with custom code.\n"
        - id: pstrFormatString
          type: System.String
          description: "\nSpecify a Standard Numeric, Date, or Text format string or a custom\nstring composed around a standard string.\n"
        return:
          type: System.String
          description: "\nThe returned string is ready to insert into a complete format string\nfor use with string.Format, Console.WriteLine, and their numerous\ncousins.\n\nThe safest way to insert it into a format string is by calling a\ncompanion method, UpgradeFormatItem, which expects a format string,\npuintItemIndex, and the string returned by this method.\n"
      overload: WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth*
      see:
      - linkId: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,System.String)
        commentId: M:WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,System.String)
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,System.String): 
    - id: WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.UInt32,System.Int32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String)
      commentId: M:WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.UInt32,System.Int32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String)
      language: CSharp
      name:
        CSharp: AdjustToMaximumWidth(UInt32, Int32, FormatItem.Alignment, String)
        VB: AdjustToMaximumWidth(UInt32, Int32, FormatItem.Alignment, String)
      nameWithType:
        CSharp: FormatItem.AdjustToMaximumWidth(UInt32, Int32, FormatItem.Alignment, String)
        VB: FormatItem.AdjustToMaximumWidth(UInt32, Int32, FormatItem.Alignment, String)
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.UInt32, System.Int32, WizardWrx.FormatStringEngine.FormatItem.Alignment, System.String)
        VB: WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.UInt32, System.Int32, WizardWrx.FormatStringEngine.FormatItem.Alignment, System.String)
      type: Method
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: AdjustToMaximumWidth
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 564
      summary: "\nAssemble a composite format item from its constituents.\n"
      example: []
      syntax:
        content:
          CSharp: public static string AdjustToMaximumWidth(uint puintItemIndex, int pintMaximumWidth, FormatItem.Alignment penmAlignment, string pstrFormatString)
          VB: Public Shared Function AdjustToMaximumWidth(puintItemIndex As UInteger, pintMaximumWidth As Integer, penmAlignment As FormatItem.Alignment, pstrFormatString As String) As String
        parameters:
        - id: puintItemIndex
          type: System.UInt32
          description: "\nThe index is a standard zero based array subscript which corresponds\nto the position of an item in a list of objects. The list happens to\nbe the items that correspond to the format items in a format string.\n"
        - id: pintMaximumWidth
          type: System.Int32
          description: "\nThe maximum width is a positive integer that specifies the desired\nwidth of the item.\n"
        - id: penmAlignment
          type: WizardWrx.FormatStringEngine.FormatItem.Alignment
          description: "\nSpecify Left or Right. Center alignment is unsupported, although it\ncould be achieved with custom code.\n"
        - id: pstrFormatString
          type: System.String
          description: "\nSpecify a Standard Numeric, Date, or Text format string or a custom\nstring composed around a standard string.\n"
        return:
          type: System.String
          description: "\nThe returned string is ready to insert into a complete format string\nfor use with string.Format, Console.WriteLine, and their numerous\ncousins.\n\nThe safest way to insert it into a format string is by calling a\ncompanion method, UpgradeFormatItem, which expects a format string,\npuintItemIndex, and the string returned by this method.\n"
      overload: WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth*
      see:
      - linkId: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,System.String)
        commentId: M:WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,System.String)
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,System.String): 
    - id: WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.Int32,System.Int32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String)
      commentId: M:WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.Int32,System.Int32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String)
      language: CSharp
      name:
        CSharp: AdjustToMaximumWidth(Int32, Int32, FormatItem.Alignment, String)
        VB: AdjustToMaximumWidth(Int32, Int32, FormatItem.Alignment, String)
      nameWithType:
        CSharp: FormatItem.AdjustToMaximumWidth(Int32, Int32, FormatItem.Alignment, String)
        VB: FormatItem.AdjustToMaximumWidth(Int32, Int32, FormatItem.Alignment, String)
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.Int32, System.Int32, WizardWrx.FormatStringEngine.FormatItem.Alignment, System.String)
        VB: WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.Int32, System.Int32, WizardWrx.FormatStringEngine.FormatItem.Alignment, System.String)
      type: Method
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: AdjustToMaximumWidth
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 608
      summary: "\nAssemble a composite format item from its constituents.\n"
      example: []
      syntax:
        content:
          CSharp: public static string AdjustToMaximumWidth(int pintItemIndex, int pintMaximumWidth, FormatItem.Alignment penmAlignment, string pstrFormatString)
          VB: Public Shared Function AdjustToMaximumWidth(pintItemIndex As Integer, pintMaximumWidth As Integer, penmAlignment As FormatItem.Alignment, pstrFormatString As String) As String
        parameters:
        - id: pintItemIndex
          type: System.Int32
          description: "\nThe index is a standard zero based array subscript which corresponds\nto the position of an item in a list of objects. The list happens to\nbe the items that correspond to the format items in a format string.\n"
        - id: pintMaximumWidth
          type: System.Int32
          description: "\nThe maximum width is a positive integer that specifies the desired\nwidth of the item.\n"
        - id: penmAlignment
          type: WizardWrx.FormatStringEngine.FormatItem.Alignment
          description: "\nSpecify Left or Right. Center alignment is unsupported, although it\ncould be achieved with custom code.\n"
        - id: pstrFormatString
          type: System.String
          description: "\nSpecify a Standard Numeric, Date, or Text format string or a custom\nstring composed around a standard string.\n"
        return:
          type: System.String
          description: "\nThe returned string is ready to insert into a complete format string\nfor use with string.Format, Console.WriteLine, and their numerous\ncousins.\n\nThe safest way to insert it into a format string is by calling a\ncompanion method, UpgradeFormatItem, which expects a format string,\npuintItemIndex, and the string returned by this method.\n"
      overload: WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth*
      see:
      - linkId: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,System.String)
        commentId: M:WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,System.String)
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,System.String): 
    - id: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String,System.Int32,System.Int32)
      commentId: M:WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: AdjustItemNumberWidthPerMaxValue(String, Int32, Int32)
        VB: AdjustItemNumberWidthPerMaxValue(String, Int32, Int32)
      nameWithType:
        CSharp: FormatItem.AdjustItemNumberWidthPerMaxValue(String, Int32, Int32)
        VB: FormatItem.AdjustItemNumberWidthPerMaxValue(String, Int32, Int32)
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String, System.Int32, System.Int32)
        VB: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String, System.Int32, System.Int32)
      type: Method
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: AdjustItemNumberWidthPerMaxValue
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 667
      summary: "\nReplace a basic format item of the form &quot;{n}&quot; where &quot;n&quot; is the item\nnumber, with a composite item that right aligns a numeric value in a\nscreen width that will accommodate the maximum value that will be\nsubstituted for it in the current instance.\n"
      example: []
      syntax:
        content:
          CSharp: public static string AdjustItemNumberWidthPerMaxValue(string pstrInputFormatString, int pintItemIndex, int pintHighestValue)
          VB: Public Shared Function AdjustItemNumberWidthPerMaxValue(pstrInputFormatString As String, pintItemIndex As Integer, pintHighestValue As Integer) As String
        parameters:
        - id: pstrInputFormatString
          type: System.String
          description: "\nSpecify the format string into which to substitute the composite\nformat item.\n"
        - id: pintItemIndex
          type: System.Int32
          description: "\nSpecify the index number of the item to be replaced. The string must\ncontain a format item &quot;{pintItemIndex}&quot; which is replaced.\n"
        - id: pintHighestValue
          type: System.Int32
          description: "\nSpecify the highest value that you expect to substitute for format\nitem {pintItemIndex} such as the Count property of an array that\nholds items to be listed.\n"
        return:
          type: System.String
          description: "\nA new string is returned, with format item {pintItemIndex} replaced\nwith {pintItemIndex,m:N0}, where m = the minimum width required to\ndisplay pintHighestValue using the numeric formatting defined by the\ncurrent Region and Language settings in the Windows Control Panel,\noverriding the decimal places value with a value of zero.\n"
      overload: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String,System.UInt32,System.Int32)
      commentId: M:WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String,System.UInt32,System.Int32)
      language: CSharp
      name:
        CSharp: AdjustItemNumberWidthPerMaxValue(String, UInt32, Int32)
        VB: AdjustItemNumberWidthPerMaxValue(String, UInt32, Int32)
      nameWithType:
        CSharp: FormatItem.AdjustItemNumberWidthPerMaxValue(String, UInt32, Int32)
        VB: FormatItem.AdjustItemNumberWidthPerMaxValue(String, UInt32, Int32)
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String, System.UInt32, System.Int32)
        VB: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String, System.UInt32, System.Int32)
      type: Method
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: AdjustItemNumberWidthPerMaxValue
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 716
      summary: "\nReplace a basic format item of the form &quot;{n}&quot; where &quot;n&quot; is the item\nnumber, with a composite item that right aligns a numeric value in a\nscreen width that will accommodate the maximum value that will be\nsubstituted for it in the current instance.\n"
      example: []
      syntax:
        content:
          CSharp: public static string AdjustItemNumberWidthPerMaxValue(string pstrInputFormatString, uint puintItemIndex, int pintHighestValue)
          VB: Public Shared Function AdjustItemNumberWidthPerMaxValue(pstrInputFormatString As String, puintItemIndex As UInteger, pintHighestValue As Integer) As String
        parameters:
        - id: pstrInputFormatString
          type: System.String
          description: "\nSpecify the format string into which to substitute the composite\nformat item.\n"
        - id: puintItemIndex
          type: System.UInt32
          description: "\nSpecify the index number of the item to be replaced. The string must\ncontain a format item &quot;{pintItemIndex}&quot; which is replaced.\n"
        - id: pintHighestValue
          type: System.Int32
          description: "\nSpecify the highest value that you expect to substitute for format\nitem {pintItemIndex} such as the Count property of an array that\nholds items to be listed.\n"
        return:
          type: System.String
          description: "\nA new string is returned, with format item {pintItemIndex} replaced\nwith {pintItemIndex,m:N0}, where m = the minimum width required to\ndisplay pintHighestValue using the numeric formatting defined by the\ncurrent Region and Language settings in the Windows Control Panel,\noverriding the decimal places value with a value of zero.\n"
      overload: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String,System.Int32,System.UInt32)
      commentId: M:WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String,System.Int32,System.UInt32)
      language: CSharp
      name:
        CSharp: AdjustItemNumberWidthPerMaxValue(String, Int32, UInt32)
        VB: AdjustItemNumberWidthPerMaxValue(String, Int32, UInt32)
      nameWithType:
        CSharp: FormatItem.AdjustItemNumberWidthPerMaxValue(String, Int32, UInt32)
        VB: FormatItem.AdjustItemNumberWidthPerMaxValue(String, Int32, UInt32)
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String, System.Int32, System.UInt32)
        VB: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String, System.Int32, System.UInt32)
      type: Method
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: AdjustItemNumberWidthPerMaxValue
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 763
      summary: "\nReplace a basic format item of the form &quot;{n}&quot; where &quot;n&quot; is the item\nnumber, with a composite item that right aligns a numeric value in a\nscreen width that will accommodate the maximum value that will be\nsubstituted for it in the current instance.\n"
      example: []
      syntax:
        content:
          CSharp: public static string AdjustItemNumberWidthPerMaxValue(string pstrInputFormatString, int pintItemIndex, uint puintHighestValue)
          VB: Public Shared Function AdjustItemNumberWidthPerMaxValue(pstrInputFormatString As String, pintItemIndex As Integer, puintHighestValue As UInteger) As String
        parameters:
        - id: pstrInputFormatString
          type: System.String
          description: "\nSpecify the format string into which to substitute the composite\nformat item.\n"
        - id: pintItemIndex
          type: System.Int32
          description: "\nSpecify the index number of the item to be replaced. The string must\ncontain a format item &quot;{pintItemIndex}&quot; which is replaced.\n"
        - id: puintHighestValue
          type: System.UInt32
          description: "\nSpecify the highest value that you expect to substitute for format\nitem {pintItemIndex} such as the Count property of an array that\nholds items to be listed.\n"
        return:
          type: System.String
          description: "\nA new string is returned, with format item {pintItemIndex} replaced\nwith {pintItemIndex,m:N0}, where m = the minimum width required to\ndisplay pintHighestValue using the numeric formatting defined by the\ncurrent Region and Language settings in the Windows Control Panel,\noverriding the decimal places value with a value of zero.\n"
      overload: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String,System.UInt32,System.UInt32)
      commentId: M:WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String,System.UInt32,System.UInt32)
      language: CSharp
      name:
        CSharp: AdjustItemNumberWidthPerMaxValue(String, UInt32, UInt32)
        VB: AdjustItemNumberWidthPerMaxValue(String, UInt32, UInt32)
      nameWithType:
        CSharp: FormatItem.AdjustItemNumberWidthPerMaxValue(String, UInt32, UInt32)
        VB: FormatItem.AdjustItemNumberWidthPerMaxValue(String, UInt32, UInt32)
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String, System.UInt32, System.UInt32)
        VB: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String, System.UInt32, System.UInt32)
      type: Method
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: AdjustItemNumberWidthPerMaxValue
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 810
      summary: "\nReplace a basic format item of the form &quot;{n}&quot; where &quot;n&quot; is the item\nnumber, with a composite item that right aligns a numeric value in a\nscreen width that will accommodate the maximum value that will be\nsubstituted for it in the current instance.\n"
      example: []
      syntax:
        content:
          CSharp: public static string AdjustItemNumberWidthPerMaxValue(string pstrInputFormatString, uint puintItemIndex, uint puintHighestValue)
          VB: Public Shared Function AdjustItemNumberWidthPerMaxValue(pstrInputFormatString As String, puintItemIndex As UInteger, puintHighestValue As UInteger) As String
        parameters:
        - id: pstrInputFormatString
          type: System.String
          description: "\nSpecify the format string into which to substitute the composite\nformat item.\n"
        - id: puintItemIndex
          type: System.UInt32
          description: "\nSpecify the index number of the item to be replaced. The string must\ncontain a format item &quot;{pintItemIndex}&quot; which is replaced.\n"
        - id: puintHighestValue
          type: System.UInt32
          description: "\nSpecify the highest value that you expect to substitute for format\nitem {pintItemIndex} such as the Count property of an array that\nholds items to be listed.\n"
        return:
          type: System.String
          description: "\nA new string is returned, with format item {pintItemIndex} replaced\nwith {pintItemIndex,m:N0}, where m = the minimum width required to\ndisplay pintHighestValue using the numeric formatting defined by the\ncurrent Region and Language settings in the Windows Control Panel,\noverriding the decimal places value with a value of zero.\n"
      overload: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String,System.Int32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.Int32,System.String)
      commentId: M:WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String,System.Int32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.Int32,System.String)
      language: CSharp
      name:
        CSharp: AdjustItemNumberWidthPerMaxValue(String, Int32, FormatItem.Alignment, Int32, String)
        VB: AdjustItemNumberWidthPerMaxValue(String, Int32, FormatItem.Alignment, Int32, String)
      nameWithType:
        CSharp: FormatItem.AdjustItemNumberWidthPerMaxValue(String, Int32, FormatItem.Alignment, Int32, String)
        VB: FormatItem.AdjustItemNumberWidthPerMaxValue(String, Int32, FormatItem.Alignment, Int32, String)
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String, System.Int32, WizardWrx.FormatStringEngine.FormatItem.Alignment, System.Int32, System.String)
        VB: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue(System.String, System.Int32, WizardWrx.FormatStringEngine.FormatItem.Alignment, System.Int32, System.String)
      type: Method
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: AdjustItemNumberWidthPerMaxValue
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 864
      summary: "\nReplace a basic format item of the form &quot;{n}&quot; where &quot;n&quot; is the item\nnumber, with a composite item that right aligns a numeric value in a\nscreen width that will accommodate the maximum value that will be\nsubstituted for it in the current instance.\n"
      example: []
      syntax:
        content:
          CSharp: public static string AdjustItemNumberWidthPerMaxValue(string pstrFormat, int pintItemIndex, FormatItem.Alignment penmAlignment, int pintMaximumWidth, string pstrFormatString)
          VB: Public Shared Function AdjustItemNumberWidthPerMaxValue(pstrFormat As String, pintItemIndex As Integer, penmAlignment As FormatItem.Alignment, pintMaximumWidth As Integer, pstrFormatString As String) As String
        parameters:
        - id: pstrFormat
          type: System.String
          description: "\nSpecify a valid format string to upgrade. The string must contain a\ntoken of the form {n}, where n is equal to pintItemIndex.\n"
        - id: pintItemIndex
          type: System.Int32
          description: "\nSpecify the index of the item to be upgraded. The integer must be\npositive, and pstrFormat must contain at least once instance of a\ncorrespondingly numbered format item.\n"
        - id: penmAlignment
          type: WizardWrx.FormatStringEngine.FormatItem.Alignment
          description: "\nSpecify Left or Right. Center alignment is unsupported, although it\ncould be achieved with custom code.\n"
        - id: pintMaximumWidth
          type: System.Int32
          description: "\nThe maximum width is a positive integer that specifies the desired\nwidth of the item.\n"
        - id: pstrFormatString
          type: System.String
          description: "\nSpecify a Standard Numeric, Date, or Text format string or a custom\nstring composed around a standard string.\n"
        return:
          type: System.String
          description: "\nThe return value is a new format control string, with the original\nvanilla format item at the specified index replaced with a new one\nthat has its width adjusted precisely to accommodate the widest\nexpected value.\n"
      overload: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.Int32,System.String)
      commentId: M:WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.Int32,System.String)
      language: CSharp
      name:
        CSharp: UpgradeFormatItem(String, Int32, String)
        VB: UpgradeFormatItem(String, Int32, String)
      nameWithType:
        CSharp: FormatItem.UpgradeFormatItem(String, Int32, String)
        VB: FormatItem.UpgradeFormatItem(String, Int32, String)
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String, System.Int32, System.String)
        VB: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String, System.Int32, System.String)
      type: Method
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: UpgradeFormatItem
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 916
      summary: "\nUpgrade a plain vanilla format item of the form {n}, where n is the\nnumber of a format item that exists somewhere in a format string to\na composite string that specifies a width that is computed at run\ntime to be appropriate to the current data set.\n"
      remarks: "\nThis routine expends a good deal of effort to validate its inputs,\nso that it can be safely used to process user input, such as data\nread into the program from a configuration file.\n"
      example: []
      syntax:
        content:
          CSharp: public static string UpgradeFormatItem(string pstrFormat, int pintItemIndex, string pstrUpgrade)
          VB: Public Shared Function UpgradeFormatItem(pstrFormat As String, pintItemIndex As Integer, pstrUpgrade As String) As String
        parameters:
        - id: pstrFormat
          type: System.String
          description: "\nSpecify a valid format string to upgrade. The string must contain a\ntoken of the form {n}, where n is equal to pintItemIndex.\n"
        - id: pintItemIndex
          type: System.Int32
          description: "\nSpecify the index of the item to be upgraded. The integer must be\npositive, and pstrFormat must contain at least once instance of a\ncorrespondingly numbered format item.\n"
        - id: pstrUpgrade
          type: System.String
          description: "\nSpecify the upgraded format item, such as the string returned by the\nstatic AdjustToMaximumWidth method of this class.\n\nContrast this with pstrFormatString, which expects you to supply a\nstandard or custom Numeric or DateTime format string, from which it\nconstructs a complete, well formed Format Item.\n"
        return:
          type: System.String
          description: "\nIf the function succeeds, the return value is the upgraded format\nstring, in which the indicated plain vanilla format item has been\nreplaced with a dynamically generated composite format item.\n"
      overload: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem*
      see:
      - linkId: WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.UInt32,System.UInt32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String)
        commentId: M:WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.UInt32,System.UInt32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String)
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        ? WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.UInt32,System.UInt32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String)
        : 
    - id: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,System.String)
      commentId: M:WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,System.String)
      language: CSharp
      name:
        CSharp: UpgradeFormatItem(String, UInt32, String)
        VB: UpgradeFormatItem(String, UInt32, String)
      nameWithType:
        CSharp: FormatItem.UpgradeFormatItem(String, UInt32, String)
        VB: FormatItem.UpgradeFormatItem(String, UInt32, String)
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String, System.UInt32, System.String)
        VB: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String, System.UInt32, System.String)
      type: Method
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: UpgradeFormatItem
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 999
      summary: "\nUpgrade a plain vanilla format item of the form {n}, where n is the\nnumber of a format item that exists somewhere in a format string to\na composite string that specifies a width that is computed at run\ntime to be appropriate to the current data set.\n"
      remarks: "\nThis routine expends a good deal of effort to validate its inputs,\nso that it can be safely used to process user input, such as data\nread into the program from a configuration file.\n"
      example: []
      syntax:
        content:
          CSharp: public static string UpgradeFormatItem(string pstrFormat, uint puintItemIndex, string pstrUpgrade)
          VB: Public Shared Function UpgradeFormatItem(pstrFormat As String, puintItemIndex As UInteger, pstrUpgrade As String) As String
        parameters:
        - id: pstrFormat
          type: System.String
          description: "\nSpecify a valid format string to upgrade. The string must contain a\ntoken of the form {n}, where n is equal to puintItemIndex.\n"
        - id: puintItemIndex
          type: System.UInt32
          description: "\nSpecify the index of the item to be upgraded. The integer must be\npositive, and pstrFormat must contain at least once instance of a\ncorrespondingly numbered format item.\n"
        - id: pstrUpgrade
          type: System.String
          description: "\nSpecify the upgraded format item, such as the string returned by the\nstatic AdjustToMaximumWidth method of this class.\n\nContrast this with pstrFormatString, which expects you to supply a\nstandard or custom Numeric or DateTime format string, from which it\nconstructs a complete, well formed Format Item.\n"
        return:
          type: System.String
          description: "\nIf the function succeeds, the return value is the upgraded format\nstring, in which the indicated plain vanilla format item has been\nreplaced with a dynamically generated composite format item.\n"
      overload: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem*
      see:
      - linkId: WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.UInt32,System.UInt32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String)
        commentId: M:WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.UInt32,System.UInt32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String)
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        ? WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.UInt32,System.UInt32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String)
        : 
    - id: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.Int32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String,System.String[])
      commentId: M:WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.Int32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String,System.String[])
      language: CSharp
      name:
        CSharp: UpgradeFormatItem(String, Int32, FormatItem.Alignment, String, String[])
        VB: UpgradeFormatItem(String, Int32, FormatItem.Alignment, String, String())
      nameWithType:
        CSharp: FormatItem.UpgradeFormatItem(String, Int32, FormatItem.Alignment, String, String[])
        VB: FormatItem.UpgradeFormatItem(String, Int32, FormatItem.Alignment, String, String())
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String, System.Int32, WizardWrx.FormatStringEngine.FormatItem.Alignment, System.String, System.String[])
        VB: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String, System.Int32, WizardWrx.FormatStringEngine.FormatItem.Alignment, System.String, System.String())
      type: Method
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: UpgradeFormatItem
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 1084
      summary: "\nUpgrade a plain vanilla format item of the form {n}, where n is the\nnumber of a format item that exists somewhere in a format string to\na composite string that specifies a width that is computed at run\ntime to be appropriate to the current data set.\n"
      example: []
      syntax:
        content:
          CSharp: public static string UpgradeFormatItem(string pstrFormat, int pintItemIndex, FormatItem.Alignment penmAlignment, string pstrFormatString, string[] pastrValueArray)
          VB: Public Shared Function UpgradeFormatItem(pstrFormat As String, pintItemIndex As Integer, penmAlignment As FormatItem.Alignment, pstrFormatString As String, pastrValueArray As String()) As String
        parameters:
        - id: pstrFormat
          type: System.String
          description: "\nSpecify a valid format string to upgrade. The string must contain a\ntoken of the form {n}, where n is equal to pintItemIndex.\n"
        - id: pintItemIndex
          type: System.Int32
          description: "\nSpecify the index of the item to be upgraded. The integer must be\npositive, and pstrFormat must contain at least once instance of a\ncorrespondingly numbered format item.\n"
        - id: penmAlignment
          type: WizardWrx.FormatStringEngine.FormatItem.Alignment
          description: "\nSpecify Left or Right. Center alignment is unsupported, although it\ncould be achieved with custom code.\n"
        - id: pstrFormatString
          type: System.String
          description: "\nSpecify a standard or custom Numeric or DateTime format string.\n\nContrast this with pstrUpgrade, which expects you to supply the\nentire format item, ready for substitution.\n"
        - id: pastrValueArray
          type: System.String[]
          description: "\nSpecify an array of strings, all of which are values intended to be\nformatted by the upgraded format item. This routine determines the\nlength of the longest string, which becomes the basis of the\nalignment parameter inserted into the upgraded format item.\n"
        return:
          type: System.String
          description: "\nIf the function succeeds, the return value is the upgraded format\nstring, in which the indicated plain vanilla format item has been\nreplaced with a dynamically generated composite format item.\n"
      overload: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String,System.Collections.Generic.List{System.String})
      commentId: M:WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String,System.Collections.Generic.List{System.String})
      language: CSharp
      name:
        CSharp: UpgradeFormatItem(String, UInt32, FormatItem.Alignment, String, List<String>)
        VB: UpgradeFormatItem(String, UInt32, FormatItem.Alignment, String, List(Of String))
      nameWithType:
        CSharp: FormatItem.UpgradeFormatItem(String, UInt32, FormatItem.Alignment, String, List<String>)
        VB: FormatItem.UpgradeFormatItem(String, UInt32, FormatItem.Alignment, String, List(Of String))
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String, System.UInt32, WizardWrx.FormatStringEngine.FormatItem.Alignment, System.String, System.Collections.Generic.List<System.String>)
        VB: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String, System.UInt32, WizardWrx.FormatStringEngine.FormatItem.Alignment, System.String, System.Collections.Generic.List(Of System.String))
      type: Method
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: UpgradeFormatItem
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 1139
      summary: "\nUpgrade a plain vanilla format item of the form {n}, where n is the\nnumber of a format item that exists somewhere in a format string to\na composite string that specifies a width that is computed at run\ntime to be appropriate to the current data set.\n"
      example: []
      syntax:
        content:
          CSharp: public static string UpgradeFormatItem(string pstrFormat, uint puintItemIndex, FormatItem.Alignment penmAlignment, string pstrFormatString, List<string> pastrValueArray)
          VB: Public Shared Function UpgradeFormatItem(pstrFormat As String, puintItemIndex As UInteger, penmAlignment As FormatItem.Alignment, pstrFormatString As String, pastrValueArray As List(Of String)) As String
        parameters:
        - id: pstrFormat
          type: System.String
          description: "\nSpecify a valid format string to upgrade. The string must contain a\ntoken of the form {n}, where n is equal to pintItemIndex.\n"
        - id: puintItemIndex
          type: System.UInt32
          description: "\nSpecify the index of the item to be upgraded. The integer must be\npositive, and pstrFormat must contain at least once instance of a\ncorrespondingly numbered format item.\n"
        - id: penmAlignment
          type: WizardWrx.FormatStringEngine.FormatItem.Alignment
          description: "\nSpecify Left or Right. Center alignment is unsupported, although it\ncould be achieved with custom code.\n"
        - id: pstrFormatString
          type: System.String
          description: "\nSpecify a standard or custom Numeric or DateTime format string.\n\nContrast this with pstrUpgrade, which expects you to supply the\nentire format item, ready for substitution.\n"
        - id: pastrValueArray
          type: System.Collections.Generic.List{System.String}
          description: "\nSpecify an array of strings, all of which are values intended to be\nformatted by the upgraded format item. This routine determines the\nlength of the longest string, which becomes the basis of the\nalignment parameter inserted into the upgraded format item.\n"
        return:
          type: System.String
          description: "\nIf the function succeeds, the return value is the upgraded format\nstring, in which the indicated plain vanilla format item has been\nreplaced with a dynamically generated composite format item.\n"
      overload: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.FormatStringEngine.FormatItem.XofY(System.UInt32,System.UInt32)
      commentId: M:WizardWrx.FormatStringEngine.FormatItem.XofY(System.UInt32,System.UInt32)
      language: CSharp
      name:
        CSharp: XofY(UInt32, UInt32)
        VB: XofY(UInt32, UInt32)
      nameWithType:
        CSharp: FormatItem.XofY(UInt32, UInt32)
        VB: FormatItem.XofY(UInt32, UInt32)
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.XofY(System.UInt32, System.UInt32)
        VB: WizardWrx.FormatStringEngine.FormatItem.XofY(System.UInt32, System.UInt32)
      type: Method
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: XofY
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 1178
      summary: "\nGiven two integral values X and Y, where X is less than or equal to\nY, return a string of the form &quot;X of Y&quot; for use on a report.\n"
      example: []
      syntax:
        content:
          CSharp: public static string XofY(uint puintX, uint puintY)
          VB: Public Shared Function XofY(puintX As UInteger, puintY As UInteger) As String
        parameters:
        - id: puintX
          type: System.UInt32
          description: "\nX is the ordinal number of the item in the list, expressed as an\nunsigned integer.\n"
        - id: puintY
          type: System.UInt32
          description: "\nY is the total number of items in the list, expressed as an unsigned\ninteger.\n"
        return:
          type: System.String
          description: "\nThe returned string is literally &quot;X of Y,&quot; where X and Y are the two\nintegers representing, respectively, the current item number and the\ntotal number of items in the set. The formatting of X and Y is such\nthat a list is guaranteed to be vertically aligned, because X is set\nin a right aligned field whose width is the same as that of a string\nrepresentation of Y.\n"
      overload: WizardWrx.FormatStringEngine.FormatItem.XofY*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.FormatStringEngine.FormatItem.XofY(System.Int32,System.UInt32)
      commentId: M:WizardWrx.FormatStringEngine.FormatItem.XofY(System.Int32,System.UInt32)
      language: CSharp
      name:
        CSharp: XofY(Int32, UInt32)
        VB: XofY(Int32, UInt32)
      nameWithType:
        CSharp: FormatItem.XofY(Int32, UInt32)
        VB: FormatItem.XofY(Int32, UInt32)
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.XofY(System.Int32, System.UInt32)
        VB: WizardWrx.FormatStringEngine.FormatItem.XofY(System.Int32, System.UInt32)
      type: Method
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: XofY
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 1212
      summary: "\nGiven two integral values X and Y, where X is less than or equal to\nY, return a string of the form &quot;X of Y&quot; for use on a report.\n"
      example: []
      syntax:
        content:
          CSharp: public static string XofY(int pintX, uint puintY)
          VB: Public Shared Function XofY(pintX As Integer, puintY As UInteger) As String
        parameters:
        - id: pintX
          type: System.Int32
          description: "\nX is the ordinal number of the item in the list, expressed as a\nsigned integer.\n"
        - id: puintY
          type: System.UInt32
          description: "\nY is the total number of items in the list, expressed as an unsigned\ninteger.\n"
        return:
          type: System.String
          description: "\nThe returned string is literally &quot;X of Y,&quot; where X and Y are the two\nintegers representing, respectively, the current item number and the\ntotal number of items in the set. The formatting of X and Y is such\nthat a list is guaranteed to be vertically aligned, because X is set\nin a right aligned field whose width is the same as that of a string\nrepresentation of Y.\n"
      overload: WizardWrx.FormatStringEngine.FormatItem.XofY*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.FormatStringEngine.FormatItem.XofY(System.UInt32,System.Int32)
      commentId: M:WizardWrx.FormatStringEngine.FormatItem.XofY(System.UInt32,System.Int32)
      language: CSharp
      name:
        CSharp: XofY(UInt32, Int32)
        VB: XofY(UInt32, Int32)
      nameWithType:
        CSharp: FormatItem.XofY(UInt32, Int32)
        VB: FormatItem.XofY(UInt32, Int32)
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.XofY(System.UInt32, System.Int32)
        VB: WizardWrx.FormatStringEngine.FormatItem.XofY(System.UInt32, System.Int32)
      type: Method
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: XofY
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 1246
      summary: "\nGiven two integral values X and Y, where X is less than or equal to\nY, return a string of the form &quot;X of Y&quot; for use on a report.\n"
      example: []
      syntax:
        content:
          CSharp: public static string XofY(uint puintX, int pintY)
          VB: Public Shared Function XofY(puintX As UInteger, pintY As Integer) As String
        parameters:
        - id: puintX
          type: System.UInt32
          description: "\nX is the ordinal number of the item in the list, expressed as an\nunsigned integer.\n"
        - id: pintY
          type: System.Int32
          description: "\nY is the total number of items in the list, expressed as a signed\ninteger.\n"
        return:
          type: System.String
          description: "\nThe returned string is literally &quot;X of Y,&quot; where X and Y are the two\nintegers representing, respectively, the current item number and the\ntotal number of items in the set. The formatting of X and Y is such\nthat a list is guaranteed to be vertically aligned, because X is set\nin a right aligned field whose width is the same as that of a string\nrepresentation of Y.\n"
      overload: WizardWrx.FormatStringEngine.FormatItem.XofY*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.FormatStringEngine.FormatItem.XofY(System.Int32,System.Int32)
      commentId: M:WizardWrx.FormatStringEngine.FormatItem.XofY(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: XofY(Int32, Int32)
        VB: XofY(Int32, Int32)
      nameWithType:
        CSharp: FormatItem.XofY(Int32, Int32)
        VB: FormatItem.XofY(Int32, Int32)
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.XofY(System.Int32, System.Int32)
        VB: WizardWrx.FormatStringEngine.FormatItem.XofY(System.Int32, System.Int32)
      type: Method
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: XofY
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 1280
      summary: "\nGiven two integral values X and Y, where X is less than or equal to\nY, return a string of the form &quot;X of Y&quot; for use on a report.\n"
      example: []
      syntax:
        content:
          CSharp: public static string XofY(int pintX, int pintY)
          VB: Public Shared Function XofY(pintX As Integer, pintY As Integer) As String
        parameters:
        - id: pintX
          type: System.Int32
          description: "\nX is the ordinal number of the item in the list, expressed as a\nsigned integer.\n"
        - id: pintY
          type: System.Int32
          description: "\nY is the total number of items in the list, expressed as a signed\ninteger.\n"
        return:
          type: System.String
          description: "\nThe returned string is literally &quot;X of Y,&quot; where X and Y are the two\nintegers representing, respectively, the current item number and the\ntotal number of items in the set. The formatting of X and Y is such\nthat a list is guaranteed to be vertically aligned, because X is set\nin a right aligned field whose width is the same as that of a string\nrepresentation of Y.\n"
      overload: WizardWrx.FormatStringEngine.FormatItem.XofY*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.FormatStringEngine.FormatItem.IntegerPerRegSettings
      commentId: M:WizardWrx.FormatStringEngine.FormatItem.IntegerPerRegSettings
      language: CSharp
      name:
        CSharp: IntegerPerRegSettings()
        VB: IntegerPerRegSettings()
      nameWithType:
        CSharp: FormatItem.IntegerPerRegSettings()
        VB: FormatItem.IntegerPerRegSettings()
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.IntegerPerRegSettings()
        VB: WizardWrx.FormatStringEngine.FormatItem.IntegerPerRegSettings()
      type: Method
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: IntegerPerRegSettings
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 1570
      summary: "\nReturn a string suitable for formatting an integer per the Regional\nSettings, overriding the default number of digits to display to the\nright of the decimal point to display zero digits to the right of\nthe decimal point.\n"
      example: []
      syntax:
        content:
          CSharp: public static string IntegerPerRegSettings()
          VB: Public Shared Function IntegerPerRegSettings As String
        return:
          type: System.String
          description: "\nFormat string suitable for formatting an integer\n"
      overload: WizardWrx.FormatStringEngine.FormatItem.IntegerPerRegSettings*
      see:
      - linkType: HRef
        linkId: https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#NFormatString
        altText: https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#NFormatString
      - linkId: WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS
        commentId: F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS
      seealso:
      - linkType: HRef
        linkId: https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx
        altText: https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx
      - linkId: WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_0D
        commentId: F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_0D
      - linkId: WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_2D
        commentId: F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_2D
      - linkId: WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_3D
        commentId: F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_3D
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS: 
        WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_0D: 
        WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_2D: 
        WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_3D: 
  - id: WizardWrx.FormatStringEngine.FormatItem.Alignment
    commentId: T:WizardWrx.FormatStringEngine.FormatItem.Alignment
    language: CSharp
    name:
      CSharp: FormatItem.Alignment
      VB: FormatItem.Alignment
    nameWithType:
      CSharp: FormatItem.Alignment
      VB: FormatItem.Alignment
    qualifiedName:
      CSharp: WizardWrx.FormatStringEngine.FormatItem.Alignment
      VB: WizardWrx.FormatStringEngine.FormatItem.Alignment
    type: Enum
    assemblies:
    - WizardWrx.FormatStringEngine
    namespace: WizardWrx.FormatStringEngine
    source:
      id: Alignment
      path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
      startLine: 149
    summary: "\nIf specified, the Width property supports two alignments, Left and\nRight.\n"
    example: []
    syntax:
      content:
        CSharp: public enum Alignment
        VB: Public Enum Alignment
    extensionMethods:
    - WizardWrx.FormatStringEngine.FormatItem.Alignment.WizardWrx.StringExtensions.RenderEvenWhenNull``1(System.String,System.String,System.IFormatProvider)
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: WizardWrx.FormatStringEngine.FormatItem.Alignment.Unspecified
      commentId: F:WizardWrx.FormatStringEngine.FormatItem.Alignment.Unspecified
      language: CSharp
      name:
        CSharp: Unspecified
        VB: Unspecified
      nameWithType:
        CSharp: FormatItem.Alignment.Unspecified
        VB: FormatItem.Alignment.Unspecified
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.Alignment.Unspecified
        VB: WizardWrx.FormatStringEngine.FormatItem.Alignment.Unspecified
      type: Field
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: Unspecified
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 156
      summary: "\nUnless the item has an Alignment, this property is unspecified,\nand algnment is moot, since no extra characters are reserved for\npadding.\n"
      example: []
      syntax:
        content:
          CSharp: Unspecified = 0
          VB: Unspecified = 0
        return:
          type: WizardWrx.FormatStringEngine.FormatItem.Alignment
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.FormatStringEngine.FormatItem.Alignment.Left
      commentId: F:WizardWrx.FormatStringEngine.FormatItem.Alignment.Left
      language: CSharp
      name:
        CSharp: Left
        VB: Left
      nameWithType:
        CSharp: FormatItem.Alignment.Left
        VB: FormatItem.Alignment.Left
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.Alignment.Left
        VB: WizardWrx.FormatStringEngine.FormatItem.Alignment.Left
      type: Field
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: Left
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 161
      summary: "\nLeft align the text within the alloted width.\n"
      example: []
      syntax:
        content:
          CSharp: Left = 1
          VB: Left = 1
        return:
          type: WizardWrx.FormatStringEngine.FormatItem.Alignment
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.FormatStringEngine.FormatItem.Alignment.Right
      commentId: F:WizardWrx.FormatStringEngine.FormatItem.Alignment.Right
      language: CSharp
      name:
        CSharp: Right
        VB: Right
      nameWithType:
        CSharp: FormatItem.Alignment.Right
        VB: FormatItem.Alignment.Right
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatItem.Alignment.Right
        VB: WizardWrx.FormatStringEngine.FormatItem.Alignment.Right
      type: Field
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: Right
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItem.cs
        startLine: 168
      summary: "\nRight align the text within the alloted width.\n\nIf the item has an Alignment, its default is right.\n"
      example: []
      syntax:
        content:
          CSharp: Right = 2
          VB: Right = 2
        return:
          type: WizardWrx.FormatStringEngine.FormatItem.Alignment
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: WizardWrx.FormatStringEngine.FormatItemsCollection
    commentId: T:WizardWrx.FormatStringEngine.FormatItemsCollection
    language: CSharp
    name:
      CSharp: FormatItemsCollection
      VB: FormatItemsCollection
    nameWithType:
      CSharp: FormatItemsCollection
      VB: FormatItemsCollection
    qualifiedName:
      CSharp: WizardWrx.FormatStringEngine.FormatItemsCollection
      VB: WizardWrx.FormatStringEngine.FormatItemsCollection
    type: Class
    assemblies:
    - WizardWrx.FormatStringEngine
    namespace: WizardWrx.FormatStringEngine
    source:
      id: FormatItemsCollection
      path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatItemsCollection.cs
      startLine: 114
    summary: "\nThis generic List derivative holds the collection of FormatItems found\nin a FormatString.\n\nWhile the class, itself, is marked Public, everything else about it is\nmarked as Internal, so that only instances of classes defined in this\nassembly can create a collection or add items to it, while instances of\nthe FormatStringParser class expose it as a read only property.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class FormatItemsCollection : List<FormatItem>, IList<FormatItem>, ICollection<FormatItem>, IEnumerable<FormatItem>, IList, ICollection, IEnumerable'
        VB: >-
          Public Class FormatItemsCollection

              Inherits List(Of FormatItem)

              Implements IList(Of FormatItem), ICollection(Of FormatItem), IEnumerable(Of FormatItem), IList, ICollection, IEnumerable
    inheritance:
    - System.Object
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    implements:
    - System.Collections.Generic.IList{WizardWrx.FormatStringEngine.FormatItem}
    - System.Collections.Generic.ICollection{WizardWrx.FormatStringEngine.FormatItem}
    - System.Collections.Generic.IEnumerable{WizardWrx.FormatStringEngine.FormatItem}
    - System.Collections.IList
    - System.Collections.ICollection
    - System.Collections.IEnumerable
    inheritedMembers:
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#get_Item(System.Int32)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#set_Item(System.Int32,System.Object)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Add(WizardWrx.FormatStringEngine.FormatItem)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#Add(System.Object)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.AddRange(System.Collections.Generic.IEnumerable{WizardWrx.FormatStringEngine.FormatItem})
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.AsReadOnly
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.BinarySearch(System.Int32,System.Int32,WizardWrx.FormatStringEngine.FormatItem,System.Collections.Generic.IComparer{WizardWrx.FormatStringEngine.FormatItem})
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.BinarySearch(WizardWrx.FormatStringEngine.FormatItem)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.BinarySearch(WizardWrx.FormatStringEngine.FormatItem,System.Collections.Generic.IComparer{WizardWrx.FormatStringEngine.FormatItem})
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Clear
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Contains(WizardWrx.FormatStringEngine.FormatItem)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#Contains(System.Object)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.ConvertAll``1(System.Converter{WizardWrx.FormatStringEngine.FormatItem,{TOutput}})
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.CopyTo(WizardWrx.FormatStringEngine.FormatItem[])
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.CopyTo(System.Int32,WizardWrx.FormatStringEngine.FormatItem[],System.Int32,System.Int32)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.CopyTo(WizardWrx.FormatStringEngine.FormatItem[],System.Int32)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Exists(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Find(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindAll(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindIndex(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindIndex(System.Int32,System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindIndex(System.Int32,System.Int32,System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindLast(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindLastIndex(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindLastIndex(System.Int32,System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindLastIndex(System.Int32,System.Int32,System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.ForEach(System.Action{WizardWrx.FormatStringEngine.FormatItem})
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.GetEnumerator
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IEnumerable#GetEnumerator
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.GetRange(System.Int32,System.Int32)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.IndexOf(WizardWrx.FormatStringEngine.FormatItem)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#IndexOf(System.Object)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.IndexOf(WizardWrx.FormatStringEngine.FormatItem,System.Int32)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.IndexOf(WizardWrx.FormatStringEngine.FormatItem,System.Int32,System.Int32)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Insert(System.Int32,WizardWrx.FormatStringEngine.FormatItem)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#Insert(System.Int32,System.Object)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{WizardWrx.FormatStringEngine.FormatItem})
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.LastIndexOf(WizardWrx.FormatStringEngine.FormatItem)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.LastIndexOf(WizardWrx.FormatStringEngine.FormatItem,System.Int32)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.LastIndexOf(WizardWrx.FormatStringEngine.FormatItem,System.Int32,System.Int32)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Remove(WizardWrx.FormatStringEngine.FormatItem)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#Remove(System.Object)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.RemoveAll(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.RemoveAt(System.Int32)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.RemoveRange(System.Int32,System.Int32)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Reverse
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Reverse(System.Int32,System.Int32)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Sort
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Sort(System.Collections.Generic.IComparer{WizardWrx.FormatStringEngine.FormatItem})
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{WizardWrx.FormatStringEngine.FormatItem})
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Sort(System.Comparison{WizardWrx.FormatStringEngine.FormatItem})
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.ToArray
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.TrimExcess
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.TrueForAll(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Capacity
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Count
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#IsFixedSize
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#Generic#ICollection{T}#IsReadOnly
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#IsReadOnly
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#ICollection#IsSynchronized
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#ICollection#SyncRoot
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Item(System.Int32)
    - System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#Item(System.Int32)
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: WizardWrx.FormatStringEngine.FormatStringError
    commentId: T:WizardWrx.FormatStringEngine.FormatStringError
    language: CSharp
    name:
      CSharp: FormatStringError
      VB: FormatStringError
    nameWithType:
      CSharp: FormatStringError
      VB: FormatStringError
    qualifiedName:
      CSharp: WizardWrx.FormatStringEngine.FormatStringError
      VB: WizardWrx.FormatStringEngine.FormatStringError
    type: Class
    assemblies:
    - WizardWrx.FormatStringEngine
    namespace: WizardWrx.FormatStringEngine
    source:
      id: FormatStringError
      path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringError.cs
      startLine: 108
    summary: "\nThe FormatStringParser exposes a List of these objects if errors exist\nin its current format string.\n"
    remarks: "\nThe only property that has any use outside the defining assembly is the\nstring representation, which returns the properties in a well formed CSV\nstring.\n\nLikewise, only other classes defined in the same assembly are allowed to\ncreate instances of this object, which are immutable.\n"
    example: []
    syntax:
      content:
        CSharp: public class FormatStringError
        VB: Public Class FormatStringError
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: WizardWrx.FormatStringEngine.FormatStringError.FIELD_DELIMITER
      commentId: F:WizardWrx.FormatStringEngine.FormatStringError.FIELD_DELIMITER
      language: CSharp
      name:
        CSharp: FIELD_DELIMITER
        VB: FIELD_DELIMITER
      nameWithType:
        CSharp: FormatStringError.FIELD_DELIMITER
        VB: FormatStringError.FIELD_DELIMITER
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatStringError.FIELD_DELIMITER
        VB: WizardWrx.FormatStringEngine.FormatStringError.FIELD_DELIMITER
      type: Field
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: FIELD_DELIMITER
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringError.cs
        startLine: 139
      summary: "\nThis constant is the field delimiter.\n"
      example: []
      syntax:
        content:
          CSharp: public const char FIELD_DELIMITER = ','
          VB: Public Const FIELD_DELIMITER As Char = ","c
        return:
          type: System.Char
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.FormatStringEngine.FormatStringError.COMMA_GUARD
      commentId: F:WizardWrx.FormatStringEngine.FormatStringError.COMMA_GUARD
      language: CSharp
      name:
        CSharp: COMMA_GUARD
        VB: COMMA_GUARD
      nameWithType:
        CSharp: FormatStringError.COMMA_GUARD
        VB: FormatStringError.COMMA_GUARD
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatStringError.COMMA_GUARD
        VB: WizardWrx.FormatStringEngine.FormatStringError.COMMA_GUARD
      type: Field
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: COMMA_GUARD
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringError.cs
        startLine: 147
      summary: "\nSince some strings necessarily contain embedded commas, such commas\nmust be protected. This is accomplished by enclosing the affected\nstring in double quotation marks before it is appended.\n"
      example: []
      syntax:
        content:
          CSharp: public const char COMMA_GUARD = '"'
          VB: Public Const COMMA_GUARD As Char = """"c
        return:
          type: System.Char
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.FormatStringEngine.FormatStringError.LABEL_VALUE_DELIMITER
      commentId: F:WizardWrx.FormatStringEngine.FormatStringError.LABEL_VALUE_DELIMITER
      language: CSharp
      name:
        CSharp: LABEL_VALUE_DELIMITER
        VB: LABEL_VALUE_DELIMITER
      nameWithType:
        CSharp: FormatStringError.LABEL_VALUE_DELIMITER
        VB: FormatStringError.LABEL_VALUE_DELIMITER
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatStringError.LABEL_VALUE_DELIMITER
        VB: WizardWrx.FormatStringEngine.FormatStringError.LABEL_VALUE_DELIMITER
      type: Field
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: LABEL_VALUE_DELIMITER
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringError.cs
        startLine: 153
      summary: "\nThis constant delimits the field label from its value.\n"
      example: []
      syntax:
        content:
          CSharp: public const char LABEL_VALUE_DELIMITER = '='
          VB: Public Const LABEL_VALUE_DELIMITER As Char = "="c
        return:
          type: System.Char
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.FormatStringEngine.FormatStringError.Split
      commentId: M:WizardWrx.FormatStringEngine.FormatStringError.Split
      language: CSharp
      name:
        CSharp: Split()
        VB: Split()
      nameWithType:
        CSharp: FormatStringError.Split()
        VB: FormatStringError.Split()
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatStringError.Split()
        VB: WizardWrx.FormatStringEngine.FormatStringError.Split()
      type: Method
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: Split
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringError.cs
        startLine: 182
      summary: "\nSplit the message into an array of parts, each containing a property\nvalue and its label.\n\nPlease see the remarks.\n"
      remarks: "\nThis function is provided to facilitate correctly splitting a string,\nreturned by the ToString method on an instance, into fields, each of\nwhich is a name/value pair that can be further subdivided, using the\nbuilt-in string.Split method, along with LABEL_VALUE_DELIMITER, the\ncorrect delimiter to use with string.Split.\n\nUnder the covers, Split passes the string returned by a call to the\ninstance ToString method to the static WizardWrx.AnyCSV.Parser.Parse\nmethod, which does most of the work.\n\nIMPORTANT: Since the new version of WizardWrx.AnyCSV.dll has a COM\ninterface, it had to target the x86 platform. This can eventually be\ncorrected by building a parallel version that isn&apos;t exposed to COM.\n"
      example: []
      syntax:
        content:
          CSharp: public string[] Split()
          VB: Public Function Split As String()
        return:
          type: System.String[]
          description: "\nThe return value is an array of strings.\n\nPlease see the remarks for essential information about this string.\n"
      overload: WizardWrx.FormatStringEngine.FormatStringError.Split*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.FormatStringEngine.FormatStringError.ToString
      commentId: M:WizardWrx.FormatStringEngine.FormatStringError.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: FormatStringError.ToString()
        VB: FormatStringError.ToString()
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatStringError.ToString()
        VB: WizardWrx.FormatStringEngine.FormatStringError.ToString()
      type: Method
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: ToString
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringError.cs
        startLine: 207
      summary: "\nFormat the properties into a comma-delimited string, which may be\nused as is or processed by the Split method on this instance.\n\nPlease see the remarks for essential information about this string.\n"
      remarks: "\nThe standard string.Split method cannot split this string correctly,\nbecause it treats commas embedded in its strings as delimiters, thus\nsplitting the string into too many pieces, and at the wrong places.\n\nUse the Split method on this instance, which employs a robust CSV\nparsing engine that splits it correctly.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: "\nPlease see the remarks for essential information about this string.\n"
      overload: WizardWrx.FormatStringEngine.FormatStringError.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: WizardWrx.FormatStringEngine.FormatStringParser
    commentId: T:WizardWrx.FormatStringEngine.FormatStringParser
    language: CSharp
    name:
      CSharp: FormatStringParser
      VB: FormatStringParser
    nameWithType:
      CSharp: FormatStringParser
      VB: FormatStringParser
    qualifiedName:
      CSharp: WizardWrx.FormatStringEngine.FormatStringParser
      VB: WizardWrx.FormatStringEngine.FormatStringParser
    type: Class
    assemblies:
    - WizardWrx.FormatStringEngine
    namespace: WizardWrx.FormatStringEngine
    source:
      id: FormatStringParser
      path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringParser.cs
      startLine: 94
    summary: "\nUse this class to parse format control strings that you intend to use\nwith string.Format or one of the Write or WriteLine methods of a stream\nobject, such as a Console or TextWriter. Properties and methods report\non its attributes, including its FormaItems, and errors flagged by the\nparser.\n"
    example: []
    syntax:
      content:
        CSharp: public class FormatStringParser
        VB: Public Class FormatStringParser
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: WizardWrx.FormatStringEngine.FormatStringParser.ESCAPED_ITEM_BEGIN
      commentId: F:WizardWrx.FormatStringEngine.FormatStringParser.ESCAPED_ITEM_BEGIN
      language: CSharp
      name:
        CSharp: ESCAPED_ITEM_BEGIN
        VB: ESCAPED_ITEM_BEGIN
      nameWithType:
        CSharp: FormatStringParser.ESCAPED_ITEM_BEGIN
        VB: FormatStringParser.ESCAPED_ITEM_BEGIN
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatStringParser.ESCAPED_ITEM_BEGIN
        VB: WizardWrx.FormatStringEngine.FormatStringParser.ESCAPED_ITEM_BEGIN
      type: Field
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: ESCAPED_ITEM_BEGIN
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringParser.cs
        startLine: 103
      summary: "\nTo include a literal opening brace (that is, one that you want to\nappear in the completed string), it must be escaped, which is\naccomplished by including a pair of them where you want one to\nappear.\n"
      example: []
      syntax:
        content:
          CSharp: public const string ESCAPED_ITEM_BEGIN = "{{"
          VB: Public Const ESCAPED_ITEM_BEGIN As String = "{{"
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.FormatStringEngine.FormatStringParser.ESCAPED_ITEM_END
      commentId: F:WizardWrx.FormatStringEngine.FormatStringParser.ESCAPED_ITEM_END
      language: CSharp
      name:
        CSharp: ESCAPED_ITEM_END
        VB: ESCAPED_ITEM_END
      nameWithType:
        CSharp: FormatStringParser.ESCAPED_ITEM_END
        VB: FormatStringParser.ESCAPED_ITEM_END
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatStringParser.ESCAPED_ITEM_END
        VB: WizardWrx.FormatStringEngine.FormatStringParser.ESCAPED_ITEM_END
      type: Field
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: ESCAPED_ITEM_END
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringParser.cs
        startLine: 112
      summary: "\nTo include a literal closing brace (that is, one that you want to\nappear in the completed string), it must be escaped, which is\naccomplished by including a pair of them where you want one to\nappear.\n"
      example: []
      syntax:
        content:
          CSharp: public const string ESCAPED_ITEM_END = "}}"
          VB: Public Const ESCAPED_ITEM_END As String = "}}"
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.FormatStringEngine.FormatStringParser.ITEM_BEGIN
      commentId: F:WizardWrx.FormatStringEngine.FormatStringParser.ITEM_BEGIN
      language: CSharp
      name:
        CSharp: ITEM_BEGIN
        VB: ITEM_BEGIN
      nameWithType:
        CSharp: FormatStringParser.ITEM_BEGIN
        VB: FormatStringParser.ITEM_BEGIN
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatStringParser.ITEM_BEGIN
        VB: WizardWrx.FormatStringEngine.FormatStringParser.ITEM_BEGIN
      type: Field
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: ITEM_BEGIN
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringParser.cs
        startLine: 124
      summary: "\nOne left French brace is assumed to be the beginning of a new format\nitem.\n"
      remarks: "\nTo disable this interpretation, and have the left French brace\nappear in the output, use a ESCAPED_ITEM_BEGIN string.\n"
      example: []
      syntax:
        content:
          CSharp: public const char ITEM_BEGIN = '{'
          VB: Public Const ITEM_BEGIN As Char = "{"c
        return:
          type: System.Char
      see:
      - linkId: WizardWrx.FormatStringEngine.FormatStringParser.ESCAPED_ITEM_BEGIN
        commentId: F:WizardWrx.FormatStringEngine.FormatStringParser.ESCAPED_ITEM_BEGIN
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
      references:
        WizardWrx.FormatStringEngine.FormatStringParser.ESCAPED_ITEM_BEGIN: 
    - id: WizardWrx.FormatStringEngine.FormatStringParser.ITEM_END
      commentId: F:WizardWrx.FormatStringEngine.FormatStringParser.ITEM_END
      language: CSharp
      name:
        CSharp: ITEM_END
        VB: ITEM_END
      nameWithType:
        CSharp: FormatStringParser.ITEM_END
        VB: FormatStringParser.ITEM_END
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatStringParser.ITEM_END
        VB: WizardWrx.FormatStringEngine.FormatStringParser.ITEM_END
      type: Field
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: ITEM_END
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringParser.cs
        startLine: 135
      summary: "\nOne right French brace is assumed to be the end of the format item.\n"
      remarks: "\nTo disable this interpretation, and have the right French brace\nappear in the output, use a ESCAPED_ITEM_END string.\n"
      example: []
      syntax:
        content:
          CSharp: public const char ITEM_END = '}'
          VB: Public Const ITEM_END As Char = "}"c
        return:
          type: System.Char
      see:
      - linkId: WizardWrx.FormatStringEngine.FormatStringParser.ESCAPED_ITEM_END
        commentId: F:WizardWrx.FormatStringEngine.FormatStringParser.ESCAPED_ITEM_END
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
      references:
        WizardWrx.FormatStringEngine.FormatStringParser.ESCAPED_ITEM_END: 
    - id: WizardWrx.FormatStringEngine.FormatStringParser.ITEM_HAS_ALIGNMENT_ATTRIBUTE
      commentId: F:WizardWrx.FormatStringEngine.FormatStringParser.ITEM_HAS_ALIGNMENT_ATTRIBUTE
      language: CSharp
      name:
        CSharp: ITEM_HAS_ALIGNMENT_ATTRIBUTE
        VB: ITEM_HAS_ALIGNMENT_ATTRIBUTE
      nameWithType:
        CSharp: FormatStringParser.ITEM_HAS_ALIGNMENT_ATTRIBUTE
        VB: FormatStringParser.ITEM_HAS_ALIGNMENT_ATTRIBUTE
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatStringParser.ITEM_HAS_ALIGNMENT_ATTRIBUTE
        VB: WizardWrx.FormatStringEngine.FormatStringParser.ITEM_HAS_ALIGNMENT_ATTRIBUTE
      type: Field
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: ITEM_HAS_ALIGNMENT_ATTRIBUTE
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringParser.cs
        startLine: 144
      summary: "\nWhen one appears within French braces that are not escaped, a comma\nindicates an alignment and minimum width are specified. The\ndocumentation of a composite format string refers to this as the\nAlignment component.\n"
      example: []
      syntax:
        content:
          CSharp: public const char ITEM_HAS_ALIGNMENT_ATTRIBUTE = ','
          VB: Public Const ITEM_HAS_ALIGNMENT_ATTRIBUTE As Char = ","c
        return:
          type: System.Char
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.FormatStringEngine.FormatStringParser.ITEM_IS_LEFT_ALIGNED
      commentId: F:WizardWrx.FormatStringEngine.FormatStringParser.ITEM_IS_LEFT_ALIGNED
      language: CSharp
      name:
        CSharp: ITEM_IS_LEFT_ALIGNED
        VB: ITEM_IS_LEFT_ALIGNED
      nameWithType:
        CSharp: FormatStringParser.ITEM_IS_LEFT_ALIGNED
        VB: FormatStringParser.ITEM_IS_LEFT_ALIGNED
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatStringParser.ITEM_IS_LEFT_ALIGNED
        VB: WizardWrx.FormatStringEngine.FormatStringParser.ITEM_IS_LEFT_ALIGNED
      type: Field
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: ITEM_IS_LEFT_ALIGNED
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringParser.cs
        startLine: 151
      summary: "\nSince a negative number signifies left alignment, the presence of a\nminus sign immediately following the comma acts as a switch.\n"
      example: []
      syntax:
        content:
          CSharp: public const char ITEM_IS_LEFT_ALIGNED = '-'
          VB: Public Const ITEM_IS_LEFT_ALIGNED As Char = "-"c
        return:
          type: System.Char
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.FormatStringEngine.FormatStringParser.ITEM_IS_RIGHT_ALIGNED
      commentId: F:WizardWrx.FormatStringEngine.FormatStringParser.ITEM_IS_RIGHT_ALIGNED
      language: CSharp
      name:
        CSharp: ITEM_IS_RIGHT_ALIGNED
        VB: ITEM_IS_RIGHT_ALIGNED
      nameWithType:
        CSharp: FormatStringParser.ITEM_IS_RIGHT_ALIGNED
        VB: FormatStringParser.ITEM_IS_RIGHT_ALIGNED
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatStringParser.ITEM_IS_RIGHT_ALIGNED
        VB: WizardWrx.FormatStringEngine.FormatStringParser.ITEM_IS_RIGHT_ALIGNED
      type: Field
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: ITEM_IS_RIGHT_ALIGNED
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringParser.cs
        startLine: 158
      summary: "\nSince a negative number signifies left alignment, the presence of a\nplus sign immediately following the comma acts as a dummy switch.\n"
      example: []
      syntax:
        content:
          CSharp: public const char ITEM_IS_RIGHT_ALIGNED = '+'
          VB: Public Const ITEM_IS_RIGHT_ALIGNED As Char = "+"c
        return:
          type: System.Char
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.FormatStringEngine.FormatStringParser.ITEM_HAS_FORMAT_STRING_ATTRIBUTE
      commentId: F:WizardWrx.FormatStringEngine.FormatStringParser.ITEM_HAS_FORMAT_STRING_ATTRIBUTE
      language: CSharp
      name:
        CSharp: ITEM_HAS_FORMAT_STRING_ATTRIBUTE
        VB: ITEM_HAS_FORMAT_STRING_ATTRIBUTE
      nameWithType:
        CSharp: FormatStringParser.ITEM_HAS_FORMAT_STRING_ATTRIBUTE
        VB: FormatStringParser.ITEM_HAS_FORMAT_STRING_ATTRIBUTE
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatStringParser.ITEM_HAS_FORMAT_STRING_ATTRIBUTE
        VB: WizardWrx.FormatStringEngine.FormatStringParser.ITEM_HAS_FORMAT_STRING_ATTRIBUTE
      type: Field
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: ITEM_HAS_FORMAT_STRING_ATTRIBUTE
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringParser.cs
        startLine: 167
      summary: "\nWhen one appears within French braces, a colon indicates a format\nstring, to be applied to the item is specified. The documentation\nof a composite format string refers to this as the Format String\ncomponent.\n"
      example: []
      syntax:
        content:
          CSharp: public const char ITEM_HAS_FORMAT_STRING_ATTRIBUTE = ':'
          VB: Public Const ITEM_HAS_FORMAT_STRING_ATTRIBUTE As Char = ":"c
        return:
          type: System.Char
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.FormatStringEngine.FormatStringParser.NO_ERRORS
      commentId: F:WizardWrx.FormatStringEngine.FormatStringParser.NO_ERRORS
      language: CSharp
      name:
        CSharp: NO_ERRORS
        VB: NO_ERRORS
      nameWithType:
        CSharp: FormatStringParser.NO_ERRORS
        VB: FormatStringParser.NO_ERRORS
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatStringParser.NO_ERRORS
        VB: WizardWrx.FormatStringEngine.FormatStringParser.NO_ERRORS
      type: Field
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: NO_ERRORS
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringParser.cs
        startLine: 175
      summary: "\nThe FormatStringErrorCount returns this value when the\nFormatStringErrors collection is null. The collection remains so\nunless at least one error is found in the string.\n"
      example: []
      syntax:
        content:
          CSharp: public const int NO_ERRORS = 0
          VB: Public Const NO_ERRORS As Integer = 0
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.FormatStringEngine.FormatStringParser.#ctor
      commentId: M:WizardWrx.FormatStringEngine.FormatStringParser.#ctor
      language: CSharp
      name:
        CSharp: FormatStringParser()
        VB: FormatStringParser()
      nameWithType:
        CSharp: FormatStringParser.FormatStringParser()
        VB: FormatStringParser.FormatStringParser()
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatStringParser.FormatStringParser()
        VB: WizardWrx.FormatStringEngine.FormatStringParser.FormatStringParser()
      type: Constructor
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: .ctor
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringParser.cs
        startLine: 262
      summary: "\nCreate the empty parser.\n"
      example: []
      syntax:
        content:
          CSharp: public FormatStringParser()
          VB: Public Sub New
      overload: WizardWrx.FormatStringEngine.FormatStringParser.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.FormatStringEngine.FormatStringParser.#ctor(System.String)
      commentId: M:WizardWrx.FormatStringEngine.FormatStringParser.#ctor(System.String)
      language: CSharp
      name:
        CSharp: FormatStringParser(String)
        VB: FormatStringParser(String)
      nameWithType:
        CSharp: FormatStringParser.FormatStringParser(String)
        VB: FormatStringParser.FormatStringParser(String)
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatStringParser.FormatStringParser(System.String)
        VB: WizardWrx.FormatStringEngine.FormatStringParser.FormatStringParser(System.String)
      type: Constructor
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: .ctor
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringParser.cs
        startLine: 275
      summary: "\nCreate the parser and set the initial value of its FormatString\nproperty.\n"
      example: []
      syntax:
        content:
          CSharp: public FormatStringParser(string pstrFormatString)
          VB: Public Sub New(pstrFormatString As String)
        parameters:
        - id: pstrFormatString
          type: System.String
          description: "\nPass a reference to the format control string that you want parsed.\nSince the constructor parses the string, the properties are set, and\nall that remains for you to do is evaluate them.\n"
      overload: WizardWrx.FormatStringEngine.FormatStringParser.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.FormatStringEngine.FormatStringParser.FormatItems
      commentId: P:WizardWrx.FormatStringEngine.FormatStringParser.FormatItems
      language: CSharp
      name:
        CSharp: FormatItems
        VB: FormatItems
      nameWithType:
        CSharp: FormatStringParser.FormatItems
        VB: FormatStringParser.FormatItems
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatStringParser.FormatItems
        VB: WizardWrx.FormatStringEngine.FormatStringParser.FormatItems
      type: Property
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: FormatItems
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringParser.cs
        startLine: 288
      summary: "\nGets the collection of FormatItems found in the string.\n"
      example: []
      syntax:
        content:
          CSharp: public FormatItemsCollection FormatItems { get; }
          VB: Public ReadOnly Property FormatItems As FormatItemsCollection
        parameters: []
        return:
          type: WizardWrx.FormatStringEngine.FormatItemsCollection
      overload: WizardWrx.FormatStringEngine.FormatStringParser.FormatItems*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: WizardWrx.FormatStringEngine.FormatStringParser.FormatString
      commentId: P:WizardWrx.FormatStringEngine.FormatStringParser.FormatString
      language: CSharp
      name:
        CSharp: FormatString
        VB: FormatString
      nameWithType:
        CSharp: FormatStringParser.FormatString
        VB: FormatStringParser.FormatString
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatStringParser.FormatString
        VB: WizardWrx.FormatStringEngine.FormatStringParser.FormatString
      type: Property
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: FormatString
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringParser.cs
        startLine: 296
      summary: "\nGet or set the value of the FormatString property, from which all\nother properties are derived.\n"
      example: []
      syntax:
        content:
          CSharp: public string FormatString { get; set; }
          VB: Public Property FormatString As String
        parameters: []
        return:
          type: System.String
      overload: WizardWrx.FormatStringEngine.FormatStringParser.FormatString*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrorCount
      commentId: P:WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrorCount
      language: CSharp
      name:
        CSharp: FormatStringErrorCount
        VB: FormatStringErrorCount
      nameWithType:
        CSharp: FormatStringParser.FormatStringErrorCount
        VB: FormatStringParser.FormatStringErrorCount
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrorCount
        VB: WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrorCount
      type: Property
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: FormatStringErrorCount
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringParser.cs
        startLine: 324
      summary: "\nGets the count of errors found in the format string.\n"
      remarks: "\nThis convenience property exists because the FormatStringErrors\ncollection is null unless at least one error was found in the format\nstring.\n"
      example: []
      syntax:
        content:
          CSharp: public int FormatStringErrorCount { get; }
          VB: Public ReadOnly Property FormatStringErrorCount As Integer
        parameters: []
        return:
          type: System.Int32
      overload: WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrorCount*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrors
      commentId: P:WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrors
      language: CSharp
      name:
        CSharp: FormatStringErrors
        VB: FormatStringErrors
      nameWithType:
        CSharp: FormatStringParser.FormatStringErrors
        VB: FormatStringParser.FormatStringErrors
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrors
        VB: WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrors
      type: Property
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: FormatStringErrors
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringParser.cs
        startLine: 338
      summary: "\nGets the list of errors, which may be null.\n"
      example: []
      syntax:
        content:
          CSharp: public List<FormatStringError> FormatStringErrors { get; }
          VB: Public ReadOnly Property FormatStringErrors As List(Of FormatStringError)
        parameters: []
        return:
          type: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatStringError}
      overload: WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrors*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: WizardWrx.FormatStringEngine.FormatStringParser.HighestFormatItemIndex
      commentId: P:WizardWrx.FormatStringEngine.FormatStringParser.HighestFormatItemIndex
      language: CSharp
      name:
        CSharp: HighestFormatItemIndex
        VB: HighestFormatItemIndex
      nameWithType:
        CSharp: FormatStringParser.HighestFormatItemIndex
        VB: FormatStringParser.HighestFormatItemIndex
      qualifiedName:
        CSharp: WizardWrx.FormatStringEngine.FormatStringParser.HighestFormatItemIndex
        VB: WizardWrx.FormatStringEngine.FormatStringParser.HighestFormatItemIndex
      type: Property
      assemblies:
      - WizardWrx.FormatStringEngine
      namespace: WizardWrx.FormatStringEngine
      source:
        id: HighestFormatItemIndex
        path: D:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\WizardWrx_NET_API\FormatStringEngine\FormatStringParser.cs
        startLine: 349
      summary: "\nGets the higest format item index number.\n"
      remarks: "\nThe array of format items must contains at least this many items,\nplus one.\n"
      example: []
      syntax:
        content:
          CSharp: public int HighestFormatItemIndex { get; }
          VB: Public ReadOnly Property HighestFormatItemIndex As Integer
        parameters: []
        return:
          type: System.Int32
      overload: WizardWrx.FormatStringEngine.FormatStringParser.HighestFormatItemIndex*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.UInt32:
    name:
      CSharp:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      VB:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt32
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS:
    commentId: F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  WizardWrx.FormatStringEngine.FormatItem.AppearanceOrder*:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatItem.AppearanceOrder*
        name: AppearanceOrder
        nameWithType: FormatItem.AppearanceOrder
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.AppearanceOrder
      VB:
      - id: WizardWrx.FormatStringEngine.FormatItem.AppearanceOrder*
        name: AppearanceOrder
        nameWithType: FormatItem.AppearanceOrder
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.AppearanceOrder
    isDefinition: true
    commentId: Overload:WizardWrx.FormatStringEngine.FormatItem.AppearanceOrder
  WizardWrx.FormatStringEngine.FormatItem.Index*:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatItem.Index*
        name: Index
        nameWithType: FormatItem.Index
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.Index
      VB:
      - id: WizardWrx.FormatStringEngine.FormatItem.Index*
        name: Index
        nameWithType: FormatItem.Index
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.Index
    isDefinition: true
    commentId: Overload:WizardWrx.FormatStringEngine.FormatItem.Index
  WizardWrx.FormatStringEngine.FormatItem.ItemFormat*:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatItem.ItemFormat*
        name: ItemFormat
        nameWithType: FormatItem.ItemFormat
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.ItemFormat
      VB:
      - id: WizardWrx.FormatStringEngine.FormatItem.ItemFormat*
        name: ItemFormat
        nameWithType: FormatItem.ItemFormat
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.ItemFormat
    isDefinition: true
    commentId: Overload:WizardWrx.FormatStringEngine.FormatItem.ItemFormat
  WizardWrx.FormatStringEngine.FormatItem.MinimumWidth*:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatItem.MinimumWidth*
        name: MinimumWidth
        nameWithType: FormatItem.MinimumWidth
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.MinimumWidth
      VB:
      - id: WizardWrx.FormatStringEngine.FormatItem.MinimumWidth*
        name: MinimumWidth
        nameWithType: FormatItem.MinimumWidth
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.MinimumWidth
    isDefinition: true
    commentId: Overload:WizardWrx.FormatStringEngine.FormatItem.MinimumWidth
  WizardWrx.FormatStringEngine.FormatItem.RawLength*:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatItem.RawLength*
        name: RawLength
        nameWithType: FormatItem.RawLength
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.RawLength
      VB:
      - id: WizardWrx.FormatStringEngine.FormatItem.RawLength*
        name: RawLength
        nameWithType: FormatItem.RawLength
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.RawLength
    isDefinition: true
    commentId: Overload:WizardWrx.FormatStringEngine.FormatItem.RawLength
  WizardWrx.FormatStringEngine.FormatItem.StartOffset*:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatItem.StartOffset*
        name: StartOffset
        nameWithType: FormatItem.StartOffset
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.StartOffset
      VB:
      - id: WizardWrx.FormatStringEngine.FormatItem.StartOffset*
        name: StartOffset
        nameWithType: FormatItem.StartOffset
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.StartOffset
    isDefinition: true
    commentId: Overload:WizardWrx.FormatStringEngine.FormatItem.StartOffset
  WizardWrx.FormatStringEngine:
    name:
      CSharp:
      - name: WizardWrx.FormatStringEngine
        nameWithType: WizardWrx.FormatStringEngine
        qualifiedName: WizardWrx.FormatStringEngine
      VB:
      - name: WizardWrx.FormatStringEngine
        nameWithType: WizardWrx.FormatStringEngine
        qualifiedName: WizardWrx.FormatStringEngine
    isDefinition: true
    commentId: N:WizardWrx.FormatStringEngine
  WizardWrx.FormatStringEngine.FormatItem.Alignment:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatItem.Alignment
        name: FormatItem.Alignment
        nameWithType: FormatItem.Alignment
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.Alignment
      VB:
      - id: WizardWrx.FormatStringEngine.FormatItem.Alignment
        name: FormatItem.Alignment
        nameWithType: FormatItem.Alignment
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.Alignment
    isDefinition: true
    parent: WizardWrx.FormatStringEngine
    commentId: T:WizardWrx.FormatStringEngine.FormatItem.Alignment
  WizardWrx.FormatStringEngine.FormatItem.TextAlignment*:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatItem.TextAlignment*
        name: TextAlignment
        nameWithType: FormatItem.TextAlignment
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.TextAlignment
      VB:
      - id: WizardWrx.FormatStringEngine.FormatItem.TextAlignment*
        name: TextAlignment
        nameWithType: FormatItem.TextAlignment
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.TextAlignment
    isDefinition: true
    commentId: Overload:WizardWrx.FormatStringEngine.FormatItem.TextAlignment
  WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,System.String):
    commentId: M:WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem(System.String,System.UInt32,System.String)
  WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth*:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth*
        name: AdjustToMaximumWidth
        nameWithType: FormatItem.AdjustToMaximumWidth
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth
      VB:
      - id: WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth*
        name: AdjustToMaximumWidth
        nameWithType: FormatItem.AdjustToMaximumWidth
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth
    isDefinition: true
    commentId: Overload:WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth
  WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue*:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue*
        name: AdjustItemNumberWidthPerMaxValue
        nameWithType: FormatItem.AdjustItemNumberWidthPerMaxValue
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue
      VB:
      - id: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue*
        name: AdjustItemNumberWidthPerMaxValue
        nameWithType: FormatItem.AdjustItemNumberWidthPerMaxValue
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue
    isDefinition: true
    commentId: Overload:WizardWrx.FormatStringEngine.FormatItem.AdjustItemNumberWidthPerMaxValue
  ? WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.UInt32,System.UInt32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String)
  : commentId: M:WizardWrx.FormatStringEngine.FormatItem.AdjustToMaximumWidth(System.UInt32,System.UInt32,WizardWrx.FormatStringEngine.FormatItem.Alignment,System.String)
  WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem*:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem*
        name: UpgradeFormatItem
        nameWithType: FormatItem.UpgradeFormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem
      VB:
      - id: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem*
        name: UpgradeFormatItem
        nameWithType: FormatItem.UpgradeFormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem
    isDefinition: true
    commentId: Overload:WizardWrx.FormatStringEngine.FormatItem.UpgradeFormatItem
  System.String[]:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.Collections.Generic.List`1:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.List`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.List{System.String}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.String}
  WizardWrx.FormatStringEngine.FormatItem.XofY*:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatItem.XofY*
        name: XofY
        nameWithType: FormatItem.XofY
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.XofY
      VB:
      - id: WizardWrx.FormatStringEngine.FormatItem.XofY*
        name: XofY
        nameWithType: FormatItem.XofY
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.XofY
    isDefinition: true
    commentId: Overload:WizardWrx.FormatStringEngine.FormatItem.XofY
  WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_0D:
    commentId: F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_0D
  WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_2D:
    commentId: F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_2D
  WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_3D:
    commentId: F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_3D
  WizardWrx.FormatStringEngine.FormatItem.IntegerPerRegSettings*:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatItem.IntegerPerRegSettings*
        name: IntegerPerRegSettings
        nameWithType: FormatItem.IntegerPerRegSettings
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.IntegerPerRegSettings
      VB:
      - id: WizardWrx.FormatStringEngine.FormatItem.IntegerPerRegSettings*
        name: IntegerPerRegSettings
        nameWithType: FormatItem.IntegerPerRegSettings
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem.IntegerPerRegSettings
    isDefinition: true
    commentId: Overload:WizardWrx.FormatStringEngine.FormatItem.IntegerPerRegSettings
  WizardWrx.FormatStringEngine.FormatItem:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      VB:
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
    isDefinition: true
    commentId: T:WizardWrx.FormatStringEngine.FormatItem
  WizardWrx.StringExtensions.RenderEvenWhenNull``1(``0,System.String,System.String,System.IFormatProvider):
    name:
      CSharp:
      - id: WizardWrx.StringExtensions.RenderEvenWhenNull``1(``0,System.String,System.String,System.IFormatProvider)
        name: RenderEvenWhenNull<T>
        nameWithType: StringExtensions.RenderEvenWhenNull<T>
        qualifiedName: WizardWrx.StringExtensions.RenderEvenWhenNull<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IFormatProvider
        name: IFormatProvider
        nameWithType: IFormatProvider
        qualifiedName: System.IFormatProvider
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: WizardWrx.StringExtensions.RenderEvenWhenNull``1(``0,System.String,System.String,System.IFormatProvider)
        name: RenderEvenWhenNull(Of T)
        nameWithType: StringExtensions.RenderEvenWhenNull(Of T)
        qualifiedName: WizardWrx.StringExtensions.RenderEvenWhenNull(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IFormatProvider
        name: IFormatProvider
        nameWithType: IFormatProvider
        qualifiedName: System.IFormatProvider
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:WizardWrx.StringExtensions.RenderEvenWhenNull``1(``0,System.String,System.String,System.IFormatProvider)
  WizardWrx:
    name:
      CSharp:
      - name: WizardWrx
        nameWithType: WizardWrx
        qualifiedName: WizardWrx
      VB:
      - name: WizardWrx
        nameWithType: WizardWrx
        qualifiedName: WizardWrx
    isDefinition: true
    commentId: N:WizardWrx
  WizardWrx.StringExtensions:
    name:
      CSharp:
      - id: WizardWrx.StringExtensions
        name: StringExtensions
        nameWithType: StringExtensions
        qualifiedName: WizardWrx.StringExtensions
      VB:
      - id: WizardWrx.StringExtensions
        name: StringExtensions
        nameWithType: StringExtensions
        qualifiedName: WizardWrx.StringExtensions
    isDefinition: true
    parent: WizardWrx
    commentId: T:WizardWrx.StringExtensions
  ? WizardWrx.FormatStringEngine.FormatItem.Alignment.WizardWrx.StringExtensions.RenderEvenWhenNull``1(System.String,System.String,System.IFormatProvider)
  : name:
      CSharp:
      - id: WizardWrx.StringExtensions.RenderEvenWhenNull``1(System.String,System.String,System.IFormatProvider)
        name: RenderEvenWhenNull<FormatItem.Alignment>
        nameWithType: StringExtensions.RenderEvenWhenNull<FormatItem.Alignment>
        qualifiedName: WizardWrx.StringExtensions.RenderEvenWhenNull<WizardWrx.FormatStringEngine.FormatItem.Alignment>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IFormatProvider
        name: IFormatProvider
        nameWithType: IFormatProvider
        qualifiedName: System.IFormatProvider
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: WizardWrx.StringExtensions.RenderEvenWhenNull``1(System.String,System.String,System.IFormatProvider)
        name: RenderEvenWhenNull(Of FormatItem.Alignment)
        nameWithType: StringExtensions.RenderEvenWhenNull(Of FormatItem.Alignment)
        qualifiedName: WizardWrx.StringExtensions.RenderEvenWhenNull(Of WizardWrx.FormatStringEngine.FormatItem.Alignment)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IFormatProvider
        name: IFormatProvider
        nameWithType: IFormatProvider
        qualifiedName: System.IFormatProvider
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: WizardWrx.StringExtensions.RenderEvenWhenNull``1(``0,System.String,System.String,System.IFormatProvider)
    parent: WizardWrx.StringExtensions
    commentId: M:WizardWrx.StringExtensions.RenderEvenWhenNull``1(``0,System.String,System.String,System.IFormatProvider)
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
  System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
        name: IList.get_Item
        nameWithType: List<T>.IList.get_Item
        qualifiedName: System.Collections.Generic.List<T>.System.Collections.IList.get_Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
        name: System.Collections.IList.get_Item
        nameWithType: List(Of T).System.Collections.IList.get_Item
        qualifiedName: System.Collections.Generic.List(Of T).System.Collections.IList.get_Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#get_Item(System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
        name: IList.get_Item
        nameWithType: List<FormatItem>.IList.get_Item
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.System.Collections.IList.get_Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
        name: System.Collections.IList.get_Item
        nameWithType: List(Of FormatItem).System.Collections.IList.get_Item
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).System.Collections.IList.get_Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#get_Item(System.Int32)
  System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
        name: IList.set_Item
        nameWithType: List<T>.IList.set_Item
        qualifiedName: System.Collections.Generic.List<T>.System.Collections.IList.set_Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
        name: System.Collections.IList.set_Item
        nameWithType: List(Of T).System.Collections.IList.set_Item
        qualifiedName: System.Collections.Generic.List(Of T).System.Collections.IList.set_Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#set_Item(System.Int32,System.Object)
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
        name: IList.set_Item
        nameWithType: List<FormatItem>.IList.set_Item
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.System.Collections.IList.set_Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
        name: System.Collections.IList.set_Item
        nameWithType: List(Of FormatItem).System.Collections.IList.set_Item
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).System.Collections.IList.set_Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#set_Item(System.Int32,System.Object)
  System.Collections.Generic.List`1.Add(`0):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Add(`0)
        name: Add
        nameWithType: List<T>.Add
        qualifiedName: System.Collections.Generic.List<T>.Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Add(`0)
        name: Add
        nameWithType: List(Of T).Add
        qualifiedName: System.Collections.Generic.List(Of T).Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.Add(`0)
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Add(WizardWrx.FormatStringEngine.FormatItem):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Add(`0)
        name: Add
        nameWithType: List<FormatItem>.Add
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Add(`0)
        name: Add
        nameWithType: List(Of FormatItem).Add
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.Add(`0)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Add(WizardWrx.FormatStringEngine.FormatItem)
  System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
        name: IList.Add
        nameWithType: List<T>.IList.Add
        qualifiedName: System.Collections.Generic.List<T>.System.Collections.IList.Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
        name: System.Collections.IList.Add
        nameWithType: List(Of T).System.Collections.IList.Add
        qualifiedName: System.Collections.Generic.List(Of T).System.Collections.IList.Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#Add(System.Object):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
        name: IList.Add
        nameWithType: List<FormatItem>.IList.Add
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.System.Collections.IList.Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
        name: System.Collections.IList.Add
        nameWithType: List(Of FormatItem).System.Collections.IList.Add
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).System.Collections.IList.Add
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#Add(System.Object)
  System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
        name: AddRange
        nameWithType: List<T>.AddRange
        qualifiedName: System.Collections.Generic.List<T>.AddRange
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
        name: AddRange
        nameWithType: List(Of T).AddRange
        qualifiedName: System.Collections.Generic.List(Of T).AddRange
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.AddRange(System.Collections.Generic.IEnumerable{WizardWrx.FormatStringEngine.FormatItem})
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
        name: AddRange
        nameWithType: List<FormatItem>.AddRange
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.AddRange
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
        name: AddRange
        nameWithType: List(Of FormatItem).AddRange
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).AddRange
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.AddRange(System.Collections.Generic.IEnumerable{WizardWrx.FormatStringEngine.FormatItem})
  System.Collections.Generic.List`1.AsReadOnly:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.AsReadOnly
        name: AsReadOnly
        nameWithType: List<T>.AsReadOnly
        qualifiedName: System.Collections.Generic.List<T>.AsReadOnly
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.AsReadOnly
        name: AsReadOnly
        nameWithType: List(Of T).AsReadOnly
        qualifiedName: System.Collections.Generic.List(Of T).AsReadOnly
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.AsReadOnly
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.AsReadOnly:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.AsReadOnly
        name: AsReadOnly
        nameWithType: List<FormatItem>.AsReadOnly
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.AsReadOnly
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.AsReadOnly
        name: AsReadOnly
        nameWithType: List(Of FormatItem).AsReadOnly
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).AsReadOnly
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.AsReadOnly
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.AsReadOnly
  System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
        name: BinarySearch
        nameWithType: List<T>.BinarySearch
        qualifiedName: System.Collections.Generic.List<T>.BinarySearch
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IComparer`1
        name: IComparer
        nameWithType: IComparer
        qualifiedName: System.Collections.Generic.IComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
        name: BinarySearch
        nameWithType: List(Of T).BinarySearch
        qualifiedName: System.Collections.Generic.List(Of T).BinarySearch
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IComparer`1
        name: IComparer
        nameWithType: IComparer
        qualifiedName: System.Collections.Generic.IComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.BinarySearch(System.Int32,System.Int32,WizardWrx.FormatStringEngine.FormatItem,System.Collections.Generic.IComparer{WizardWrx.FormatStringEngine.FormatItem})
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
        name: BinarySearch
        nameWithType: List<FormatItem>.BinarySearch
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.BinarySearch
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IComparer`1
        name: IComparer
        nameWithType: IComparer
        qualifiedName: System.Collections.Generic.IComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
        name: BinarySearch
        nameWithType: List(Of FormatItem).BinarySearch
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).BinarySearch
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IComparer`1
        name: IComparer
        nameWithType: IComparer
        qualifiedName: System.Collections.Generic.IComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.BinarySearch(System.Int32,System.Int32,WizardWrx.FormatStringEngine.FormatItem,System.Collections.Generic.IComparer{WizardWrx.FormatStringEngine.FormatItem})
  System.Collections.Generic.List`1.BinarySearch(`0):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.BinarySearch(`0)
        name: BinarySearch
        nameWithType: List<T>.BinarySearch
        qualifiedName: System.Collections.Generic.List<T>.BinarySearch
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.BinarySearch(`0)
        name: BinarySearch
        nameWithType: List(Of T).BinarySearch
        qualifiedName: System.Collections.Generic.List(Of T).BinarySearch
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.BinarySearch(`0)
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.BinarySearch(WizardWrx.FormatStringEngine.FormatItem):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.BinarySearch(`0)
        name: BinarySearch
        nameWithType: List<FormatItem>.BinarySearch
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.BinarySearch
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.BinarySearch(`0)
        name: BinarySearch
        nameWithType: List(Of FormatItem).BinarySearch
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).BinarySearch
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.BinarySearch(`0)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.BinarySearch(WizardWrx.FormatStringEngine.FormatItem)
  System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
        name: BinarySearch
        nameWithType: List<T>.BinarySearch
        qualifiedName: System.Collections.Generic.List<T>.BinarySearch
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IComparer`1
        name: IComparer
        nameWithType: IComparer
        qualifiedName: System.Collections.Generic.IComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
        name: BinarySearch
        nameWithType: List(Of T).BinarySearch
        qualifiedName: System.Collections.Generic.List(Of T).BinarySearch
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IComparer`1
        name: IComparer
        nameWithType: IComparer
        qualifiedName: System.Collections.Generic.IComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.BinarySearch(WizardWrx.FormatStringEngine.FormatItem,System.Collections.Generic.IComparer{WizardWrx.FormatStringEngine.FormatItem})
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
        name: BinarySearch
        nameWithType: List<FormatItem>.BinarySearch
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.BinarySearch
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IComparer`1
        name: IComparer
        nameWithType: IComparer
        qualifiedName: System.Collections.Generic.IComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
        name: BinarySearch
        nameWithType: List(Of FormatItem).BinarySearch
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).BinarySearch
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IComparer`1
        name: IComparer
        nameWithType: IComparer
        qualifiedName: System.Collections.Generic.IComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.BinarySearch(WizardWrx.FormatStringEngine.FormatItem,System.Collections.Generic.IComparer{WizardWrx.FormatStringEngine.FormatItem})
  System.Collections.Generic.List`1.Clear:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Clear
        name: Clear
        nameWithType: List<T>.Clear
        qualifiedName: System.Collections.Generic.List<T>.Clear
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Clear
        name: Clear
        nameWithType: List(Of T).Clear
        qualifiedName: System.Collections.Generic.List(Of T).Clear
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.Clear
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Clear:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Clear
        name: Clear
        nameWithType: List<FormatItem>.Clear
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.Clear
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Clear
        name: Clear
        nameWithType: List(Of FormatItem).Clear
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).Clear
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.Clear
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Clear
  System.Collections.Generic.List`1.Contains(`0):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Contains(`0)
        name: Contains
        nameWithType: List<T>.Contains
        qualifiedName: System.Collections.Generic.List<T>.Contains
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Contains(`0)
        name: Contains
        nameWithType: List(Of T).Contains
        qualifiedName: System.Collections.Generic.List(Of T).Contains
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.Contains(`0)
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Contains(WizardWrx.FormatStringEngine.FormatItem):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Contains(`0)
        name: Contains
        nameWithType: List<FormatItem>.Contains
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.Contains
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Contains(`0)
        name: Contains
        nameWithType: List(Of FormatItem).Contains
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).Contains
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.Contains(`0)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Contains(WizardWrx.FormatStringEngine.FormatItem)
  System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
        name: IList.Contains
        nameWithType: List<T>.IList.Contains
        qualifiedName: System.Collections.Generic.List<T>.System.Collections.IList.Contains
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
        name: System.Collections.IList.Contains
        nameWithType: List(Of T).System.Collections.IList.Contains
        qualifiedName: System.Collections.Generic.List(Of T).System.Collections.IList.Contains
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#Contains(System.Object):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
        name: IList.Contains
        nameWithType: List<FormatItem>.IList.Contains
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.System.Collections.IList.Contains
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
        name: System.Collections.IList.Contains
        nameWithType: List(Of FormatItem).System.Collections.IList.Contains
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).System.Collections.IList.Contains
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#Contains(System.Object)
  System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0}):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
        name: ConvertAll<TOutput>
        nameWithType: List<T>.ConvertAll<TOutput>
        qualifiedName: System.Collections.Generic.List<T>.ConvertAll<TOutput>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Converter`2
        name: Converter
        nameWithType: Converter
        qualifiedName: System.Converter
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TOutput
        nameWithType: TOutput
        qualifiedName: TOutput
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
        name: ConvertAll(Of TOutput)
        nameWithType: List(Of T).ConvertAll(Of TOutput)
        qualifiedName: System.Collections.Generic.List(Of T).ConvertAll(Of TOutput)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Converter`2
        name: Converter
        nameWithType: Converter
        qualifiedName: System.Converter
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TOutput
        nameWithType: TOutput
        qualifiedName: TOutput
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.ConvertAll``1(System.Converter{WizardWrx.FormatStringEngine.FormatItem,{TOutput}})
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
        name: ConvertAll<TOutput>
        nameWithType: List<FormatItem>.ConvertAll<TOutput>
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.ConvertAll<TOutput>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Converter`2
        name: Converter
        nameWithType: Converter
        qualifiedName: System.Converter
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TOutput
        nameWithType: TOutput
        qualifiedName: TOutput
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
        name: ConvertAll(Of TOutput)
        nameWithType: List(Of FormatItem).ConvertAll(Of TOutput)
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).ConvertAll(Of TOutput)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Converter`2
        name: Converter
        nameWithType: Converter
        qualifiedName: System.Converter
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TOutput
        nameWithType: TOutput
        qualifiedName: TOutput
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.ConvertAll``1(System.Converter{WizardWrx.FormatStringEngine.FormatItem,``0})
  System.Collections.Generic.List`1.CopyTo(`0[]):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.CopyTo(`0[])
        name: CopyTo
        nameWithType: List<T>.CopyTo
        qualifiedName: System.Collections.Generic.List<T>.CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.CopyTo(`0[])
        name: CopyTo
        nameWithType: List(Of T).CopyTo
        qualifiedName: System.Collections.Generic.List(Of T).CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.CopyTo(`0[])
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.CopyTo(WizardWrx.FormatStringEngine.FormatItem[]):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.CopyTo(`0[])
        name: CopyTo
        nameWithType: List<FormatItem>.CopyTo
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.CopyTo(`0[])
        name: CopyTo
        nameWithType: List(Of FormatItem).CopyTo
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.CopyTo(`0[])
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.CopyTo(WizardWrx.FormatStringEngine.FormatItem[])
  System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
        name: ICollection.CopyTo
        nameWithType: List<T>.ICollection.CopyTo
        qualifiedName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Array
        name: Array
        nameWithType: Array
        qualifiedName: System.Array
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
        name: System.Collections.ICollection.CopyTo
        nameWithType: List(Of T).System.Collections.ICollection.CopyTo
        qualifiedName: System.Collections.Generic.List(Of T).System.Collections.ICollection.CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Array
        name: Array
        nameWithType: Array
        qualifiedName: System.Array
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
        name: ICollection.CopyTo
        nameWithType: List<FormatItem>.ICollection.CopyTo
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.System.Collections.ICollection.CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Array
        name: Array
        nameWithType: Array
        qualifiedName: System.Array
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
        name: System.Collections.ICollection.CopyTo
        nameWithType: List(Of FormatItem).System.Collections.ICollection.CopyTo
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).System.Collections.ICollection.CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Array
        name: Array
        nameWithType: Array
        qualifiedName: System.Array
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
        name: CopyTo
        nameWithType: List<T>.CopyTo
        qualifiedName: System.Collections.Generic.List<T>.CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
        name: CopyTo
        nameWithType: List(Of T).CopyTo
        qualifiedName: System.Collections.Generic.List(Of T).CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.CopyTo(System.Int32,WizardWrx.FormatStringEngine.FormatItem[],System.Int32,System.Int32)
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
        name: CopyTo
        nameWithType: List<FormatItem>.CopyTo
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
        name: CopyTo
        nameWithType: List(Of FormatItem).CopyTo
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.CopyTo(System.Int32,WizardWrx.FormatStringEngine.FormatItem[],System.Int32,System.Int32)
  System.Collections.Generic.List`1.CopyTo(`0[],System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
        name: CopyTo
        nameWithType: List<T>.CopyTo
        qualifiedName: System.Collections.Generic.List<T>.CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
        name: CopyTo
        nameWithType: List(Of T).CopyTo
        qualifiedName: System.Collections.Generic.List(Of T).CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.CopyTo(WizardWrx.FormatStringEngine.FormatItem[],System.Int32)
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
        name: CopyTo
        nameWithType: List<FormatItem>.CopyTo
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
        name: CopyTo
        nameWithType: List(Of FormatItem).CopyTo
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).CopyTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.CopyTo(WizardWrx.FormatStringEngine.FormatItem[],System.Int32)
  System.Collections.Generic.List`1.Exists(System.Predicate{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
        name: Exists
        nameWithType: List<T>.Exists
        qualifiedName: System.Collections.Generic.List<T>.Exists
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
        name: Exists
        nameWithType: List(Of T).Exists
        qualifiedName: System.Collections.Generic.List(Of T).Exists
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Exists(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
        name: Exists
        nameWithType: List<FormatItem>.Exists
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.Exists
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
        name: Exists
        nameWithType: List(Of FormatItem).Exists
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).Exists
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Exists(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  System.Collections.Generic.List`1.Find(System.Predicate{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Find(System.Predicate{`0})
        name: Find
        nameWithType: List<T>.Find
        qualifiedName: System.Collections.Generic.List<T>.Find
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Find(System.Predicate{`0})
        name: Find
        nameWithType: List(Of T).Find
        qualifiedName: System.Collections.Generic.List(Of T).Find
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Find(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.Find(System.Predicate{`0})
        name: Find
        nameWithType: List<FormatItem>.Find
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.Find
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Find(System.Predicate{`0})
        name: Find
        nameWithType: List(Of FormatItem).Find
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).Find
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Find(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  System.Collections.Generic.List`1.FindAll(System.Predicate{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
        name: FindAll
        nameWithType: List<T>.FindAll
        qualifiedName: System.Collections.Generic.List<T>.FindAll
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
        name: FindAll
        nameWithType: List(Of T).FindAll
        qualifiedName: System.Collections.Generic.List(Of T).FindAll
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindAll(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
        name: FindAll
        nameWithType: List<FormatItem>.FindAll
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.FindAll
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
        name: FindAll
        nameWithType: List(Of FormatItem).FindAll
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).FindAll
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindAll(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  System.Collections.Generic.List`1.FindIndex(System.Predicate{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
        name: FindIndex
        nameWithType: List<T>.FindIndex
        qualifiedName: System.Collections.Generic.List<T>.FindIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
        name: FindIndex
        nameWithType: List(Of T).FindIndex
        qualifiedName: System.Collections.Generic.List(Of T).FindIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindIndex(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
        name: FindIndex
        nameWithType: List<FormatItem>.FindIndex
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.FindIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
        name: FindIndex
        nameWithType: List(Of FormatItem).FindIndex
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).FindIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindIndex(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
        name: FindIndex
        nameWithType: List<T>.FindIndex
        qualifiedName: System.Collections.Generic.List<T>.FindIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
        name: FindIndex
        nameWithType: List(Of T).FindIndex
        qualifiedName: System.Collections.Generic.List(Of T).FindIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindIndex(System.Int32,System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
        name: FindIndex
        nameWithType: List<FormatItem>.FindIndex
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.FindIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
        name: FindIndex
        nameWithType: List(Of FormatItem).FindIndex
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).FindIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindIndex(System.Int32,System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
        name: FindIndex
        nameWithType: List<T>.FindIndex
        qualifiedName: System.Collections.Generic.List<T>.FindIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
        name: FindIndex
        nameWithType: List(Of T).FindIndex
        qualifiedName: System.Collections.Generic.List(Of T).FindIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindIndex(System.Int32,System.Int32,System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
        name: FindIndex
        nameWithType: List<FormatItem>.FindIndex
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.FindIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
        name: FindIndex
        nameWithType: List(Of FormatItem).FindIndex
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).FindIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindIndex(System.Int32,System.Int32,System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  System.Collections.Generic.List`1.FindLast(System.Predicate{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
        name: FindLast
        nameWithType: List<T>.FindLast
        qualifiedName: System.Collections.Generic.List<T>.FindLast
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
        name: FindLast
        nameWithType: List(Of T).FindLast
        qualifiedName: System.Collections.Generic.List(Of T).FindLast
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindLast(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
        name: FindLast
        nameWithType: List<FormatItem>.FindLast
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.FindLast
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
        name: FindLast
        nameWithType: List(Of FormatItem).FindLast
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).FindLast
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindLast(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
        name: FindLastIndex
        nameWithType: List<T>.FindLastIndex
        qualifiedName: System.Collections.Generic.List<T>.FindLastIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
        name: FindLastIndex
        nameWithType: List(Of T).FindLastIndex
        qualifiedName: System.Collections.Generic.List(Of T).FindLastIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindLastIndex(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
        name: FindLastIndex
        nameWithType: List<FormatItem>.FindLastIndex
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.FindLastIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
        name: FindLastIndex
        nameWithType: List(Of FormatItem).FindLastIndex
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).FindLastIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindLastIndex(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
        name: FindLastIndex
        nameWithType: List<T>.FindLastIndex
        qualifiedName: System.Collections.Generic.List<T>.FindLastIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
        name: FindLastIndex
        nameWithType: List(Of T).FindLastIndex
        qualifiedName: System.Collections.Generic.List(Of T).FindLastIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindLastIndex(System.Int32,System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
        name: FindLastIndex
        nameWithType: List<FormatItem>.FindLastIndex
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.FindLastIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
        name: FindLastIndex
        nameWithType: List(Of FormatItem).FindLastIndex
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).FindLastIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindLastIndex(System.Int32,System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
        name: FindLastIndex
        nameWithType: List<T>.FindLastIndex
        qualifiedName: System.Collections.Generic.List<T>.FindLastIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
        name: FindLastIndex
        nameWithType: List(Of T).FindLastIndex
        qualifiedName: System.Collections.Generic.List(Of T).FindLastIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindLastIndex(System.Int32,System.Int32,System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
        name: FindLastIndex
        nameWithType: List<FormatItem>.FindLastIndex
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.FindLastIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
        name: FindLastIndex
        nameWithType: List(Of FormatItem).FindLastIndex
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).FindLastIndex
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.FindLastIndex(System.Int32,System.Int32,System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  System.Collections.Generic.List`1.ForEach(System.Action{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.ForEach(System.Action{`0})
        name: ForEach
        nameWithType: List<T>.ForEach
        qualifiedName: System.Collections.Generic.List<T>.ForEach
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.ForEach(System.Action{`0})
        name: ForEach
        nameWithType: List(Of T).ForEach
        qualifiedName: System.Collections.Generic.List(Of T).ForEach
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.ForEach(System.Action{`0})
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.ForEach(System.Action{WizardWrx.FormatStringEngine.FormatItem})
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.ForEach(System.Action{`0})
        name: ForEach
        nameWithType: List<FormatItem>.ForEach
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.ForEach
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.ForEach(System.Action{`0})
        name: ForEach
        nameWithType: List(Of FormatItem).ForEach
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).ForEach
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.ForEach(System.Action{WizardWrx.FormatStringEngine.FormatItem})
  System.Collections.Generic.List`1.GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.GetEnumerator
        name: GetEnumerator
        nameWithType: List<T>.GetEnumerator
        qualifiedName: System.Collections.Generic.List<T>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.GetEnumerator
        name: GetEnumerator
        nameWithType: List(Of T).GetEnumerator
        qualifiedName: System.Collections.Generic.List(Of T).GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.GetEnumerator
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.GetEnumerator
        name: GetEnumerator
        nameWithType: List<FormatItem>.GetEnumerator
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.GetEnumerator
        name: GetEnumerator
        nameWithType: List(Of FormatItem).GetEnumerator
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.GetEnumerator
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.GetEnumerator
  System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
        name: IEnumerable<T>.GetEnumerator
        nameWithType: List<T>.IEnumerable<T>.GetEnumerator
        qualifiedName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
        name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
        nameWithType: List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
        qualifiedName: System.Collections.Generic.List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#Generic#IEnumerable{T}#GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
        name: IEnumerable<FormatItem>.GetEnumerator
        nameWithType: List<FormatItem>.IEnumerable<FormatItem>.GetEnumerator
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.System.Collections.Generic.IEnumerable<WizardWrx.FormatStringEngine.FormatItem>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
        name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
        nameWithType: List(Of FormatItem).System.Collections.Generic.IEnumerable<T>.GetEnumerator
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).System.Collections.Generic.IEnumerable<T>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
        name: IEnumerable.GetEnumerator
        nameWithType: List<T>.IEnumerable.GetEnumerator
        qualifiedName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
        name: System.Collections.IEnumerable.GetEnumerator
        nameWithType: List(Of T).System.Collections.IEnumerable.GetEnumerator
        qualifiedName: System.Collections.Generic.List(Of T).System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IEnumerable#GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
        name: IEnumerable.GetEnumerator
        nameWithType: List<FormatItem>.IEnumerable.GetEnumerator
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
        name: System.Collections.IEnumerable.GetEnumerator
        nameWithType: List(Of FormatItem).System.Collections.IEnumerable.GetEnumerator
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IEnumerable#GetEnumerator
  System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
        name: GetRange
        nameWithType: List<T>.GetRange
        qualifiedName: System.Collections.Generic.List<T>.GetRange
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
        name: GetRange
        nameWithType: List(Of T).GetRange
        qualifiedName: System.Collections.Generic.List(Of T).GetRange
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.GetRange(System.Int32,System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
        name: GetRange
        nameWithType: List<FormatItem>.GetRange
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.GetRange
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
        name: GetRange
        nameWithType: List(Of FormatItem).GetRange
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).GetRange
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.GetRange(System.Int32,System.Int32)
  System.Collections.Generic.List`1.IndexOf(`0):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.IndexOf(`0)
        name: IndexOf
        nameWithType: List<T>.IndexOf
        qualifiedName: System.Collections.Generic.List<T>.IndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.IndexOf(`0)
        name: IndexOf
        nameWithType: List(Of T).IndexOf
        qualifiedName: System.Collections.Generic.List(Of T).IndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.IndexOf(`0)
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.IndexOf(WizardWrx.FormatStringEngine.FormatItem):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.IndexOf(`0)
        name: IndexOf
        nameWithType: List<FormatItem>.IndexOf
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.IndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.IndexOf(`0)
        name: IndexOf
        nameWithType: List(Of FormatItem).IndexOf
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).IndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.IndexOf(`0)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.IndexOf(WizardWrx.FormatStringEngine.FormatItem)
  System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
        name: IList.IndexOf
        nameWithType: List<T>.IList.IndexOf
        qualifiedName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
        name: System.Collections.IList.IndexOf
        nameWithType: List(Of T).System.Collections.IList.IndexOf
        qualifiedName: System.Collections.Generic.List(Of T).System.Collections.IList.IndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#IndexOf(System.Object):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
        name: IList.IndexOf
        nameWithType: List<FormatItem>.IList.IndexOf
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.System.Collections.IList.IndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
        name: System.Collections.IList.IndexOf
        nameWithType: List(Of FormatItem).System.Collections.IList.IndexOf
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).System.Collections.IList.IndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#IndexOf(System.Object)
  System.Collections.Generic.List`1.IndexOf(`0,System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
        name: IndexOf
        nameWithType: List<T>.IndexOf
        qualifiedName: System.Collections.Generic.List<T>.IndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
        name: IndexOf
        nameWithType: List(Of T).IndexOf
        qualifiedName: System.Collections.Generic.List(Of T).IndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.IndexOf(WizardWrx.FormatStringEngine.FormatItem,System.Int32)
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
        name: IndexOf
        nameWithType: List<FormatItem>.IndexOf
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.IndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
        name: IndexOf
        nameWithType: List(Of FormatItem).IndexOf
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).IndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.IndexOf(WizardWrx.FormatStringEngine.FormatItem,System.Int32)
  System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
        name: IndexOf
        nameWithType: List<T>.IndexOf
        qualifiedName: System.Collections.Generic.List<T>.IndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
        name: IndexOf
        nameWithType: List(Of T).IndexOf
        qualifiedName: System.Collections.Generic.List(Of T).IndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.IndexOf(WizardWrx.FormatStringEngine.FormatItem,System.Int32,System.Int32)
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
        name: IndexOf
        nameWithType: List<FormatItem>.IndexOf
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.IndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
        name: IndexOf
        nameWithType: List(Of FormatItem).IndexOf
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).IndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.IndexOf(WizardWrx.FormatStringEngine.FormatItem,System.Int32,System.Int32)
  System.Collections.Generic.List`1.Insert(System.Int32,`0):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Insert(System.Int32,`0)
        name: Insert
        nameWithType: List<T>.Insert
        qualifiedName: System.Collections.Generic.List<T>.Insert
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Insert(System.Int32,`0)
        name: Insert
        nameWithType: List(Of T).Insert
        qualifiedName: System.Collections.Generic.List(Of T).Insert
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.Insert(System.Int32,`0)
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Insert(System.Int32,WizardWrx.FormatStringEngine.FormatItem)
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.Insert(System.Int32,`0)
        name: Insert
        nameWithType: List<FormatItem>.Insert
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.Insert
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Insert(System.Int32,`0)
        name: Insert
        nameWithType: List(Of FormatItem).Insert
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).Insert
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Insert(System.Int32,WizardWrx.FormatStringEngine.FormatItem)
  System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
        name: IList.Insert
        nameWithType: List<T>.IList.Insert
        qualifiedName: System.Collections.Generic.List<T>.System.Collections.IList.Insert
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
        name: System.Collections.IList.Insert
        nameWithType: List(Of T).System.Collections.IList.Insert
        qualifiedName: System.Collections.Generic.List(Of T).System.Collections.IList.Insert
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#Insert(System.Int32,System.Object)
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
        name: IList.Insert
        nameWithType: List<FormatItem>.IList.Insert
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.System.Collections.IList.Insert
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
        name: System.Collections.IList.Insert
        nameWithType: List(Of FormatItem).System.Collections.IList.Insert
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).System.Collections.IList.Insert
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#Insert(System.Int32,System.Object)
  System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
        name: InsertRange
        nameWithType: List<T>.InsertRange
        qualifiedName: System.Collections.Generic.List<T>.InsertRange
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
        name: InsertRange
        nameWithType: List(Of T).InsertRange
        qualifiedName: System.Collections.Generic.List(Of T).InsertRange
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{WizardWrx.FormatStringEngine.FormatItem})
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
        name: InsertRange
        nameWithType: List<FormatItem>.InsertRange
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.InsertRange
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
        name: InsertRange
        nameWithType: List(Of FormatItem).InsertRange
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).InsertRange
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{WizardWrx.FormatStringEngine.FormatItem})
  System.Collections.Generic.List`1.LastIndexOf(`0):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.LastIndexOf(`0)
        name: LastIndexOf
        nameWithType: List<T>.LastIndexOf
        qualifiedName: System.Collections.Generic.List<T>.LastIndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.LastIndexOf(`0)
        name: LastIndexOf
        nameWithType: List(Of T).LastIndexOf
        qualifiedName: System.Collections.Generic.List(Of T).LastIndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0)
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.LastIndexOf(WizardWrx.FormatStringEngine.FormatItem):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.LastIndexOf(`0)
        name: LastIndexOf
        nameWithType: List<FormatItem>.LastIndexOf
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.LastIndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.LastIndexOf(`0)
        name: LastIndexOf
        nameWithType: List(Of FormatItem).LastIndexOf
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).LastIndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.LastIndexOf(`0)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.LastIndexOf(WizardWrx.FormatStringEngine.FormatItem)
  System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
        name: LastIndexOf
        nameWithType: List<T>.LastIndexOf
        qualifiedName: System.Collections.Generic.List<T>.LastIndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
        name: LastIndexOf
        nameWithType: List(Of T).LastIndexOf
        qualifiedName: System.Collections.Generic.List(Of T).LastIndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.LastIndexOf(WizardWrx.FormatStringEngine.FormatItem,System.Int32)
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
        name: LastIndexOf
        nameWithType: List<FormatItem>.LastIndexOf
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.LastIndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
        name: LastIndexOf
        nameWithType: List(Of FormatItem).LastIndexOf
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).LastIndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.LastIndexOf(WizardWrx.FormatStringEngine.FormatItem,System.Int32)
  System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
        name: LastIndexOf
        nameWithType: List<T>.LastIndexOf
        qualifiedName: System.Collections.Generic.List<T>.LastIndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
        name: LastIndexOf
        nameWithType: List(Of T).LastIndexOf
        qualifiedName: System.Collections.Generic.List(Of T).LastIndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.LastIndexOf(WizardWrx.FormatStringEngine.FormatItem,System.Int32,System.Int32)
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
        name: LastIndexOf
        nameWithType: List<FormatItem>.LastIndexOf
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.LastIndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
        name: LastIndexOf
        nameWithType: List(Of FormatItem).LastIndexOf
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).LastIndexOf
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.LastIndexOf(WizardWrx.FormatStringEngine.FormatItem,System.Int32,System.Int32)
  System.Collections.Generic.List`1.Remove(`0):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Remove(`0)
        name: Remove
        nameWithType: List<T>.Remove
        qualifiedName: System.Collections.Generic.List<T>.Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Remove(`0)
        name: Remove
        nameWithType: List(Of T).Remove
        qualifiedName: System.Collections.Generic.List(Of T).Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.Remove(`0)
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Remove(WizardWrx.FormatStringEngine.FormatItem):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Remove(`0)
        name: Remove
        nameWithType: List<FormatItem>.Remove
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Remove(`0)
        name: Remove
        nameWithType: List(Of FormatItem).Remove
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.Remove(`0)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Remove(WizardWrx.FormatStringEngine.FormatItem)
  System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
        name: IList.Remove
        nameWithType: List<T>.IList.Remove
        qualifiedName: System.Collections.Generic.List<T>.System.Collections.IList.Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
        name: System.Collections.IList.Remove
        nameWithType: List(Of T).System.Collections.IList.Remove
        qualifiedName: System.Collections.Generic.List(Of T).System.Collections.IList.Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#Remove(System.Object):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
        name: IList.Remove
        nameWithType: List<FormatItem>.IList.Remove
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.System.Collections.IList.Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
        name: System.Collections.IList.Remove
        nameWithType: List(Of FormatItem).System.Collections.IList.Remove
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).System.Collections.IList.Remove
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#Remove(System.Object)
  System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
        name: RemoveAll
        nameWithType: List<T>.RemoveAll
        qualifiedName: System.Collections.Generic.List<T>.RemoveAll
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
        name: RemoveAll
        nameWithType: List(Of T).RemoveAll
        qualifiedName: System.Collections.Generic.List(Of T).RemoveAll
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.RemoveAll(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
        name: RemoveAll
        nameWithType: List<FormatItem>.RemoveAll
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.RemoveAll
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
        name: RemoveAll
        nameWithType: List(Of FormatItem).RemoveAll
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).RemoveAll
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.RemoveAll(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  System.Collections.Generic.List`1.RemoveAt(System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.RemoveAt(System.Int32)
        name: RemoveAt
        nameWithType: List<T>.RemoveAt
        qualifiedName: System.Collections.Generic.List<T>.RemoveAt
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.RemoveAt(System.Int32)
        name: RemoveAt
        nameWithType: List(Of T).RemoveAt
        qualifiedName: System.Collections.Generic.List(Of T).RemoveAt
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.RemoveAt(System.Int32)
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.RemoveAt(System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.RemoveAt(System.Int32)
        name: RemoveAt
        nameWithType: List<FormatItem>.RemoveAt
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.RemoveAt
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.RemoveAt(System.Int32)
        name: RemoveAt
        nameWithType: List(Of FormatItem).RemoveAt
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).RemoveAt
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.RemoveAt(System.Int32)
  System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
        name: RemoveRange
        nameWithType: List<T>.RemoveRange
        qualifiedName: System.Collections.Generic.List<T>.RemoveRange
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
        name: RemoveRange
        nameWithType: List(Of T).RemoveRange
        qualifiedName: System.Collections.Generic.List(Of T).RemoveRange
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.RemoveRange(System.Int32,System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
        name: RemoveRange
        nameWithType: List<FormatItem>.RemoveRange
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.RemoveRange
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
        name: RemoveRange
        nameWithType: List(Of FormatItem).RemoveRange
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).RemoveRange
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.RemoveRange(System.Int32,System.Int32)
  System.Collections.Generic.List`1.Reverse:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Reverse
        name: Reverse
        nameWithType: List<T>.Reverse
        qualifiedName: System.Collections.Generic.List<T>.Reverse
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Reverse
        name: Reverse
        nameWithType: List(Of T).Reverse
        qualifiedName: System.Collections.Generic.List(Of T).Reverse
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.Reverse
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Reverse:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Reverse
        name: Reverse
        nameWithType: List<FormatItem>.Reverse
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.Reverse
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Reverse
        name: Reverse
        nameWithType: List(Of FormatItem).Reverse
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).Reverse
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.Reverse
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Reverse
  System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
        name: Reverse
        nameWithType: List<T>.Reverse
        qualifiedName: System.Collections.Generic.List<T>.Reverse
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
        name: Reverse
        nameWithType: List(Of T).Reverse
        qualifiedName: System.Collections.Generic.List(Of T).Reverse
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Reverse(System.Int32,System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
        name: Reverse
        nameWithType: List<FormatItem>.Reverse
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.Reverse
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
        name: Reverse
        nameWithType: List(Of FormatItem).Reverse
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).Reverse
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Reverse(System.Int32,System.Int32)
  System.Collections.Generic.List`1.Sort:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Sort
        name: Sort
        nameWithType: List<T>.Sort
        qualifiedName: System.Collections.Generic.List<T>.Sort
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Sort
        name: Sort
        nameWithType: List(Of T).Sort
        qualifiedName: System.Collections.Generic.List(Of T).Sort
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.Sort
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Sort:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Sort
        name: Sort
        nameWithType: List<FormatItem>.Sort
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.Sort
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Sort
        name: Sort
        nameWithType: List(Of FormatItem).Sort
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).Sort
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.Sort
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Sort
  System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
        name: Sort
        nameWithType: List<T>.Sort
        qualifiedName: System.Collections.Generic.List<T>.Sort
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IComparer`1
        name: IComparer
        nameWithType: IComparer
        qualifiedName: System.Collections.Generic.IComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
        name: Sort
        nameWithType: List(Of T).Sort
        qualifiedName: System.Collections.Generic.List(Of T).Sort
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IComparer`1
        name: IComparer
        nameWithType: IComparer
        qualifiedName: System.Collections.Generic.IComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Sort(System.Collections.Generic.IComparer{WizardWrx.FormatStringEngine.FormatItem})
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
        name: Sort
        nameWithType: List<FormatItem>.Sort
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.Sort
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IComparer`1
        name: IComparer
        nameWithType: IComparer
        qualifiedName: System.Collections.Generic.IComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
        name: Sort
        nameWithType: List(Of FormatItem).Sort
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).Sort
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IComparer`1
        name: IComparer
        nameWithType: IComparer
        qualifiedName: System.Collections.Generic.IComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Sort(System.Collections.Generic.IComparer{WizardWrx.FormatStringEngine.FormatItem})
  System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
        name: Sort
        nameWithType: List<T>.Sort
        qualifiedName: System.Collections.Generic.List<T>.Sort
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IComparer`1
        name: IComparer
        nameWithType: IComparer
        qualifiedName: System.Collections.Generic.IComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
        name: Sort
        nameWithType: List(Of T).Sort
        qualifiedName: System.Collections.Generic.List(Of T).Sort
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IComparer`1
        name: IComparer
        nameWithType: IComparer
        qualifiedName: System.Collections.Generic.IComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{WizardWrx.FormatStringEngine.FormatItem})
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
        name: Sort
        nameWithType: List<FormatItem>.Sort
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.Sort
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IComparer`1
        name: IComparer
        nameWithType: IComparer
        qualifiedName: System.Collections.Generic.IComparer
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
        name: Sort
        nameWithType: List(Of FormatItem).Sort
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).Sort
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IComparer`1
        name: IComparer
        nameWithType: IComparer
        qualifiedName: System.Collections.Generic.IComparer
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{WizardWrx.FormatStringEngine.FormatItem})
  System.Collections.Generic.List`1.Sort(System.Comparison{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
        name: Sort
        nameWithType: List<T>.Sort
        qualifiedName: System.Collections.Generic.List<T>.Sort
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Comparison`1
        name: Comparison
        nameWithType: Comparison
        qualifiedName: System.Comparison
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
        name: Sort
        nameWithType: List(Of T).Sort
        qualifiedName: System.Collections.Generic.List(Of T).Sort
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Comparison`1
        name: Comparison
        nameWithType: Comparison
        qualifiedName: System.Comparison
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Sort(System.Comparison{WizardWrx.FormatStringEngine.FormatItem})
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
        name: Sort
        nameWithType: List<FormatItem>.Sort
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.Sort
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Comparison`1
        name: Comparison
        nameWithType: Comparison
        qualifiedName: System.Comparison
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
        name: Sort
        nameWithType: List(Of FormatItem).Sort
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).Sort
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Comparison`1
        name: Comparison
        nameWithType: Comparison
        qualifiedName: System.Comparison
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Sort(System.Comparison{WizardWrx.FormatStringEngine.FormatItem})
  System.Collections.Generic.List`1.ToArray:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.ToArray
        name: ToArray
        nameWithType: List<T>.ToArray
        qualifiedName: System.Collections.Generic.List<T>.ToArray
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.ToArray
        name: ToArray
        nameWithType: List(Of T).ToArray
        qualifiedName: System.Collections.Generic.List(Of T).ToArray
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.ToArray
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.ToArray:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.ToArray
        name: ToArray
        nameWithType: List<FormatItem>.ToArray
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.ToArray
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.ToArray
        name: ToArray
        nameWithType: List(Of FormatItem).ToArray
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).ToArray
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.ToArray
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.ToArray
  System.Collections.Generic.List`1.TrimExcess:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.TrimExcess
        name: TrimExcess
        nameWithType: List<T>.TrimExcess
        qualifiedName: System.Collections.Generic.List<T>.TrimExcess
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.TrimExcess
        name: TrimExcess
        nameWithType: List(Of T).TrimExcess
        qualifiedName: System.Collections.Generic.List(Of T).TrimExcess
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.TrimExcess
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.TrimExcess:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.TrimExcess
        name: TrimExcess
        nameWithType: List<FormatItem>.TrimExcess
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.TrimExcess
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.TrimExcess
        name: TrimExcess
        nameWithType: List(Of FormatItem).TrimExcess
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).TrimExcess
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.TrimExcess
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.TrimExcess
  System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0}):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
        name: TrueForAll
        nameWithType: List<T>.TrueForAll
        qualifiedName: System.Collections.Generic.List<T>.TrueForAll
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
        name: TrueForAll
        nameWithType: List(Of T).TrueForAll
        qualifiedName: System.Collections.Generic.List(Of T).TrueForAll
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  ? System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.TrueForAll(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  : name:
      CSharp:
      - id: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
        name: TrueForAll
        nameWithType: List<FormatItem>.TrueForAll
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.TrueForAll
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
        name: TrueForAll
        nameWithType: List(Of FormatItem).TrueForAll
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).TrueForAll
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Predicate`1
        name: Predicate
        nameWithType: Predicate
        qualifiedName: System.Predicate
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: M:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.TrueForAll(System.Predicate{WizardWrx.FormatStringEngine.FormatItem})
  System.Collections.Generic.List`1.Capacity:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Capacity
        name: Capacity
        nameWithType: List<T>.Capacity
        qualifiedName: System.Collections.Generic.List<T>.Capacity
        isExternal: true
      VB:
      - id: System.Collections.Generic.List`1.Capacity
        name: Capacity
        nameWithType: List(Of T).Capacity
        qualifiedName: System.Collections.Generic.List(Of T).Capacity
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.List`1.Capacity
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Capacity:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Capacity
        name: Capacity
        nameWithType: List<FormatItem>.Capacity
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.Capacity
        isExternal: true
      VB:
      - id: System.Collections.Generic.List`1.Capacity
        name: Capacity
        nameWithType: List(Of FormatItem).Capacity
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).Capacity
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.List`1.Capacity
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: P:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Capacity
  System.Collections.Generic.List`1.Count:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Count
        name: Count
        nameWithType: List<T>.Count
        qualifiedName: System.Collections.Generic.List<T>.Count
        isExternal: true
      VB:
      - id: System.Collections.Generic.List`1.Count
        name: Count
        nameWithType: List(Of T).Count
        qualifiedName: System.Collections.Generic.List(Of T).Count
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.List`1.Count
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Count:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Count
        name: Count
        nameWithType: List<FormatItem>.Count
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.Count
        isExternal: true
      VB:
      - id: System.Collections.Generic.List`1.Count
        name: Count
        nameWithType: List(Of FormatItem).Count
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).Count
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.List`1.Count
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: P:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Count
  System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
        name: IList.IsFixedSize
        nameWithType: List<T>.IList.IsFixedSize
        qualifiedName: System.Collections.Generic.List<T>.System.Collections.IList.IsFixedSize
        isExternal: true
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
        name: System.Collections.IList.IsFixedSize
        nameWithType: List(Of T).System.Collections.IList.IsFixedSize
        qualifiedName: System.Collections.Generic.List(Of T).System.Collections.IList.IsFixedSize
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#IsFixedSize:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
        name: IList.IsFixedSize
        nameWithType: List<FormatItem>.IList.IsFixedSize
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.System.Collections.IList.IsFixedSize
        isExternal: true
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
        name: System.Collections.IList.IsFixedSize
        nameWithType: List(Of FormatItem).System.Collections.IList.IsFixedSize
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).System.Collections.IList.IsFixedSize
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: P:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#IsFixedSize
  System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
        name: ICollection<T>.IsReadOnly
        nameWithType: List<T>.ICollection<T>.IsReadOnly
        qualifiedName: System.Collections.Generic.List<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
        isExternal: true
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
        name: System.Collections.Generic.ICollection<T>.IsReadOnly
        nameWithType: List(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
        qualifiedName: System.Collections.Generic.List(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#Generic#ICollection{T}#IsReadOnly:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
        name: ICollection<FormatItem>.IsReadOnly
        nameWithType: List<FormatItem>.ICollection<FormatItem>.IsReadOnly
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.System.Collections.Generic.ICollection<WizardWrx.FormatStringEngine.FormatItem>.IsReadOnly
        isExternal: true
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
        name: System.Collections.Generic.ICollection<T>.IsReadOnly
        nameWithType: List(Of FormatItem).System.Collections.Generic.ICollection<T>.IsReadOnly
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).System.Collections.Generic.ICollection<T>.IsReadOnly
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: P:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#Generic#ICollection{T}#IsReadOnly
  System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
        name: IList.IsReadOnly
        nameWithType: List<T>.IList.IsReadOnly
        qualifiedName: System.Collections.Generic.List<T>.System.Collections.IList.IsReadOnly
        isExternal: true
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
        name: System.Collections.IList.IsReadOnly
        nameWithType: List(Of T).System.Collections.IList.IsReadOnly
        qualifiedName: System.Collections.Generic.List(Of T).System.Collections.IList.IsReadOnly
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#IsReadOnly:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
        name: IList.IsReadOnly
        nameWithType: List<FormatItem>.IList.IsReadOnly
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.System.Collections.IList.IsReadOnly
        isExternal: true
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
        name: System.Collections.IList.IsReadOnly
        nameWithType: List(Of FormatItem).System.Collections.IList.IsReadOnly
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).System.Collections.IList.IsReadOnly
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: P:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#IsReadOnly
  System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
        name: ICollection.IsSynchronized
        nameWithType: List<T>.ICollection.IsSynchronized
        qualifiedName: System.Collections.Generic.List<T>.System.Collections.ICollection.IsSynchronized
        isExternal: true
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
        name: System.Collections.ICollection.IsSynchronized
        nameWithType: List(Of T).System.Collections.ICollection.IsSynchronized
        qualifiedName: System.Collections.Generic.List(Of T).System.Collections.ICollection.IsSynchronized
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#ICollection#IsSynchronized:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
        name: ICollection.IsSynchronized
        nameWithType: List<FormatItem>.ICollection.IsSynchronized
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.System.Collections.ICollection.IsSynchronized
        isExternal: true
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
        name: System.Collections.ICollection.IsSynchronized
        nameWithType: List(Of FormatItem).System.Collections.ICollection.IsSynchronized
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).System.Collections.ICollection.IsSynchronized
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: P:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#ICollection#IsSynchronized
  System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
        name: ICollection.SyncRoot
        nameWithType: List<T>.ICollection.SyncRoot
        qualifiedName: System.Collections.Generic.List<T>.System.Collections.ICollection.SyncRoot
        isExternal: true
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
        name: System.Collections.ICollection.SyncRoot
        nameWithType: List(Of T).System.Collections.ICollection.SyncRoot
        qualifiedName: System.Collections.Generic.List(Of T).System.Collections.ICollection.SyncRoot
        isExternal: true
    isDefinition: true
    commentId: P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#ICollection#SyncRoot:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
        name: ICollection.SyncRoot
        nameWithType: List<FormatItem>.ICollection.SyncRoot
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.System.Collections.ICollection.SyncRoot
        isExternal: true
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
        name: System.Collections.ICollection.SyncRoot
        nameWithType: List(Of FormatItem).System.Collections.ICollection.SyncRoot
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).System.Collections.ICollection.SyncRoot
        isExternal: true
    isDefinition: false
    definition: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: P:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#ICollection#SyncRoot
  System.Collections.Generic.List`1.Item(System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Item(System.Int32)
        name: Item
        nameWithType: List<T>.Item
        qualifiedName: System.Collections.Generic.List<T>.Item
        isExternal: true
      - name: '['
        nameWithType: '['
        qualifiedName: '['
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ']'
        nameWithType: ']'
        qualifiedName: ']'
      VB:
      - id: System.Collections.Generic.List`1.Item(System.Int32)
        name: Item
        nameWithType: List(Of T).Item
        qualifiedName: System.Collections.Generic.List(Of T).Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: P:System.Collections.Generic.List`1.Item(System.Int32)
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Item(System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.Item(System.Int32)
        name: Item
        nameWithType: List<FormatItem>.Item
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.Item
        isExternal: true
      - name: '['
        nameWithType: '['
        qualifiedName: '['
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ']'
        nameWithType: ']'
        qualifiedName: ']'
      VB:
      - id: System.Collections.Generic.List`1.Item(System.Int32)
        name: Item
        nameWithType: List(Of FormatItem).Item
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.Item(System.Int32)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: P:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.Item(System.Int32)
  System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
        name: IList.Item
        nameWithType: List<T>.IList.Item
        qualifiedName: System.Collections.Generic.List<T>.System.Collections.IList.Item
        isExternal: true
      - name: '['
        nameWithType: '['
        qualifiedName: '['
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ']'
        nameWithType: ']'
        qualifiedName: ']'
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
        name: System.Collections.IList.Item
        nameWithType: List(Of T).System.Collections.IList.Item
        qualifiedName: System.Collections.Generic.List(Of T).System.Collections.IList.Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#Item(System.Int32):
    name:
      CSharp:
      - id: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
        name: IList.Item
        nameWithType: List<FormatItem>.IList.Item
        qualifiedName: System.Collections.Generic.List<WizardWrx.FormatStringEngine.FormatItem>.System.Collections.IList.Item
        isExternal: true
      - name: '['
        nameWithType: '['
        qualifiedName: '['
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ']'
        nameWithType: ']'
        qualifiedName: ']'
      VB:
      - id: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
        name: System.Collections.IList.Item
        nameWithType: List(Of FormatItem).System.Collections.IList.Item
        qualifiedName: System.Collections.Generic.List(Of WizardWrx.FormatStringEngine.FormatItem).System.Collections.IList.Item
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    parent: System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}
    commentId: P:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatItem}.System#Collections#IList#Item(System.Int32)
  System.Collections.Generic.IList`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IList`1
  System.Collections.Generic.IList{WizardWrx.FormatStringEngine.FormatItem}:
    name:
      CSharp:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IList`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IList{WizardWrx.FormatStringEngine.FormatItem}
  System.Collections.Generic.ICollection`1:
    name:
      CSharp:
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.ICollection`1
  System.Collections.Generic.ICollection{WizardWrx.FormatStringEngine.FormatItem}:
    name:
      CSharp:
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.ICollection`1
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.Generic.ICollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.ICollection`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.ICollection{WizardWrx.FormatStringEngine.FormatItem}
  System.Collections.Generic.IEnumerable`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerable`1
  System.Collections.Generic.IEnumerable{WizardWrx.FormatStringEngine.FormatItem}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatItem
        name: FormatItem
        nameWithType: FormatItem
        qualifiedName: WizardWrx.FormatStringEngine.FormatItem
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{WizardWrx.FormatStringEngine.FormatItem}
  System.Collections:
    name:
      CSharp:
      - name: System.Collections
        nameWithType: System.Collections
        qualifiedName: System.Collections
        isExternal: true
      VB:
      - name: System.Collections
        nameWithType: System.Collections
        qualifiedName: System.Collections
    isDefinition: true
    commentId: N:System.Collections
  System.Collections.IList:
    name:
      CSharp:
      - id: System.Collections.IList
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.IList
        isExternal: true
      VB:
      - id: System.Collections.IList
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.IList
        isExternal: true
    isDefinition: true
    parent: System.Collections
    commentId: T:System.Collections.IList
  System.Collections.ICollection:
    name:
      CSharp:
      - id: System.Collections.ICollection
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.ICollection
        isExternal: true
      VB:
      - id: System.Collections.ICollection
        name: ICollection
        nameWithType: ICollection
        qualifiedName: System.Collections.ICollection
        isExternal: true
    isDefinition: true
    parent: System.Collections
    commentId: T:System.Collections.ICollection
  System.Collections.IEnumerable:
    name:
      CSharp:
      - id: System.Collections.IEnumerable
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.IEnumerable
        isExternal: true
      VB:
      - id: System.Collections.IEnumerable
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.IEnumerable
        isExternal: true
    isDefinition: true
    parent: System.Collections
    commentId: T:System.Collections.IEnumerable
  WizardWrx.FormatStringEngine.FormatItemsCollection:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatItemsCollection
        name: FormatItemsCollection
        nameWithType: FormatItemsCollection
        qualifiedName: WizardWrx.FormatStringEngine.FormatItemsCollection
      VB:
      - id: WizardWrx.FormatStringEngine.FormatItemsCollection
        name: FormatItemsCollection
        nameWithType: FormatItemsCollection
        qualifiedName: WizardWrx.FormatStringEngine.FormatItemsCollection
    isDefinition: true
    parent: WizardWrx.FormatStringEngine
    commentId: T:WizardWrx.FormatStringEngine.FormatItemsCollection
  System.Char:
    name:
      CSharp:
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
      VB:
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Char
  WizardWrx.FormatStringEngine.FormatStringError.Split*:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatStringError.Split*
        name: Split
        nameWithType: FormatStringError.Split
        qualifiedName: WizardWrx.FormatStringEngine.FormatStringError.Split
      VB:
      - id: WizardWrx.FormatStringEngine.FormatStringError.Split*
        name: Split
        nameWithType: FormatStringError.Split
        qualifiedName: WizardWrx.FormatStringEngine.FormatStringError.Split
    isDefinition: true
    commentId: Overload:WizardWrx.FormatStringEngine.FormatStringError.Split
  WizardWrx.FormatStringEngine.FormatStringError.ToString*:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatStringError.ToString*
        name: ToString
        nameWithType: FormatStringError.ToString
        qualifiedName: WizardWrx.FormatStringEngine.FormatStringError.ToString
      VB:
      - id: WizardWrx.FormatStringEngine.FormatStringError.ToString*
        name: ToString
        nameWithType: FormatStringError.ToString
        qualifiedName: WizardWrx.FormatStringEngine.FormatStringError.ToString
    isDefinition: true
    commentId: Overload:WizardWrx.FormatStringEngine.FormatStringError.ToString
  WizardWrx.FormatStringEngine.FormatStringError:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatStringError
        name: FormatStringError
        nameWithType: FormatStringError
        qualifiedName: WizardWrx.FormatStringEngine.FormatStringError
      VB:
      - id: WizardWrx.FormatStringEngine.FormatStringError
        name: FormatStringError
        nameWithType: FormatStringError
        qualifiedName: WizardWrx.FormatStringEngine.FormatStringError
    isDefinition: true
    commentId: T:WizardWrx.FormatStringEngine.FormatStringError
  WizardWrx.FormatStringEngine.FormatStringParser.ESCAPED_ITEM_BEGIN:
    commentId: F:WizardWrx.FormatStringEngine.FormatStringParser.ESCAPED_ITEM_BEGIN
  WizardWrx.FormatStringEngine.FormatStringParser.ESCAPED_ITEM_END:
    commentId: F:WizardWrx.FormatStringEngine.FormatStringParser.ESCAPED_ITEM_END
  WizardWrx.FormatStringEngine.FormatStringParser.#ctor*:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatStringParser.#ctor*
        name: FormatStringParser
        nameWithType: FormatStringParser.FormatStringParser
        qualifiedName: WizardWrx.FormatStringEngine.FormatStringParser.FormatStringParser
      VB:
      - id: WizardWrx.FormatStringEngine.FormatStringParser.#ctor*
        name: FormatStringParser
        nameWithType: FormatStringParser.FormatStringParser
        qualifiedName: WizardWrx.FormatStringEngine.FormatStringParser.FormatStringParser
    isDefinition: true
    commentId: Overload:WizardWrx.FormatStringEngine.FormatStringParser.#ctor
  WizardWrx.FormatStringEngine.FormatStringParser.FormatItems*:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatStringParser.FormatItems*
        name: FormatItems
        nameWithType: FormatStringParser.FormatItems
        qualifiedName: WizardWrx.FormatStringEngine.FormatStringParser.FormatItems
      VB:
      - id: WizardWrx.FormatStringEngine.FormatStringParser.FormatItems*
        name: FormatItems
        nameWithType: FormatStringParser.FormatItems
        qualifiedName: WizardWrx.FormatStringEngine.FormatStringParser.FormatItems
    isDefinition: true
    commentId: Overload:WizardWrx.FormatStringEngine.FormatStringParser.FormatItems
  WizardWrx.FormatStringEngine.FormatStringParser.FormatString*:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatStringParser.FormatString*
        name: FormatString
        nameWithType: FormatStringParser.FormatString
        qualifiedName: WizardWrx.FormatStringEngine.FormatStringParser.FormatString
      VB:
      - id: WizardWrx.FormatStringEngine.FormatStringParser.FormatString*
        name: FormatString
        nameWithType: FormatStringParser.FormatString
        qualifiedName: WizardWrx.FormatStringEngine.FormatStringParser.FormatString
    isDefinition: true
    commentId: Overload:WizardWrx.FormatStringEngine.FormatStringParser.FormatString
  WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrorCount*:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrorCount*
        name: FormatStringErrorCount
        nameWithType: FormatStringParser.FormatStringErrorCount
        qualifiedName: WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrorCount
      VB:
      - id: WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrorCount*
        name: FormatStringErrorCount
        nameWithType: FormatStringParser.FormatStringErrorCount
        qualifiedName: WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrorCount
    isDefinition: true
    commentId: Overload:WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrorCount
  System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatStringError}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: WizardWrx.FormatStringEngine.FormatStringError
        name: FormatStringError
        nameWithType: FormatStringError
        qualifiedName: WizardWrx.FormatStringEngine.FormatStringError
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: WizardWrx.FormatStringEngine.FormatStringError
        name: FormatStringError
        nameWithType: FormatStringError
        qualifiedName: WizardWrx.FormatStringEngine.FormatStringError
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{WizardWrx.FormatStringEngine.FormatStringError}
  WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrors*:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrors*
        name: FormatStringErrors
        nameWithType: FormatStringParser.FormatStringErrors
        qualifiedName: WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrors
      VB:
      - id: WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrors*
        name: FormatStringErrors
        nameWithType: FormatStringParser.FormatStringErrors
        qualifiedName: WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrors
    isDefinition: true
    commentId: Overload:WizardWrx.FormatStringEngine.FormatStringParser.FormatStringErrors
  WizardWrx.FormatStringEngine.FormatStringParser.HighestFormatItemIndex*:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatStringParser.HighestFormatItemIndex*
        name: HighestFormatItemIndex
        nameWithType: FormatStringParser.HighestFormatItemIndex
        qualifiedName: WizardWrx.FormatStringEngine.FormatStringParser.HighestFormatItemIndex
      VB:
      - id: WizardWrx.FormatStringEngine.FormatStringParser.HighestFormatItemIndex*
        name: HighestFormatItemIndex
        nameWithType: FormatStringParser.HighestFormatItemIndex
        qualifiedName: WizardWrx.FormatStringEngine.FormatStringParser.HighestFormatItemIndex
    isDefinition: true
    commentId: Overload:WizardWrx.FormatStringEngine.FormatStringParser.HighestFormatItemIndex
  WizardWrx.FormatStringEngine.FormatStringParser:
    name:
      CSharp:
      - id: WizardWrx.FormatStringEngine.FormatStringParser
        name: FormatStringParser
        nameWithType: FormatStringParser
        qualifiedName: WizardWrx.FormatStringEngine.FormatStringParser
      VB:
      - id: WizardWrx.FormatStringEngine.FormatStringParser
        name: FormatStringParser
        nameWithType: FormatStringParser
        qualifiedName: WizardWrx.FormatStringEngine.FormatStringParser
    isDefinition: true
    commentId: T:WizardWrx.FormatStringEngine.FormatStringParser
