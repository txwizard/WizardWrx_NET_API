<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WizardWrx.ASCIIInfo</name>
    </assembly>
    <members>
        <member name="T:WizardWrx.ASCIICharacterDisplayInfo">
            <summary>
            Instances of this class represent individual ASCII characters. Since the
            NUL character is defined, and occupies the first element, the numeric 
            code that corresponds to a character maps directly to the corresponding
            element in this array.
            </summary>
            <example>
            The ASCII code for a space is 32. ASCIICharacterDisplayInfo[32], for C#,
            or ASCIICharacterDisplayInfo(32), for Visual Basic, returns the item for
            the space character.
            
            Likewise, the ASCII code for a horizontal TAB character is 9. Hence, the
            C# expression ASCIICharacterDisplayInfo[9] evaluates to the information
            about the TAB character. Likewise, ASCIICharacterDisplayInfo(9) does the
            same thing in Visual Basic.
            
            The following example comes from production code in the class library
            that motivated me to create this library.
            
                ASCIICharacterDisplayInfo [ ] asciiCharTbl = ASCII_Character_Display_Table.GetTheSingleInstance ( ).AllASCIICharacters;
                StringBuilder sbTheBadChar = new StringBuilder ( );
                sbTheBadChar.Append ( asciiCharTbl [ ( uint ) _chrBad ].DisplayText );
            
            Obviously, more things go into the message before it is returned to the
            calling routine.
            </example>
            <see cref="T:WizardWrx.ASCII_Character_Display_Table"/>
        </member>
        <member name="M:WizardWrx.ASCIICharacterDisplayInfo.#ctor">
            <summary>
            This constructor satisfies interfaces that require a default
            constructor. It is marked private because the assembly that owns all
            instances of this class uses one of the other two constructors.
            </summary>
        </member>
        <member name="M:WizardWrx.ASCIICharacterDisplayInfo.#ctor(System.UInt32)">
            <summary>
            Create an instance for a character for which the alternate display
            is undefined because it is either unnecessary or impractical.
            </summary>
            <param name="puintCode">
            The code is an unsigned integer between zero and 255.
            </param>
        </member>
        <member name="M:WizardWrx.ASCIICharacterDisplayInfo.#ctor(System.UInt32,System.String)">
            <summary>
            Create an instance for a character that has alternate display text.
            </summary>
            <param name="puintCode">
            The code is an unsigned integer between zero and 255.
            </param>
            <param name="pstrAlternateText">
            Specify alternate text to display in place of the actual character.
            </param>
        </member>
        <member name="M:WizardWrx.ASCIICharacterDisplayInfo.#ctor(System.UInt32,System.String,System.String)">
            <summary>
            Create an instance for a character that has alternate display text and/or a comment.
            </summary>
            <param name="puintCode">
            The code is an unsigned integer between zero and 255.
            </param>
            <param name="pstrAlternateText">
            Specify alternate text to display in place of the actual character.
            </param>
            <param name="pstrComment">
            Specify a comment to display next to the character or its display property.
            </param>
        </member>
        <member name="P:WizardWrx.ASCIICharacterDisplayInfo.ASCIICharacter">
            <summary>
            Gets the Unicode character represented by the code.
            </summary>
        </member>
        <member name="P:WizardWrx.ASCIICharacterDisplayInfo.AlternateText">
            <summary>
            Gets the alternate text, if one exists, or returns the empty string.
            </summary>
        </member>
        <member name="P:WizardWrx.ASCIICharacterDisplayInfo.Comment">
            <summary>
            Gets the associated comment, if one exists, or returns the empty
            string.
            </summary>
        </member>
        <member name="P:WizardWrx.ASCIICharacterDisplayInfo.Code">
            <summary>
            Gets the raw ASCII code, as an unsigned integer.
            </summary>
        </member>
        <member name="P:WizardWrx.ASCIICharacterDisplayInfo.CodeAsDecimal">
            <summary>
            Gets a string representation of the raw ASCII code, as a decimal
            number.
            </summary>
        </member>
        <member name="P:WizardWrx.ASCIICharacterDisplayInfo.CodeAsHexadecimal">
            <summary>
            Gets a string representation of the raw ASCII code, as a hexadecimal
            number.
            </summary>
        </member>
        <member name="P:WizardWrx.ASCIICharacterDisplayInfo.DisplayText">
            <summary>
            Gets the display text, regardless of source, from one place.
            </summary>
        </member>
        <member name="M:WizardWrx.ASCIICharacterDisplayInfo.ToString">
            <summary>
            Override ToString to render all three defined formats.
            </summary>
            <returns>
            The return value is a string containing a printable representation
            of the character, followed by its hexadecimal and decimal values,
            both enclosed in a single pair of parenethese.
            </returns>
        </member>
        <member name="M:WizardWrx.ASCIICharacterDisplayInfo.DisplayCharacterInfo(System.Char)">
            <summary>
            Create a ASCIICharacterDisplayInfo instance to represent a specified
            ASCII character, and call its ToString method to return all three
            representations of it (Printable, Hexadecimal, and Decimal, in that
            order.
            </summary>
            <param name="pchr">
            Specify the character for which to render the three representations.
            </param>
            <returns>
            Return the output of ToString on the ASCIICharacterDisplayInfo.
            </returns>
        </member>
        <member name="M:WizardWrx.ASCIICharacterDisplayInfo.InitializeInstance(System.UInt32,System.String,System.String)">
            <summary>
            All three public constructors use this routine to initialize everything.
            </summary>
            <param name="puintCode">
            The code is an unsigned integer between zero and 255.
            </param>
            <param name="pstrAlternateText">
            Specify alternate text to display in place of the actual character.
            </param>
            <param name="pstrComment">
            Specify a comment for optional display on listings.
            </param>
        </member>
        <member name="T:WizardWrx.ASCII_Character_Display_Table">
            <summary>
            Provide read only access to a table of ASCII characters and text to
            display for selected special characters.
            </summary>
            <example>
            The ASCII code for a space is 32. ASCIICharacterDisplayInfo[32], for C#,
            or ASCIICharacterDisplayInfo(32), for Visual Basic, returns the item for
            the space character.
            
            Likewise, the ASCII code for a horizontal TAB character is 9. Hence, the
            C# expression ASCIICharacterDisplayInfo[9] evaluates to the information
            about the TAB character. Likewise, ASCIICharacterDisplayInfo(9) does the
            same thing in Visual Basic.
            
            The following example comes from production code in the class library
            that motivated me to create this library.
            
                ASCIICharacterDisplayInfo [ ] asciiCharTbl = ASCII_Character_Display_Table.GetTheSingleInstance ( ).AllASCIICharacters;
                StringBuilder sbTheBadChar = new StringBuilder ( );
                sbTheBadChar.Append ( asciiCharTbl [ ( uint ) _chrBad ].DisplayText );
            
            Obviously, more things go into the message before it is returned to the
            calling routine.
            </example>
            <seealso cref="T:WizardWrx.ASCIICharacterDisplayInfo"/>
        </member>
        <member name="M:WizardWrx.ASCII_Character_Display_Table.GetTheSingleInstance">
            <summary>
            Gets a reference to the single ASCII_Character_Display_Table
            instance.
            </summary>
            <returns>
            The return value is a reference to the single instance of this class
            that is created in response to the first call to this method. Please
            see the remarks.
            </returns>
            <remarks>
            The example given under the help topic for this class shows you that
            you need not actually allocate storage for the instance, since what
            you really need is a copy of the ASCIICharacterDisplayInfo table,
            available through the read only AllASCIICharacters property, which
            can be assigned directly to an AllASCIICharacters array.
            
            To preserve its independence, this class uses the archaic Singleton
            implementation, rather than inherit from the abstract base class in
            WizardWrx.DllServices2.dll, although I could certainly fix that by
            linking the source code into this assembly. Since that creates an
            even more awkward dependency, and I don't want to put an actual copy
            in this source tree, I'll leave it alone. After all, this class is
            not exactly a high traffic property.
            </remarks>
        </member>
        <member name="P:WizardWrx.ASCII_Character_Display_Table.AllASCIICharacters">
            <summary>
            Gets the populated ASCIICharacterDisplayInfo array that is the sole
            public property of this class, which exists to ensure that exactly
            one instance of this table exists.
            </summary>
        </member>
        <member name="M:WizardWrx.ASCII_Character_Display_Table.InitialzeInstance">
            <summary>
            Since the class is a singleton, I separated the initializer from the
            constructor, as has been my custom.
            </summary>
        </member>
        <member name="M:WizardWrx.ASCII_Character_Display_Table.ParseDetailItem(System.Int32,System.Xml.XmlNode,System.UInt32,System.Int32)">
            <summary>
            Parse the detail items, of which two are currently defined, into the
            properties of a new ASCIICharacterDisplayInfo instance, which can be
            fully initialized by any of its three public constructors, depending
            on what properties have values.
            </summary>
            <param name="pintNextSlot">
            Argument pintNextSlot is the subscript of the _asciiTable element to
            store the current character.
            
            The _asciiTable array contains 256 elements, which happens to be the
            number of ASCII characters. Since characters are numbered from zero
            through 255, the ASCII code is the obvious index for the array.
            
            Instance member _asciiTable is ab array of ASCIICharacterDisplayInfo
            objects that is initialized with the details read from the XML 
            document in which they are stored. The XML document is stored in the
            DLL as n custom resource. 
            </param>
            <param name="pxmlCharacterInfo">
            Each character is represented as a XmlNode; this method processes the
            detail items on one such node.
            </param>
            <param name="puintNodeCode">
            This is the ASCII code, which the calling routine derives by parsing
            its first child node, which is required to store the ASCII code.
            
            Since this routine processes an embedded XML document, we can afford
            to impose a rigid schema.
            </param>
            <param name="pintChildRank">
            Each invocation of this method processes one child node on the XmlNode
            supplied as its pxmlCharacterInfo argument. The calling routine keeps
            track of the number of children, and calls it once for each child.
            </param>
        </member>
        <member name="F:WizardWrx.ASCII_Character_Display_Table._asciiTable">
            <summary>
            It all comes down to this little array.
            </summary>
        </member>
        <member name="T:WizardWrx.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WizardWrx.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WizardWrx.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WizardWrx.Properties.Resources.ERRMSG_INVALID_NODE_IN_ASCII_TABLE">
            <summary>
              Looks up a localized string similar to The following XML node is invalid: .
            </summary>
        </member>
    </members>
</doc>
