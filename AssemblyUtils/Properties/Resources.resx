<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="REPORT_FIELD_NAMES" xml:space="preserve">
    <value>FullName,AssemblyFileBaseName,AssemblyFileName,AssemblyGuidString,AssembyDirName,Comments,CompanyName,Culture,Description,FileCreationDate,FileModifiedDate,LegalCopyright,LegalTrademarks,ProductName,PublicKeyToken,RuntimeVersion,VersionString</value>
    <comment>This long string is the label row of a flat file report.</comment>
  </data>
  <data name="MSG_ASM_PROPS_ASSEMBLYFILEBASENAME" xml:space="preserve">
    <value>        AssemblyFileBaseName = {0}</value>
    <comment>Used by Util.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_ASSEMBLYFILENAME" xml:space="preserve">
    <value>        AssemblyFileName     = {0}{1}</value>
    <comment>Used by ReportGenerators.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_ASSEMBLYGUIDSTRING" xml:space="preserve">
    <value>        AssemblyGuidString   = {0}</value>
    <comment>Used by ReportGenerators.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_ASSEMBYDIRNAME" xml:space="preserve">
    <value>        AssembyDirName       = {0}</value>
    <comment>Used by ReportGenerators.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_COMMENTS" xml:space="preserve">
    <value>        Comments             = {0}{1}</value>
    <comment>Used by ReportGenerators.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_COMPANYNAME" xml:space="preserve">
    <value>        CompanyName          = {0}</value>
    <comment>Used by ReportGenerators.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_CULTURE" xml:space="preserve">
    <value>        Culture              = {0}</value>
    <comment>Used by ReportGenerators.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_DESCRIPTION" xml:space="preserve">
    <value>        Description          = {0}</value>
    <comment>Used by ReportGenerators.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_FILE_CREATION_DATE" xml:space="preserve">
    <value>        File Creation Date   = {0} ({1} UTC)</value>
    <comment>Used by ReportGenerators.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_FILE_MODIFIED_DATE" xml:space="preserve">
    <value>        File Modified Date   = {0} ({1} UTC)</value>
    <comment>Used by ReportGenerators.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_LEGALCOPYRIGHT" xml:space="preserve">
    <value>        LegalCopyright       = {0}</value>
    <comment>Used by ReportGenerators.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_LEGALTRADEMARKS" xml:space="preserve">
    <value>        LegalTrademarks      = {0}</value>
    <comment>Used by ReportGenerators.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_PRODUCTNAME" xml:space="preserve">
    <value>        ProductName          = {0}</value>
    <comment>Used by ReportGenerators.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_PUBLICKEYTOKEN" xml:space="preserve">
    <value>        PublicKeyToken       = {0}</value>
    <comment>Used by ReportGenerators.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_RUNTIME_VERSION" xml:space="preserve">
    <value>        Runtime Version      = {0}</value>
    <comment>Used by ReportGenerators.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_SELECTED_DLL_PROPS_BEGIN" xml:space="preserve">
    <value>    Selected properties of assembly {0} of {1}, {2}:{3}</value>
    <comment>Used by ReportGenerators.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_SELECTED_DLL_PROPS_END" xml:space="preserve">
    <value>{2}    End of selected properties of assembly {0} of {1}{2}</value>
    <comment>Used by ReportGenerators.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_PROPS_VERSIONSTRING" xml:space="preserve">
    <value>        VersionString        = {0} (per System.Diagnostics.FileVersionInfo.GetVersionInfo)</value>
    <comment>Used by ReportGenerators.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="MSG_ASM_DEPENDENTS_DETAILS_HEAD" xml:space="preserve">
    <value>Properties of direct dependent assemblies follow.{0}</value>
    <comment>The DisplayProperties method uses this template.</comment>
  </data>
  <data name="MSG_ASM_DEPENDENTS_DETAILS_TAIL" xml:space="preserve">
    <value>{1}End of list for Assembly {0}:{1}</value>
    <comment>The DisplayProperties method uses this template.</comment>
  </data>
  <data name="MSG_ASM_DEPENDENTS_LIST_HEADER" xml:space="preserve">
    <value>{2}Assembly {0} depends upon the following {1} assemblies:{2}</value>
    <comment>The EnumerateDependents method uses this template.</comment>
  </data>
  <data name="MSG_ASM_DEPENDENTS_LIST_TAIL" xml:space="preserve">
    <value>{1}End of list for Assembly {0}:{1}</value>
    <comment>The EnumerateDependents method uses this template.</comment>
  </data>
  <data name="DEPENDENT_ASSEMBLYINFO_TOSTRING_TEMPLATE" xml:space="preserve">
    <value>{{{0} (FullName = {1}, IsLoaded = {2})}}</value>
    <comment>The ToString method override on DependentAssemblyInfo instances formats its output from this template.</comment>
  </data>
  <data name="MSG_PRIVATE_DOMAIN_NAME_TEMPLATE" xml:space="preserve">
    <value>ReflectedAssemblyContainer for Assembly {0}"</value>
    <comment>DependentAssemblyInfo instance method LoadForInspection constructs a friendly name for a private domain into which it temporarily loads assemblies for inspection.</comment>
  </data>
  <data name="MSG_GETSUBSYST_FILENAME_POINTER_EMPTY_STRING" xml:space="preserve">
    <value>The specified file name pointer is the empty string.</value>
    <comment>The file pointer is the empty string.</comment>
  </data>
  <data name="MSG_GETSUBSYST_FILE_NOT_FOUND" xml:space="preserve">
    <value>The specified file, {1}{0}{1}, cannot be found.</value>
    <comment>The specified file cannot be found or is inaccessible in the current security context.</comment>
  </data>
  <data name="MSG_GETSUBSYST_FILE_READ_ERROR" xml:space="preserve">
    <value>An I/O error occurred while reading input file {1}{2}Exception type: {0}{2}Additional details are in the inner exception.</value>
    <comment>Template for Exception thrown to send an inner IOException exception up the call stack.</comment>
  </data>
  <data name="MSG_GETSUBSYST_FILE_READ_SHORT" xml:space="preserve">
    <value>An I/O error occurred while reading input file {0}{3}Only {1} of the expected {2} bytes were read.</value>
    <comment>Template for Exception thrown to report a fiel read that returned fewe than the expected number of bytes.</comment>
  </data>
  <data name="MSG_GETSUBSYST_FILE_TOO_SMALL" xml:space="preserve">
    <value>The specified file, {1}{0}{1}, is too short to be a valid Portable Executable.{4}Actual File Size (bytes) = {2:N0}{4}Minimum Size of PE File  = {3:N0}{4}</value>
    <comment>The text is self explanatory.</comment>
  </data>
  <data name="MSG_GETSUBSYST_GENERAL_EXCEPTION" xml:space="preserve">
    <value>An {0} exception was raised by the Microsoft .NET runtime engine while processing input file {1}.{2}Additional details are in the inner exception.</value>
    <comment>Template for Exception thrown by the Microsoft .NET runtime engine, to send it up the call stack wrapped in a generic Exception..</comment>
  </data>
  <data name="MSG_GETSUBSYST_NO_MAGIC" xml:space="preserve">
    <value>The system cannot find the magic WORD in file {0}.</value>
    <comment>The magic WORD that should be the first two bytes of the file is invalid.</comment>
  </data>
  <data name="MSG_GETSUBSYST_NO_NT_MAGIC" xml:space="preserve">
    <value>The system cannot find the NT header magic DWORD in file {0}.</value>
    <comment>The NTHEADER block signature DWORD is missing.</comment>
  </data>
  <data name="MSG_GETSUBSYST_NO_NT_SIGNATURE" xml:space="preserve">
    <value>The NT header block pointer is invalid in file {0}{2}Pointer value = 0x{1:x8} ({1:N0} decimal.)</value>
    <comment>The NTHEADER block pointer is invalid. The offset isw reported first in hexadecimal representation, then in decimal representation.</comment>
  </data>
  <data name="MSG_GETSUBSYST_NULL_FILENAME_POINTER" xml:space="preserve">
    <value>The specified file name pointer is invalid (NULL).</value>
    <comment>The file pointer is a null reference.</comment>
  </data>
  <data name="MSG_IMAGE_SUBSYSTEM_NATIVE" xml:space="preserve">
    <value>Native</value>
    <comment>ImageSubystemID = 1, Short Name</comment>
  </data>
  <data name="MSG_IMAGE_SUBSYSTEM_NATIVE_LONG" xml:space="preserve">
    <value>Image doesn't require a subsystem.</value>
    <comment>ImageSubystemID = 1, Long Name</comment>
  </data>
  <data name="MSG_IMAGE_SUBSYSTEM_NATIVE_WINDOWS" xml:space="preserve">
    <value>Native Win9x driver</value>
    <comment>ImageSubystemID = 8, Short Name</comment>
  </data>
  <data name="MSG_IMAGE_SUBSYSTEM_NATIVE_WINDOWS_LONG" xml:space="preserve">
    <value>Image is a native Win9x driver.</value>
    <comment>ImageSubystemID = 8, Long Name</comment>
  </data>
  <data name="MSG_IMAGE_SUBSYSTEM_OS2_CUI" xml:space="preserve">
    <value>OS/2 character</value>
    <comment>ImageSubystemID = 5, Short Name</comment>
  </data>
  <data name="MSG_IMAGE_SUBSYSTEM_OS2_CUI_LONG" xml:space="preserve">
    <value>Image runs in the OS/2 character subsystem.</value>
    <comment>ImageSubystemID = 5, Long Name</comment>
  </data>
  <data name="MSG_IMAGE_SUBSYSTEM_POSIX_CUI" xml:space="preserve">
    <value>Posix character</value>
    <comment>ImageSubystemID = 7, Short Name</comment>
  </data>
  <data name="MSG_IMAGE_SUBSYSTEM_POSIX_CUI_LONG" xml:space="preserve">
    <value>Image runs in the Posix character subsystem.</value>
    <comment>ImageSubystemID = 7, Long Name</comment>
  </data>
  <data name="MSG_IMAGE_SUBSYSTEM_UNKNOWN" xml:space="preserve">
    <value>Unknown</value>
    <comment>ImageSubystemID = 0, Short Name</comment>
  </data>
  <data name="MSG_IMAGE_SUBSYSTEM_UNKNOWN_LONG" xml:space="preserve">
    <value>Unknown subsystem.</value>
    <comment>ImageSubystemID = 0, Long Name</comment>
  </data>
  <data name="MSG_IMAGE_SUBSYSTEM_WINDOWS_CE_GUI" xml:space="preserve">
    <value>Windows CE</value>
    <comment>ImageSubystemID = 9, Short Name</comment>
  </data>
  <data name="MSG_IMAGE_SUBSYSTEM_WINDOWS_CE_GUI_LONG" xml:space="preserve">
    <value>Image runs in the Windows CE subsystem.</value>
    <comment>ImageSubystemID = 9, Long Name</comment>
  </data>
  <data name="MSG_IMAGE_SUBSYSTEM_WINDOWS_CUI" xml:space="preserve">
    <value>Windows character</value>
    <comment>ImageSubystemID = 3, Short Name</comment>
  </data>
  <data name="MSG_IMAGE_SUBSYSTEM_WINDOWS_CUI_LONG" xml:space="preserve">
    <value>Image runs in the Windows character subsystem.</value>
    <comment>ImageSubystemID = 3, Long Name</comment>
  </data>
  <data name="MSG_IMAGE_SUBSYSTEM_WINDOWS_GUI" xml:space="preserve">
    <value>Windows GUI</value>
    <comment>ImageSubystemID = 2, Short Name</comment>
  </data>
  <data name="MSG_IMAGE_SUBSYSTEM_WINDOWS_GUI_LONG" xml:space="preserve">
    <value>Image runs in the Windows GUI subsystem.</value>
    <comment>ImageSubystemID = 2, Long Name</comment>
  </data>
  <data name="MSG_UNSUPPORTED_PE_SUBSYSTEM" xml:space="preserve">
    <value>Only assemblies that run in the character mode subsystem are supported.{2}The subsytem ID of the entry assembly is {0} ({1}).</value>
    <comment>The StreamStateInfo constructor formats an exception when the entry assembly is anything other than a console mode assembly.</comment>
  </data>
  <data name="MSG_XLATE_SUBSYST_INVALID_ID" xml:space="preserve">
    <value>The subsystem ID must be greater than zero and less than ten.</value>
    <comment>The PESubsystemInfo.GetPESubsystemDescription routine uses this template to report a subsystem ID value that is out of range, and probablyy roignated somewhere other than PESubsystemInfo.GetPESubsystemDescription.</comment>
  </data>
  <data name="PESUBSYSTEMINFO_TOSTRING_TEMPLATE" xml:space="preserve">
    <value>{{{0} (Subsystem ID = {1} ({2})}}</value>
    <comment>The PeSubsystemInfo ToString override uses this template.</comment>
  </data>
  <data name="MSG_RESOURCE_LIST_BASENAME" xml:space="preserve">
    <value>    Location   = {0}</value>
    <comment>ListResourcesInAssemblyByName next lists the basename of the resource.</comment>
  </data>
  <data name="MSG_RESOURCE_LIST_FQNAME" xml:space="preserve">
    <value>Assembly Name  = {0}{1}</value>
    <comment>ListResourcesInAssemblyByName opens its report with this message.</comment>
  </data>
  <data name="MSG_RESOURCE_LIST_ITEM_COUNT" xml:space="preserve">
    <value>    # of Items = {0}{1}</value>
    <comment>ListResourcesInAssemblyByName next shows the number of resources defined in the assembly, which are about to be listed.</comment>
  </data>
  <data name="MSG_RESOURCE_LIST_ITEM_DETAIL" xml:space="preserve">
    <value>    {0} # {1}: Name = {2}, Value = {3}</value>
    <comment>Finally, ListResourcesInAssemblyByName lists each resource by name.</comment>
  </data>
  <data name="MSG_RESOURCE_LIST_NAMED_ITEM" xml:space="preserve">
    <value>        Embedded Resource # {0}: {1}</value>
    <comment>ListResourcesInAssemblyByName uses this template to display the name of a named resource. Usually, there is one, at most, but I have assemblies that contain as many as three embedded resourc3es.</comment>
  </data>
  <data name="MSG_RESOURCE_LIST_NAMES_END" xml:space="preserve">
    <value>{0}    End of list{0}</value>
    <comment>ListResourcesInAssemblyByName uses this template to format a message when it has displayed the name of the last embedded resource.</comment>
  </data>
  <data name="MSG_RESOURCE_LIST_NONE" xml:space="preserve">
    <value>The specified assembly contains no embedded resources of any kind.</value>
  </data>
  <data name="MSG_RESOURCE_LIST_NO_STRINGS" xml:space="preserve">
    <value>The speicifed assembly contains no embedded strings resources.</value>
  </data>
  <data name="MSG_ASM_PROPS_ASSEMBLYVERSION" xml:space="preserve">
    <value>        AssemblyVersion      = {0} (per AssemblyName.GetAssemblyName)</value>
    <comment>Used by ReportGenerators.ShowKeyAssemblyProperties Method</comment>
  </data>
  <data name="RESOURCE_REPORT_LABELS" xml:space="preserve">
    <value>ItemNbr\tName\tValue</value>
    <comment>Static method ListResourcesInAssemblyByName generates the label row for a tab delimited report file from this template.</comment>
  </data>
  <data name="ATTRIBUTE_SHORT_NAME_COMPANY" xml:space="preserve">
    <value>Company</value>
    <comment>This string maps to the System.Reflection.AssemblyCompanyAttribute Assembly Custom Attribute. It is used internally by GetStartupAssemblyVersionInfo.</comment>
  </data>
  <data name="ATTRIBUTE_SHORT_NAME_COPYRIGHT" xml:space="preserve">
    <value>Copyright</value>
    <comment>This string maps to the System.Reflection.AssemblyCopyrightAttribute Assembly Custom Attribute. It is used internally by GetStartupAssemblyVersionInfo.</comment>
  </data>
  <data name="ATTRIBUTE_SHORT_NAME_DESCRIPTION" xml:space="preserve">
    <value>Description</value>
    <comment>This string maps to the System.Reflection.AssemblyDescriptionAttribute Assembly Custom Attribute. It is used internally by GetStartupAssemblyVersionInfo.</comment>
  </data>
  <data name="ATTRIBUTE_SHORT_NAME_PRODUCT" xml:space="preserve">
    <value>Product</value>
    <comment>This string maps to the System.Reflection.AssemblyProductAttribute Assembly Custom Attribute. It is used internally by GetStartupAssemblyVersionInfo.</comment>
  </data>
  <data name="ATTRIBUTE_SHORT_NAME_TITLE" xml:space="preserve">
    <value>Title</value>
    <comment>This string maps to the System.Reflection.AssemblyTitleAttribute Assembly Custom Attribute. It is used internally by GetStartupAssemblyVersionInfo.</comment>
  </data>
  <data name="ATTRIBUTE_SHORT_NAME_TRADEMARK" xml:space="preserve">
    <value>Trademark</value>
    <comment>This string maps to the System.Reflection.AssemblyTrademarkAttribute Assembly Custom Attribute. It is used internally by GetStartupAssemblyVersionInfo.</comment>
  </data>
  <data name="ATTRIBUTE_SHORT_NAME_CULTURE" xml:space="preserve">
    <value>Culture</value>
    <comment>This string maps to the System.Reflection.AssemblyCultureAttribute Assembly Custom Attribute. It is used internally by GetStartupAssemblyVersionInfo.</comment>
  </data>
  <data name="ATTRIBUTE_SHORT_NAME_FILEVERSION" xml:space="preserve">
    <value>FileVersion</value>
    <comment>This string maps to the System.Reflection.AssemblyFileVersionAttribute Assembly Custom Attribute. It is used internally by GetStartupAssemblyVersionInfo.</comment>
  </data>
  <data name="ATTRIBUTE_SHORT_NAME_VERSION" xml:space="preserve">
    <value>Version</value>
    <comment>This string maps to the System.Reflection.AssemblyVersionAttribute Assembly Custom Attribute. It is used internally by GetStartupAssemblyVersionInfo.</comment>
  </data>
  <data name="ATTRIBUTE_SHORT_NAME_ASSEMBLY_GUID" xml:space="preserve">
    <value>AssemblyGUID</value>
    <comment>This string maps to the System.Runtime.InteropServices.GuidAttribute Assembly Custom Attribute. It is used internally by GetStartupAssemblyVersionInfo. Note the different namespace.</comment>
  </data>
</root>