<?xml version="1.0" encoding="utf-8"?>
<!--
    ============================================================================
    Project Name:       ConsoleStreams.csproj

    Project Abstract:   Instances of the classes exported by this library can
                        query and manipulate the three standard console streams.

    Remarks:            This library requires the Microsoft .NET Framework 3.5,
                        Client Profile, or newer.

                        As it applies to the Roslyn compiler, the Deterministic
                        switch implements determinism in a very narrow context,
                        which affects only the versioning of the generated PE
                        file in which the assembly is stored.

                        This switch is relatively new, and its inclusion in the
                        default generated project skeleton appears to be recent.

                        For further details, please see the first article cited
                        in the References section that follows.

    References:         1)  Deterministic builds in Roslyn
                            http://blog.paranoidcoding.com/2016/04/05/deterministic-builds-in-roslyn.html

                        2)  /deterministic switch for msbuild does not work
                            https://stackoverflow.com/questions/39657709/deterministic-switch-for-msbuild-does-not-work

    ============================================================================
    Revision History
    ============================================================================

    Date       By  Description
    ========== === =============================================================
    2020/09/20 DAG This is the last fully machine-generated version.

    2020/10/17 DAG Define custom task NuGetPackageNameFixup, and add tasks to
                   build a package that uses SemVer version numbering and push
                   it to the NuGet repository, and add the new targets required
                   to publish NuGet packages.

                   Define he following MSBuild macros:

                   		PackageDir
                   		AllowedOutputExtensionsInPackageBuildOutputFolder
                   		SolutionPackageDir

    2020/10/18 DAG Add -Source nuget.org to NuGet Puse command line.

    2021/01/30 DAG Reinstate wwBldNbrMgr.

      2022/04/24 DAG 1) Define a new UsingTask, NuGetPackagePublishDecision, and
                        use it in a new PublishIfNew target that runs as the
                        AfterBuild target so that its output can prevent the
                        Package and Publish targets executing.

                     2) Move everything involved with NuGet package management
                        into a new WizardWrx_NuGet_Packages Targets file, which
                        is imported (and processed) last.
    ============================================================================
-->

<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />

  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{6CFFB889-9457-4BFA-9EFB-614118885760}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>WizardWrx.DLLConfigurationManager</RootNamespace>
    <AssemblyName>WizardWrx.DLLConfigurationManager</AssemblyName>
    <TargetFrameworkVersion>v3.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <TargetFrameworkProfile>Client</TargetFrameworkProfile>
    <!-- 2020-10-17 01:27:48 - DAG - Add the Deterministic compiler switch, which goes well with SemVer version numbering. -->
    <Deterministic>true</Deterministic>
    <!-- 2020-10-17 01:27:48 - DAG - Added for NuGet package builder -->
    <PackageDir>Package</PackageDir>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>.pdb$;(AllowedOutputExtensionsInPackageBuildOutputFolder)</AllowedOutputExtensionsInPackageBuildOutputFolder>
    <!-- 2020-10-17 01:27:48 - DAG - Define SolutionPackageDir, which points to the local NuGet package directory shared by the entire solution. -->
    <SolutionPackageDir>$(ProjectDir)..\packages</SolutionPackageDir>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <DocumentationFile>bin\Debug\Wizardwrx.DLLConfigurationManager.xml</DocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <DocumentationFile>bin\Release\Wizardwrx.DLLConfigurationManager.XML</DocumentationFile>
  </PropertyGroup>

  <!--
    2015/06/09 DAG Add the following, per thread message that begins, "An
	               alternative that is working for me so far is to add the
	               following to the project file:"

	               Reference: "Conditional Compilation and Framework Targets," thread at
                              http://stackoverflow.com/questions/2923210/conditional-compilation-and-framework-targets
  -->
  <PropertyGroup>
    <DefineConstants Condition=" !$(DefineConstants.Contains(';NET')) ">$(DefineConstants);$(TargetFrameworkVersion.Replace("v", "NET").Replace(".", ""))</DefineConstants>
    <DefineConstants Condition=" $(DefineConstants.Contains(';NET')) ">$(DefineConstants.Remove($(DefineConstants.LastIndexOf(";NET"))));$(TargetFrameworkVersion.Replace("v", "NET").Replace(".", ""))</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.configuration" />
  </ItemGroup>

  <ItemGroup>
    <Compile Include="..\ProductAssemblyInfo.cs">
      <Link>Properties\ProductAssemblyInfo.cs</Link>
    </Compile>
    <Compile Include="ExceptionLogger.cs" />
    <Compile Include="IniFileReader.cs" />
    <Compile Include="StateManager.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>PublicResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
      <SubType>Designer</SubType>
    </EmbeddedResource>
  </ItemGroup>

  <ItemGroup>
    <None Include="WizardWrx.DLLConfigurationManager.dll.config">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\AssemblyUtils\AssemblyUtils.csproj">
      <Project>{147d0ab7-a13a-4374-9011-a5584ae3a533}</Project>
      <Name>AssemblyUtils</Name>
    </ProjectReference>
    <ProjectReference Include="..\Common\Common.csproj">
      <Project>{c1fb48d6-4a54-4424-bca1-4777f3aae2df}</Project>
      <Name>Common</Name>
    </ProjectReference>
    <ProjectReference Include="..\ConsoleStreams\ConsoleStreams.csproj">
      <Project>{714f5bee-4663-4b0c-8865-8a2165bf6bf2}</Project>
      <Name>ConsoleStreams</Name>
    </ProjectReference>
    <ProjectReference Include="..\Core\Core.csproj">
      <Project>{b5282e82-d211-4bea-bebd-b2cc6e45bf5c}</Project>
      <Name>Core</Name>
    </ProjectReference>
  </ItemGroup>

  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />

  <!-- To modify your build process, add your task inside one of the targets below and uncomment it.
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->

  <!-- To modify your build process, add your task inside one of the targets below and uncomment it.  -->
  <PropertyGroup>
    <PreBuildEvent>wwBldNbrMgr.exe "$(ProjectDir) "</PreBuildEvent>
  </PropertyGroup>

  <PropertyGroup>
    <PostBuildEvent>wwBldNbrMgr.exe -r "-p$(ProjectDir) " "-t$(TargetPath)"</PostBuildEvent>
  </PropertyGroup>

  <Import Project="$(Custom_MSBuild_Targets)\WizardWrx_NuGet_Packages.TARGETS" Condition="Exists('$(Custom_MSBuild_Targets)\WizardWrx_NuGet_Packages.TARGETS')" />
</Project>