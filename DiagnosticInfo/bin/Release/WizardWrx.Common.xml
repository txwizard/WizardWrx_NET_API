<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WizardWrx.Common</name>
    </assembly>
    <members>
        <member name="T:WizardWrx.ArrayInfo">
            <summary>
            This class organizes constants and routines for working with arrays. The
            constants are mostly synonyms for constants that exist in other classes
            and assemblies.
            
            Since static classes are implicitly sealed, this class cannot be inherited.
            </summary>
            <remarks>
            For ease of access, I promoted the classes that expose only constants to
            the root of the WizardWrx namespace.
            </remarks>
            <seealso cref="T:WizardWrx.ListInfo"/>
            <seealso cref="T:WizardWrx.MagicNumbers"/>
            <seealso cref="T:WizardWrx.PathPositions"/>
            <seealso cref="T:WizardWrx.SpecialCharacters"/>
        </member>
        <member name="F:WizardWrx.ArrayInfo.ARRAY_FIRST_ELEMENT">
            <summary>
            Since array subscripts start at zero, the first element of any array
            is zero. Since the same holds for most things that go into square
            brackets or are called some kind of index, this constant works as
            well with indexes.
            </summary>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_IS_EMPTY"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_INVALID_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_SECOND_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.INDEX_FROM_ORDINAL"/>
            <seealso cref="F:WizardWrx.ArrayInfo.NEXT_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ORDINAL_FROM_INDEX"/>
        </member>
        <member name="F:WizardWrx.ArrayInfo.ARRAY_IS_EMPTY">
            <summary>
            The Length and LongLength properties of an array return zero
            (ARRAY_IS_EMPTY) when the array is empty.
            </summary>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_FIRST_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_INVALID_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_SECOND_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.INDEX_FROM_ORDINAL"/>
            <seealso cref="F:WizardWrx.ArrayInfo.NEXT_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ORDINAL_FROM_INDEX"/>
        </member>
        <member name="F:WizardWrx.ArrayInfo.ARRAY_INVALID_INDEX">
            <summary>
            It follows from the fact that array indices count from zero that
            anything less is invalid.
            </summary>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_FIRST_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_IS_EMPTY"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_SECOND_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.INDEX_FROM_ORDINAL"/>
            <seealso cref="F:WizardWrx.ArrayInfo.NEXT_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ORDINAL_FROM_INDEX"/>
        </member>
        <member name="F:WizardWrx.ArrayInfo.ARRAY_SECOND_ELEMENT">
            <summary>
            There is an amazing number of situations that require a refeerence
            to the second element of an array or list.
            </summary>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_FIRST_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_IS_EMPTY"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_INVALID_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.INDEX_FROM_ORDINAL"/>
            <seealso cref="F:WizardWrx.ArrayInfo.NEXT_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ORDINAL_FROM_INDEX"/>
        </member>
        <member name="F:WizardWrx.ArrayInfo.INDEX_FROM_ORDINAL">
            <summary>
            If ORDINAL_FROM_INDEX is +1, then its inverse should be -1. Thus,
            both operations are additions, which are typically a tad faster,
            since they don't have to manage a Carry flag.
            </summary>
            <seealso cref="F:WizardWrx.ArrayInfo.ORDINAL_FROM_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_FIRST_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_IS_EMPTY"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_INVALID_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_SECOND_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.NEXT_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ORDINAL_FROM_INDEX"/>
        </member>
        <member name="F:WizardWrx.ArrayInfo.NEXT_INDEX">
            <summary>
            The next index is plus one, which is ambiguous, at best, in code
            listings.
            </summary>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_FIRST_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_IS_EMPTY"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_INVALID_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_SECOND_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.INDEX_FROM_ORDINAL"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ORDINAL_FROM_INDEX"/>
        </member>
        <member name="F:WizardWrx.ArrayInfo.ORDINAL_FROM_INDEX">
            <summary>
            This grain of syntactic sugar is used in OrdinalFromIndex and made
            visible as documentation and for coding similar math inline when
            space permits.
            </summary>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_FIRST_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_IS_EMPTY"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_INVALID_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_SECOND_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.INDEX_FROM_ORDINAL"/>
            <seealso cref="F:WizardWrx.ArrayInfo.NEXT_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.INDEX_FROM_ORDINAL"/>
        </member>
        <member name="M:WizardWrx.ArrayInfo.IndexFromOrdinal(System.Int32)">
            <summary>
            Given an ordinal, such as an array element count, return the
            equivalent index (subscript) value.
            </summary>
            <param name="pintOrdinal">
            Specify the ordinal to convert.
            </param>
            <returns>
            The return value is the index equivalent to pintIndex.
            </returns>
            <remarks>
            Mathematically, the index is pintOrdinal - ORDINAL_FROM_INDEX.
            Hence, this routine is syntactic sugar, which a good optimizer will
            optimize away by generating the code inline.
            </remarks>
            <seealso cref="M:WizardWrx.ArrayInfo.OrdinalFromIndex(System.Int32)"/>
        </member>
        <member name="M:WizardWrx.ArrayInfo.OrdinalFromIndex(System.Int32)">
            <summary>
            Given an index, such as an array subscript, return the equivalent
            ordinal value.
            </summary>
            <param name="pintIndex">
            Specify the index to convert.
            </param>
            <returns>
            The return value is the ordinal equivalent to pintIndex.
            </returns>
            <remarks>
            Mathematically, the ordinal is pintIndex + ORDINAL_FROM_INDEX.
            Hence, this routine is syntactic sugar, which a good optimizer will
            optimize away by generating the code inline.
            </remarks>
            <seealso cref="M:WizardWrx.ArrayInfo.IndexFromOrdinal(System.Int32)"/>
        </member>
        <member name="T:WizardWrx.CSVFileInfo">
            <summary>
            Use these constants and service routines to simplify working with CSV
            type files.
            </summary>
            <seealso cref="T:WizardWrx.ArrayInfo"/>
            <seealso cref="T:WizardWrx.ListInfo"/>
            <seealso cref="T:WizardWrx.MagicNumbers"/>
        </member>
        <member name="F:WizardWrx.CSVFileInfo.EMPTY_FILE">
            <summary>
            The Length property of a file returns this value to indicate that a
            file is absolutely empty.
            </summary>
            <seealso cref="F:WizardWrx.CSVFileInfo.FIRST_RECORD"/>
            <seealso cref="F:WizardWrx.CSVFileInfo.LABEL_ROW"/>
            <seealso cref="M:WizardWrx.CSVFileInfo.RecordCount(System.String[])"/>
            <seealso cref="M:WizardWrx.CSVFileInfo.LongRecordCount(System.String[])"/>
            <seealso cref="F:WizardWrx.ListInfo.LIST_IS_EMPTY"/>
        </member>
        <member name="F:WizardWrx.CSVFileInfo.FIRST_RECORD">
            <summary>
            When you use Syatem.IO.File.ReadAllLines to read an entire file into
            an array of strings, this constant refers to the first data row of a
            labeled CSV file.
            </summary>
            <seealso cref="F:WizardWrx.CSVFileInfo.EMPTY_FILE"/>
            <seealso cref="F:WizardWrx.CSVFileInfo.LABEL_ROW"/>
            <seealso cref="M:WizardWrx.CSVFileInfo.RecordCount(System.String[])"/>
            <seealso cref="M:WizardWrx.CSVFileInfo.LongRecordCount(System.String[])"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_SECOND_ELEMENT"/>
        </member>
        <member name="F:WizardWrx.CSVFileInfo.LABEL_ROW">
            <summary>
            When you use Syatem.IO.File.ReadAllLines to read an entire file into
            an array of strings, this constant refers to the label row of a
            labeled CSV file.
            </summary>
            <seealso cref="F:WizardWrx.CSVFileInfo.EMPTY_FILE"/>
            <seealso cref="F:WizardWrx.CSVFileInfo.FIRST_RECORD"/>
            <seealso cref="M:WizardWrx.CSVFileInfo.RecordCount(System.String[])"/>
            <seealso cref="M:WizardWrx.CSVFileInfo.LongRecordCount(System.String[])"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_FIRST_ELEMENT"/>
        </member>
        <member name="M:WizardWrx.CSVFileInfo.RecordCount(System.String[])">
            <summary>
            Derive the record count from the length of an array of records
            loaded from a labeled CSV type file.
            </summary>
            <param name="pastrWholeFile">
            Array populated with all records read from a text file
            
            Please see the Remarks section.
            </param>
            <returns>
            Number of records in file, excluding the expected label row
            
            Please see the Remarks section.
            </returns>
            <remarks>
            This method starts from the Length property of array pastrWholeFile.
            
            For the most part, this function is syntactic sugar. Given an array,
            pastrWholeFile, populated with strings that represent every record
            in a text file, this function returns the record count, adjusted for
            the label row that is assumed to be present.
            
            This assumption is justified by the fact that I almost always put a
            label row in my delimited ASCII text files, even if the intended use
            doesn't require one, because it makes diagnostic studies so much
            easier. In the long run, I prefer to have my programs discard the
            unneeded label row than have a carbon unit try to figure out what is
            supposed to be in each of its columns.
            </remarks>
            <seealso cref="F:WizardWrx.CSVFileInfo.EMPTY_FILE"/>
            <seealso cref="F:WizardWrx.CSVFileInfo.FIRST_RECORD"/>
            <seealso cref="F:WizardWrx.CSVFileInfo.LABEL_ROW"/>
            <seealso cref="M:WizardWrx.CSVFileInfo.LongRecordCount(System.String[])"/>
        </member>
        <member name="M:WizardWrx.CSVFileInfo.LongRecordCount(System.String[])">
            <summary>
            Derive the record count from the length of an array of records
            loaded from a labeled CSV type file.
            </summary>
            <param name="pastrWholeFile">
            Array populated with all records read from a text file
            
            Please see the Remarks section.
            </param>
            <returns>
            Number of records in file, excluding the expected label row
            
            Please see the Remarks section.
            </returns>
            <remarks>
            This method starts from the LongLength property of array
            pastrWholeFile.
            
            For the most part, this function is syntactic sugar. Given an array,
            pastrWholeFile, populated with strings that represent every record
            in a text file, this function returns the record count, adjusted for
            the label row that is assumed to be present.
            
            This assumption is justified by the fact that I almost always put a
            label row in my delimited ASCII text files, even if the intended use
            doesn't require one, because it makes diagnostic studies so much
            easier. In the long run, I prefer to have my programs discard the
            unneeded label row than have a carbon unit try to figure out what is
            supposed to be in each of its columns.
            </remarks>
            <seealso cref="F:WizardWrx.CSVFileInfo.EMPTY_FILE"/>
            <seealso cref="F:WizardWrx.CSVFileInfo.FIRST_RECORD"/>
            <seealso cref="F:WizardWrx.CSVFileInfo.LABEL_ROW"/>
            <seealso cref="M:WizardWrx.CSVFileInfo.RecordCount(System.String[])"/>
        </member>
        <member name="T:WizardWrx.DisplayFormats">
            <summary>
            Pass these constants to the ToString method on an object of the
            appropriate type to render the object for printing.
            
            The comment associated with each constant identifies the types for
            which it is appropriate.
            
            There are service methods to facilitate using the Date/Time formatting
            constants, which cannot be fed to ToString, except, perhaps, with a
            custom formatting engine. Use these service methods, or call the
            ReformatSysDate function, which also belongs to this library, directly.
            
            NOTE: The time formatting strings and routines in this class are time
            zone agnostic. If you want or need the time zone, use the companion
            method, GetDisplayTimeZone, defined in sibling class Util.
            </summary>
        </member>
        <member name="F:WizardWrx.DisplayFormats.HEXADECIMAL_LC">
            <summary>
            Pass this constant to the ToString method on any integral type to
            format it as an arbitrary string of hexadecimal digits, using lower
            case glyphs..
            </summary>
        </member>
        <member name="F:WizardWrx.DisplayFormats.HEXADECIMAL_UC">
            <summary>
            Pass this constant to the ToString method on any integral type to
            format it as an arbitrary string of hexadecimal digits, using upper
            case glyphs..
            </summary>
        </member>
        <member name="F:WizardWrx.DisplayFormats.HEXADECIMAL_2">
            <summary>
            Pass this constant to the ToString method on any integral type to
            format it as a string of 2 hexadecimal digits.
            </summary>
        </member>
        <member name="F:WizardWrx.DisplayFormats.HEXADECIMAL_4">
            <summary>
            Pass this constant to the ToString method on any integral type to
            format it as a string of 4 hexadecimal digits.
            </summary>
        </member>
        <member name="F:WizardWrx.DisplayFormats.HEXADECIMAL_8">
            <summary>
            Pass this constant to the ToString method on any integral type to
            format it as a string of 8 hexadecimal digits.
            </summary>
        </member>
        <member name="F:WizardWrx.DisplayFormats.HEXADECIMAL_16">
            <summary>
            Pass this constant to the ToString method on any integral type to
            format it as a string of 16 hexadecimal digits.
            </summary>
        </member>
        <member name="F:WizardWrx.DisplayFormats.HEXADECIMAL_PREFIX_0H_LC">
            <summary>
            Substitute this into a format string as a prefix to a hexadecimal
            number display. This string renders exactly as shown, 0h.
            </summary>
        </member>
        <member name="F:WizardWrx.DisplayFormats.HEXADECIMAL_PREFIX_0H_UC">
            <summary>
            Substitute this into a format string as a prefix to a hexadecimal
            number display. This string renders exactly as shown, 0H.
            </summary>
        </member>
        <member name="F:WizardWrx.DisplayFormats.HEXADECIMAL_PREFIX_0X_LC">
            <summary>
            Substitute this into a format string as a prefix to a hexadecimal
            number display. This string renders exactly as shown, 0x.
            </summary>
        </member>
        <member name="F:WizardWrx.DisplayFormats.HEXADECIMAL_PREFIX_0X_UC">
            <summary>
            Substitute this into a format string as a prefix to a hexadecimal
            number display. This string renders exactly as shown, 0X.
            </summary>
        </member>
        <member name="F:WizardWrx.DisplayFormats.INTEGER_PER_REG_SETTINGS">
            <summary>
            Use this string to format an integer per the Regional Settings
            applet in the Windows Control Panel, overriding its default setting
            for digits after the decimal point, which is meaningless for an
            integer.
            </summary>
        </member>
        <member name="F:WizardWrx.DisplayFormats.NUMBER_PER_REG_SETTINGS">
            <summary>
            Pass this constant to the ToString method on any integral type to
            format it according to the current settings in the Regional Settings
            part of the Windows Control Panel.
            
            This format string causes the formatting engine to obey ALL of the
            settings, including the number of digits to display after the
            decimal point for a whole number.
            </summary>
        </member>
        <member name="F:WizardWrx.DisplayFormats.NUMBER_PER_REG_SETTINGS_0D">
            <summary>
            Pass this constant to the ToString method on any integral type to
            format it according to the current settings in the Regional Settings
            part of the Windows Control Panel.
            
            This format string causes the formatting engine to obey all of the
            settings, EXCEPT the number of digits to display after the decimal
            point for a whole number.
            
            This format string overrides the digits after decimal value
            specified by the iDigits value of Windows Registry key
            HKCU\Control Panel\International, causing it to behave as if it had
            been set to 0.
            
            The override applies only to the instance ToString method being
            called; the Registry is unchanged.
            
            See http://technet.microsoft.com/en-us/library/cc978638.aspx.
            </summary>
        </member>
        <member name="F:WizardWrx.DisplayFormats.NUMBER_PER_REG_SETTINGS_2D">
            <summary>
            Pass this constant to the ToString method on any integral type to
            format it according to the current settings in the Regional Settings
            part of the Windows Control Panel.
            
            This format string causes the formatting engine to obey all of the
            settings, EXCEPT the number of digits to display after the decimal
            point for a whole number.
            
            This format string overrides the digits after decimal value
            specified by the iDigits value of Windows Registry key
            HKCU\Control Panel\International, causing it to behave as if it had
            been set to 2, which happens to be the default for a US
            installation. Nevertheless, uses this value if changes made by the
            user would mess up your work.
            
            The override applies only to the instance ToString method being
            called; the Registry is unchanged.
            
            See http://technet.microsoft.com/en-us/library/cc978638.aspx.
            </summary>
        </member>
        <member name="F:WizardWrx.DisplayFormats.NUMBER_PER_REG_SETTINGS_3D">
            <summary>
            Pass this constant to the ToString method on any integral type to
            format it according to the current settings in the Regional Settings
            part of the Windows Control Panel.
            
            This format string causes the formatting engine to obey all of the
            settings, EXCEPT the number of digits to display after the decimal
            point for a whole number.
            
            This format string overrides the digits after decimal value
            specified by the iDigits value of Windows Registry key
            HKCU\Control Panel\International, causing it to behave as if it had
            been set to 3.
            
            The override applies only to the instance ToString method being
            called; the Registry is unchanged.
            
            See http://technet.microsoft.com/en-us/library/cc978638.aspx.
            </summary>
        </member>
        <member name="F:WizardWrx.DisplayFormats.PERCENT">
            <summary>
            Pass this constant to the ToString method on a single or double
            precision floating point number to be displayed as an integral
            percentage.
            </summary>
        </member>
        <member name="F:WizardWrx.DisplayFormats.PERCENT_DIGITS_2">
            <summary>
            Pass this constant to the ToString method on a single or double
            precision floating point number to be displayed as a fixed point
            percentage, accurate to two decimal places.
            </summary>
        </member>
        <member name="T:WizardWrx.FileIOFlags">
            <summary>
            Use these flags to document stream I/O method calls.
            </summary>
        </member>
        <member name="F:WizardWrx.FileIOFlags.FILE_COPY_OVERWRITE_FORBIDDEN">
            <summary>
            File copy and stream I/O operations on existing files must fail.
            
            This is the default behavior, and an existing file raises an
            IOException exception.
            </summary>
            <seealso cref="F:WizardWrx.FileIOFlags.FILE_COPY_OVERWRITE_PERMITTED"/>
        </member>
        <member name="F:WizardWrx.FileIOFlags.FILE_COPY_OVERWRITE_PERMITTED">
            <summary>
            File copy and stream I/O operations on existing files overwrite.
            </summary>
            <seealso cref="F:WizardWrx.FileIOFlags.FILE_COPY_OVERWRITE_FORBIDDEN"/>
        </member>
        <member name="F:WizardWrx.FileIOFlags.FILE_READ_ENCODING_CHECK_FOR_BOM">
            <summary>
            When opening a text file for input, use the Byte Order Mark, if 
            present, to establish its encoding.
            
            The documentation in the MSDN library describes this parameter as
            follows.
            
            "The detectEncodingFromByteOrderMarks parameter detects the encoding
            by looking at the first three bytes of the stream. It automatically
            recognizes UTF-8, little-endian Unicode, and big-endian Unicode text
            if the file starts with the appropriate byte order marks. Otherwise,
            the UTF8Encoding is used."
            
            The documentation implies, without explicitly saying so, the text is
            assumed to be UTF-8 encoded unless you check for a Byte Order Mark,
            one is present, and it indicates otherwise.
            </summary>
            <seealso cref="F:WizardWrx.FileIOFlags.FILE_READ_ENCODING_IGNORE_BOM"/>
            <see href="https://msdn.microsoft.com/en-us/library/9y86s1a9(v=vs.110).aspx"/>
        </member>
        <member name="F:WizardWrx.FileIOFlags.FILE_READ_ENCODING_IGNORE_BOM">
            <summary>
            When opening a text file for input, ignore (expect none) the Byte
            Order Mark to establish its encoding.
            
            The documentation in the MSDN library describes this parameter as
            follows.
            
            "The detectEncodingFromByteOrderMarks parameter detects the encoding
            by looking at the first three bytes of the stream. It automatically
            recognizes UTF-8, little-endian Unicode, and big-endian Unicode text
            if the file starts with the appropriate byte order marks. Otherwise,
            the UTF8Encoding is used."
            
            The documentation implies, without explicitly saying so, the text is
            assumed to be UTF-8 encoded unless you check for a Byte Order Mark,
            one is present, and it indicates otherwise.
            </summary>
            <seealso cref="F:WizardWrx.FileIOFlags.FILE_READ_ENCODING_CHECK_FOR_BOM"/>
            <see href="https://msdn.microsoft.com/en-us/library/9y86s1a9(v=vs.110).aspx"/>
            <seealso cref="F:WizardWrx.FileIOFlags.MAKE_STREAM_IO_ASYNCHRONOUS"/>
            <seealso cref="F:WizardWrx.FileIOFlags.MAKE_STREAM_IO_SYNCHRONOUS"/>
        </member>
        <member name="F:WizardWrx.FileIOFlags.FILE_OUT_APPEND">
            <summary>
            Opening an output stream on a file that exists extends the file. The
            file is created if it doesn't exist.
            
            The documentation implies, without explicitly saying so, that the
            default is overwrite.
            </summary>
            <seealso href="https://msdn.microsoft.com/en-us/library/0wf7ab94(v=vs.110).aspx"/>
            <seealso cref="F:WizardWrx.FileIOFlags.FILE_OUT_CREATE"/>
            <seealso cref="F:WizardWrx.FileIOFlags.MAKE_STREAM_IO_ASYNCHRONOUS"/>
            <seealso cref="F:WizardWrx.FileIOFlags.MAKE_STREAM_IO_SYNCHRONOUS"/>
        </member>
        <member name="F:WizardWrx.FileIOFlags.FILE_OUT_CREATE">
            <summary>
            Opening an output stream on a file that exists overwrites the file.
            Otherwise, a new file is created.
            
            The documentation implies, without explicitly saying so, that the
            default is overwrite.
            </summary>
            <seealso cref="F:WizardWrx.FileIOFlags.FILE_OUT_APPEND"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/0wf7ab94(v=vs.110).aspx"/>
            <seealso cref="F:WizardWrx.FileIOFlags.MAKE_STREAM_IO_ASYNCHRONOUS"/>
            <seealso cref="F:WizardWrx.FileIOFlags.MAKE_STREAM_IO_SYNCHRONOUS"/>
        </member>
        <member name="F:WizardWrx.FileIOFlags.MAKE_STREAM_IO_ASYNCHRONOUS">
            <summary>
            Open stream for asynchronous I/O.
            </summary>
            <seealso cref="F:WizardWrx.FileIOFlags.FILE_OUT_APPEND"/>
            <seealso cref="F:WizardWrx.FileIOFlags.FILE_OUT_CREATE"/>
            <seealso cref="F:WizardWrx.FileIOFlags.MAKE_STREAM_IO_SYNCHRONOUS"/>
        </member>
        <member name="F:WizardWrx.FileIOFlags.MAKE_STREAM_IO_SYNCHRONOUS">
            <summary>
            Open stream for synchronous I/O. This is the default.
            </summary>
            <seealso cref="F:WizardWrx.FileIOFlags.MAKE_STREAM_IO_ASYNCHRONOUS"/>
        </member>
        <member name="T:WizardWrx.ListInfo">
            <summary>
            This static class exposes handy constants for working with buffers,
            lists, and substrings.
            
            Since static classes are implicitly sealed, this class cannot be inherited.
            </summary>
            <seealso cref="T:WizardWrx.ArrayInfo"/>
            <seealso cref="T:WizardWrx.MagicNumbers"/>
            <seealso cref="T:WizardWrx.PathPositions"/>
            <seealso cref="T:WizardWrx.SpecialCharacters"/>
        </member>
        <member name="F:WizardWrx.ListInfo.BEGINNING_OF_BUFFER">
            <summary>
            Use this to signify the beginning of a binary I/O buffer.
            
            Coincidentally, this happens to be ArrayInfo.ARRAY_FIRST_ELEMENT,
            which is logical, since a buffer is an array.
            </summary>
        </member>
        <member name="F:WizardWrx.ListInfo.BINARY_SEARCH_NOT_FOUND">
            <summary>
            Since the BinarySearch method on a List returns the array subscript
            where the value was found, a return value of less than zero
            (BINARY_SEARCH_NOT_FOUND) means that no matching item exists in the
            list.
            
            Coincidentally, this happens to be ArrayInfo.ARRAY_INVALID_INDEX.
            </summary>
        </member>
        <member name="F:WizardWrx.ListInfo.EMPTY_STRING_LENGTH">
            <summary>
            The Length property of a string returns a value of zero
            (EMPTY_STRING_LENGTH) when the string is empty.
            </summary>
        </member>
        <member name="F:WizardWrx.ListInfo.INDEXOF_NOT_FOUND">
            <summary>
            This constant defines the value returned by the IndexOf method on a
            string to indicate that the search character or substring is not
            found.
            
            Coincidentally, this happens to be ArrayInfo.ARRAY_INVALID_INDEX.
            </summary>
        </member>
        <member name="F:WizardWrx.ListInfo.LIST_IS_EMPTY">
            <summary>
            The Count property of a list returns a value of zero (LIST_IS_EMPTY)
            when the list is empty.
            </summary>
        </member>
        <member name="F:WizardWrx.ListInfo.SUBSTR_BEGINNING">
            <summary>
            Since a string is an array of Unicode characters, it makes sense to
            treat substrings as arrays.
            
            Coincidentally, this happens to be ArrayInfo.ARRAY_FIRST_ELEMENT,
            which is logical, since a substring is an array of Unicode
            characters.
            </summary>
        </member>
        <member name="F:WizardWrx.ListInfo.SUBSTR_SECOND_CHAR">
            <summary>
            Since a string is an array of Unicode characters, it makes sense to
            treat substrings as arrays.
            
            Coincidentally, this happens to be ArrayInfo.ARRAY_SECOND_ELEMENT,
            which is logical, since a substring is an array of Unicode
            characters.
            </summary>
            
            If the function cannot return the requested character, the return
            value is SpecialCharacters.NUL, the null character.
        </member>
        <member name="M:WizardWrx.ListInfo.FirstCharOfString(System.String)">
            <summary>
            Return the first character of a string.
            </summary>
            <param name="pstrIn">
            Specify the string from which to return the first character.
            </param>
            <returns>
            Unless the input string is empty (or null), the return value is its
            first character.
            
            If the function cannot return the requested character, the return
            value is SpecialCharacters.NUL, the null character.
            </returns>
        </member>
        <member name="M:WizardWrx.ListInfo.LastCharacterOfString(System.String)">
            <summary>
            Return the last character of a string.
            </summary>
            <param name="pstrIn">
            Specify the string from which to return the last character.
            </param>
            <returns>
            Unless the input string is empty (or null), the return value is its
            last character.
            
            If the function cannot return the requested character, the return
            value is SpecialCharacters.NUL, the null character.
            </returns>
        </member>
        <member name="M:WizardWrx.ListInfo.NthCharacterOfString(System.String,System.Int32)">
            <summary>
            Returns the character at the Nth position in a string.
            </summary>
            <param name="pstrIn">
            Specify the string from which to return the last character.
            </param>
            <param name="pintOrdinalPosition">
            Specify the ordinal position of the desired character. Unlike array
            subscripts, which start at zero, ordinals start at one.
            </param>
            <returns>
            Unless the input string is empty (or null), or pintOrdinalPosition
            is less than 1 or greater than the length of the string, the return
            value is the character at the specified (Nth) position.
            
            If the function cannot return the requested character, the return
            value is SpecialCharacters.NUL, the null character.
            </returns>
        </member>
        <member name="M:WizardWrx.ListInfo.PenultimateCharactrOfString(System.String)">
            <summary>
            Return the next to last, or penultimate, character of a string.
            </summary>
            <param name="pstrIn">
            Specify the string from which to return the penultimate character.
            </param>
            <returns>
            Unless the input string is empty (or null), the return value is its
            penultimate character.
            
            If the function cannot return the requested character, the return
            value is SpecialCharacters.NUL, the null character.
            </returns>
        </member>
        <member name="M:WizardWrx.ListInfo.SecondCharacterOfString(System.String)">
            <summary>
            Return the second character of a string.
            </summary>
            <param name="pstrIn">
            Specify the string from which to return the second character.
            </param>
            <returns>
            Unless the input string is empty (or null), the return value is its
            second character.
            
            If the function cannot return the requested character, the return
            value is SpecialCharacters.NUL, the null character.
            </returns>
        </member>
        <member name="T:WizardWrx.MagicBooleans">
            <summary>
            This class defines frequently used Boolean values whose correct values
            are easier to remember with the help of a mnemonic.
            
            This class is one of a constellation of static classes that define a
            wide variety of symbolic constants that I use to make my code easier to
            understand when I need a refresher or am about to change it.
            </summary>
            <remarks>
            The constants defined herein are pairs. The first part of the name of
            each pair associates it with the method or constructor with which it is
            intended to be used. The remainder of the name identifies the behavior
            elicited from the object or method by specifying this value.
            </remarks>
            <seealso cref="T:WizardWrx.ArrayInfo"/>
            <seealso cref="T:WizardWrx.ListInfo"/>
            <seealso cref="T:WizardWrx.FileIOFlags"/>
            <seealso cref="T:WizardWrx.PathPositions"/>
            <seealso cref="T:WizardWrx.SpecialCharacters"/>
        </member>
        <member name="F:WizardWrx.MagicBooleans.ENUM_PARSE_CASE_INSENSITIVE">
            <summary>
            Use this constant as the third (ignoreCase) argument of the static
            Enum.Parse method to cause the evaluation to be case INsensitive.
            </summary>
            <see href="!:https://msdn.microsoft.com/en-us/library/vstudio/kxydatf9(v=vs.80).aspx"/>
            <seealso cref="F:WizardWrx.MagicBooleans.ENUM_PARSE_CASE_SENSITIVE"/>
        </member>
        <member name="F:WizardWrx.MagicBooleans.ENUM_PARSE_CASE_SENSITIVE">
            <summary>
            Use this constant as the third (ignoreCase) argument of the static
            Enum.Parse method to cause the evaluation to be case sensitive. This
            is the default behavior of Enum.Parse exhibited by the two-argument
            overload of this method.
            </summary>
            <see href="!:https://msdn.microsoft.com/en-us/library/vstudio/essfb559(v=vs.80).aspx"/>
            <seealso cref="F:WizardWrx.MagicBooleans.ENUM_PARSE_CASE_INSENSITIVE"/>
        </member>
        <member name="F:WizardWrx.MagicBooleans.FILE_COPY_OVERWRITE_FORBIDDEN">
            <summary>
            Use with the third argument of the static Copy method of the File 
            class to explicitly forbid file overwriting. See Remarks.
            </summary>
            <remarks>
            If you NEVER want overwriting, use the default (two-argument)
            form of the Copy method.
            </remarks>
            <seealso cref="F:WizardWrx.MagicBooleans.FILE_COPY_OVERWRITE_PERMITTED"/>
        </member>
        <member name="F:WizardWrx.MagicBooleans.FILE_COPY_OVERWRITE_PERMITTED">
            <summary>
            Use with the third argument of the static Copy method of the File 
            class to enable file overwriting, which is forbidden by default.
            </summary>
            <seealso cref="F:WizardWrx.MagicBooleans.FILE_COPY_OVERWRITE_FORBIDDEN"/>
        </member>
        <member name="F:WizardWrx.MagicBooleans.FILE_OUT_APPEND">
            <summary>
            Use this symbolic constant to set the append argument to an
            overloaded StreamWriter constructor, to cause it to append to a file
            if one exists.
            </summary>
            <seealso cref="F:WizardWrx.MagicBooleans.FILE_OUT_CREATE"/>
        </member>
        <member name="F:WizardWrx.MagicBooleans.FILE_OUT_CREATE">
            <summary>
            Use this symbolic constant to set the append argument to an
            overloaded StreamWriter constructor, to cause it to overwrite a file
            if one exists.
            </summary>
            <seealso cref="F:WizardWrx.MagicBooleans.FILE_OUT_APPEND"/>
        </member>
        <member name="F:WizardWrx.MagicBooleans.MAKE_STREAM_IO_ASYNCHRONOUS">
            <summary>
            Use this symbolic constant to set the useAsync argument to a
            FileStream constructor to TRUE, allowing I/O to be asynchronous.
            </summary>
            <seealso cref="F:WizardWrx.MagicBooleans.MAKE_STREAM_IO_SYNCHRONOUS"/>
        </member>
        <member name="F:WizardWrx.MagicBooleans.MAKE_STREAM_IO_SYNCHRONOUS">
            <summary>
            Use this symbolic constant to set the useAsync argument to a
            FileStream constructor to FALSE, allowing I/O to be synchronous,
            which is the default.
            </summary>
            <seealso cref="F:WizardWrx.MagicBooleans.MAKE_STREAM_IO_ASYNCHRONOUS"/>
        </member>
        <member name="T:WizardWrx.MagicNumbers">
            <summary>
            This class defines constants for commonly used magic numbers. Others are
            defined in companion class ArrayInfo, while SpecialCharacters defines
            character representations of the visually ambiguous numbers and letters,
            for use in place of literals.
            
            Since static classes are implicitly sealed, this class cannot be inherited.
            </summary>
            <remarks>
            For ease of access, I promoted the classes that expose only constants to
            the root of the WizardWrx namespace.
            </remarks>
            <seealso cref="T:WizardWrx.ArrayInfo"/>
            <seealso cref="T:WizardWrx.ListInfo"/>
            <seealso cref="T:WizardWrx.MagicBooleans"/>
            <seealso cref="T:WizardWrx.PathPositions"/>
            <seealso cref="T:WizardWrx.SpecialCharacters"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.APPLICATION_ERROR_MASK">
            <summary>
            This constant defines the standard APPLICATION_ERROR_MASK bit, which
            distinguishes application errors from system errors in the status
            codes returned by Marshal.GetLastWin32Error.
            </summary>
        </member>
        <member name="F:WizardWrx.MagicNumbers.CAPACITY_01KB">
            <summary>
            Constant for sizing a 1 KB StringBuilder, array, or buffer.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_02KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_04KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_08KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_16KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_32KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_64KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_MAX_PATH"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.CAPACITY_02KB">
            <summary>
            Constant for sizing a 2 KB StringBuilder, array, or buffer.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_01KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_04KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_08KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_16KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_32KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_64KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_MAX_PATH"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.CAPACITY_04KB">
            <summary>
            Constant for sizing a 4 KB StringBuilder, array, or buffer.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_01KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_02KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_08KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_16KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_32KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_64KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_MAX_PATH"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.CAPACITY_08KB">
            <summary>
            Constant for sizing a 8 KB StringBuilder, array, or buffer.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_01KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_02KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_04KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_16KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_32KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_64KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_MAX_PATH"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.CAPACITY_16KB">
            <summary>
            Constant for sizing a 16 KB StringBuilder, array, or buffer.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_01KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_02KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_04KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_08KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_32KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_64KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_MAX_PATH"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.CAPACITY_32KB">
            <summary>
            Constant for sizing a 32 KB StringBuilder, array, or buffer.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_01KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_02KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_04KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_08KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_16KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_64KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_MAX_PATH"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.CAPACITY_64KB">
            <summary>
            Constant for sizing a 64 KB StringBuilder, array, or buffer.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_01KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_02KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_04KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_08KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_16KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_32KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_MAX_PATH"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.CAPACITY_MAX_PATH">
            <summary>
            Constant for sizing a MAX_PATH StringBuilder, array, or buffer.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_01KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_02KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_04KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_08KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_16KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_32KB"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.EMPTY_STRING_LENGTH">
            <summary>
            Use this constant to document when zero stands for the length of the
            empty string, or is the lower limit of a string length argument.
            </summary>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_FIRST_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_IS_EMPTY"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_INVALID_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_SECOND_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.INDEX_FROM_ORDINAL"/>
            <seealso cref="F:WizardWrx.ArrayInfo.NEXT_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ORDINAL_FROM_INDEX"/>
            <seealso cref="F:WizardWrx.SpecialStrings.EMPTY_STRING"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.ERROR_INVALID_CMD_LNE_ARGS">
            <summary>
            This exit code is reserved for reporting invalid command line
            arguments.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.ERROR_SUCCESS"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_ONE"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.ERROR_RUNTIME">
            <summary>
            This exit code is reserved for reporting runtime exceptions.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.ERROR_SUCCESS"/>
            <seealso cref="F:WizardWrx.MagicNumbers.ERROR_INVALID_CMD_LNE_ARGS"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_ONE"/>
            <seealso cref="F:WizardWrx.SpecialStrings.ERRMSG_SUCCESS_PLACEHOLDER"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.ERROR_SUCCESS">
            <summary>
            Use this with environment.exit() and other situations when you want
            to report the default "success" exit code of zero.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.ERROR_RUNTIME"/>
            <seealso cref="F:WizardWrx.MagicNumbers.ERROR_INVALID_CMD_LNE_ARGS"/>
            <seealso cref="F:WizardWrx.MagicNumbers.ZERO"/>
            <seealso cref="F:WizardWrx.SpecialStrings.ERRMSG_SUCCESS_PLACEHOLDER"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.EVENLY_DIVISIBLE">
            <summary>
            Use this constant with the modulus operator to evaluate whether one
            integer is evenly divisible by a smaller integer.
            </summary>
            <example>
            The following example uses the modulus operator to evaluate whether
            a counter is an even multiple of one hundred, updating a frozen line
            on the program's console with the new count.
            <code>
            
                if ( intTotalRows % MagicNumbers.EXACTLY_ONE_HUNDRED == MagicNumbers.EVENLY_DIVISIBLE )
                {
                    fixedConsoleWriter.Write(
                        @"{0} of {1} records processed" ,
                        intTotalRows.ToString(NumericFormats.IntegerPerRegSettings ( ) ) ,
                        intRowsInTable.ToString(NumericFormats.IntegerPerRegSettings ( ) ) );
                }   // if ( intTotalRows % MagicNumbers.EXACTLY_ONE_NUNDRED == MagicNumbers.ZERO )
            </code>
            </example>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_TEN"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_MILLION"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_MILLION_LONG"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_TEN_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_MILLION"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_BILLION"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.EXACTLY_TEN">
            <summary>
            Use this constant when you need a literal value of exactly ten.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.EVENLY_DIVISIBLE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_MILLION"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_MILLION_LONG"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_TEN_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_MILLION"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_BILLION"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED">
            <summary>
            Use this constant when you need a literal value of exactly one hundred.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.EVENLY_DIVISIBLE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_TEN"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_TEN_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_MILLION"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_MILLION_LONG"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_MILLION"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_BILLION"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_MILLION">
            <summary>
            Use this constant when you need a literal value of exactly one hundred million.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.EVENLY_DIVISIBLE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_TEN"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_MILLION_LONG"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_TEN_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_MILLION"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_BILLION"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_MILLION_LONG">
            <summary>
            Use this constant when you need a long integer literal value of exactly one hundred million.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.EVENLY_DIVISIBLE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_TEN"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_MILLION"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_TEN_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_MILLION"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_BILLION"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_THOUSAND">
            <summary>
            Use this constant when you need a literal value of exactly one hundred thousand.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.EVENLY_DIVISIBLE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_TEN"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_MILLION"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_MILLION_LONG"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_TEN_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_MILLION"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_BILLION"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.EXACTLY_ONE_THOUSAND">
            <summary>
            Use this constant when you need a literal value of exactly one thousand.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.EVENLY_DIVISIBLE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_TEN"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_MILLION"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_MILLION_LONG"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_TEN_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_MILLION"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_BILLION"/>
            <seealso cref="F:WizardWrx.MagicNumbers.MILLISECONDS_PER_SECOND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_SECOND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_SECOND"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.EXACTLY_TEN_THOUSAND">
            <summary>
            Use this constant when you need a literal value of exactly ten thousand.
            </summary>
            <remarks>
            This internal-use literal may as well be public.
            </remarks>
            <seealso cref="F:WizardWrx.MagicNumbers.EVENLY_DIVISIBLE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_TEN"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_MILLION"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_MILLION_LONG"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_MILLION"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_BILLION"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.EXACTLY_ONE_MILLION">
            <summary>
            Use this constant when you need a literal value of exactly one million.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.EVENLY_DIVISIBLE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_TEN"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_MILLION"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_MILLION_LONG"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_TEN_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_BILLION"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.EXACTLY_ONE_BILLION">
            <summary>
            Use this constant when you need a literal value of exactly one billion.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.EVENLY_DIVISIBLE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_TEN"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_MILLION"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_HUNDRED_MILLION_LONG"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_TEN_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_MILLION"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.MILLISECONDS_PER_SECOND">
            <summary>
            Use this constant when you need a literal value of exactly one second worth of milliseconds..
            </summary>
            <see cref="F:WizardWrx.MagicNumbers.EXACTLY_ONE_THOUSAND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_SECOND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_SECOND"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.MINUS_ONE">
            <summary>
            Use this constant to disambiguate a negative 1 from a positive 1
            immediately following a minus sign that is intended to be an
            operator.
            </summary>
            <remarks>
            This constant is especially useful in an expression that follows any
            algebraic operator with an operand value of -1.
            </remarks>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_ONE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_TWO"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_SEVEN"/>
            <seealso cref="F:WizardWrx.MagicNumbers.ZERO"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_I"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_0"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_1"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_2"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_7"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.NUMBER_BASE_DECIMAL">
            <summary>
            Use this value with Math.Pow to raise ten to a specified power.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.NUMBER_BASE_HEXADECIMAL"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.NUMBER_BASE_HEXADECIMAL">
            <summary>
            Use this value with Math.Pow to raise sixteen to a specified power.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.NUMBER_BASE_DECIMAL"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.PLUS_ONE">
            <summary>
            Use this constant to disambiguate a numeric value of 1 from a
            literal upper case I or lower case L, either of which is a legal
            variable name, and all of which are almost impossible to reiaably
            distinguish visually in source code.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.MINUS_ONE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_TWO"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_SEVEN"/>
            <seealso cref="F:WizardWrx.MagicNumbers.ZERO"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_I"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_0"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_1"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_2"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_7"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.PLUS_TWO">
            <summary>
            Number 2, to clearly distinguish it from a letter Z and a numeral 7,
            which can look a lot like it.
            
            Compare to character constants CHAR_LC_Z and CHAR_UC_Z.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.MINUS_ONE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_ONE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_SEVEN"/>
            <seealso cref="F:WizardWrx.MagicNumbers.ZERO"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_I"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_0"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_1"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_2"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_7"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.PLUS_SEVEN">
            <summary>
            Number 7, to clearly distinguish it from a letter Z and a numeral 2,
            which can look a lot like it.
            
            Compare to character constants CHAR_LC_Z and CHAR_UC_Z.
            												
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.MINUS_ONE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_ONE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_TWO"/>
            <seealso cref="F:WizardWrx.MagicNumbers.ZERO"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_I"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_0"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_1"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_2"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_7"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.STRING_INDEXOF_NOT_FOUND">
            <summary>
            Value returned by the IndexOf methods, e. g., of the String class,
            if the object sought is not found.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.MINUS_ONE"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.STRING_SUBSTR_BEGINNING">
            <summary>
            Use with the Substring method of the String class to denote the
            first character in a string.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.ZERO"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.TICKS_PER_SECOND">
            <summary>
            There are ten million ticks of one hundred nanoseconds each in one second.
            
            BREAKING CHANGE: Prior to version 7.14, this value was understated
            by a factor of one thousand.
            
            Use this constant to construct a TimeSpan of the corresponding
            length (value) by way of its one-argument constructor, or to
            increase or decrease the value of a time span by the corresponding
            amount by way of its one-argument method.
            </summary>
            <see cref="F:WizardWrx.MagicNumbers.EXACTLY_TEN_THOUSAND"/>
            <see cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_SECOND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.MILLISECONDS_PER_SECOND"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.TICKS_PER_1_WEEK">
            <summary>
            There are 6,048,000,000,000 ticks in one calendar week.
            
            Use this constant to construct a TimeSpan of the corresponding
            length (value) by way of its one-argument constructor, or to
            increase or decrease the value of a time span by the corresponding
            amount by way of its one-argument method.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_DAY"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_23_59_59"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_23_59_00"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_HOUR"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_MINUTE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_SECOND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_MILLISECOND"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.TICKS_PER_1_DAY">
            <summary>
            There are 864,000,000,000 ticks in one calendar day.
            
            Use this constant to construct a TimeSpan of the corresponding
            length (value) by way of its one-argument constructor, or to
            increase or decrease the value of a time span by the corresponding
            amount by way of its one-argument method.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_WEEK"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_23_59_59"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_23_59_00"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_HOUR"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_MINUTE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_SECOND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_MILLISECOND"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.TICKS_PER_23_59_59">
            <summary>
            There are 863,990,000,000 ticks in one calendar day less one second.
            
            Use this constant to construct a TimeSpan of the corresponding
            length (value) by way of its one-argument constructor, or to
            increase or decrease the value of a time span by the corresponding
            amount by way of its one-argument method.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_WEEK"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_DAY"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_23_59_00"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_HOUR"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_MINUTE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_SECOND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_MILLISECOND"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.TICKS_PER_23_59_00">
            <summary>
            There are 863,400,000,000 ticks in one calendar day less one minute. 
            
            Use this constant to construct a TimeSpan of the corresponding
            length (value) by way of its one-argument constructor, or to
            increase or decrease the value of a time span by the corresponding
            amount by way of its one-argument method.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_WEEK"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_DAY"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_23_59_59"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_HOUR"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_MINUTE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_SECOND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_MILLISECOND"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.TICKS_PER_1_HOUR">
            <summary>
            There are 36,000,000,000 ticks in one hour.
            
            Use this constant to construct a TimeSpan of the corresponding
            length (value) by way of its one-argument constructor, or to
            increase or decrease the value of a time span by the corresponding
            amount by way of its one-argument method.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_WEEK"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_DAY"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_23_59_59"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_23_59_00"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_MINUTE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_SECOND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_MILLISECOND"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.TICKS_PER_1_MINUTE">
            <summary>
            There are 600,000,000 ticks in one minute.
            
            Use this constant to construct a TimeSpan of the corresponding
            length (value) by way of its one-argument constructor, or to
            increase or decrease the value of a time span by the corresponding
            amount by way of its one-argument method.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_WEEK"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_DAY"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_23_59_59"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_23_59_00"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_HOUR"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_SECOND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_MILLISECOND"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.TICKS_PER_1_SECOND">
            <summary>
            There are 10,000,000 ticks in one second.
            
            Use this constant to construct a TimeSpan of the corresponding
            length (value) by way of its one-argument constructor, or to
            increase or decrease the value of a time span by the corresponding
            amount by way of its one-argument method.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_WEEK"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_DAY"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_23_59_59"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_23_59_00"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_HOUR"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_MINUTE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_MILLISECOND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_SECOND"/>
            <seealso cref="F:WizardWrx.MagicNumbers.MILLISECONDS_PER_SECOND"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.TICKS_PER_1_MILLISECOND">
            <summary>
            There are 10,000 ticks in one millisecond.
            
            Use this constant to construct a TimeSpan of the corresponding
            length (value) by way of its one-argument constructor, or to
            increase or decrease the value of a time span by the corresponding
            amount by way of its one-argument method.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_WEEK"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_DAY"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_23_59_59"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_23_59_00"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_HOUR"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_MINUTE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.TICKS_PER_1_SECOND"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.UNC_PREFIX_START_POS">
            <summary>
            A UNC prefix starts here at this character position.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.MINUS_ONE"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.UNC_PREFIX_START_LEN">
            <summary>
            A UNC prefix has this many characters.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_TWO"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.ZERO">
            <summary>
            Constant equivalent to integer value of zero, to disambiguate zero
            literal values in code.
            
            Compare to character constants CHAR_LC_O and CHAR_UC_O.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.MINUS_ONE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_ONE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_TWO"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_SEVEN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_I"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_0"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_1"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_2"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_7"/>
        </member>
        <member name="T:WizardWrx.NumericFormats">
            <summary>
            This class defines standard numeric format strings, for use with the
            string.format method and its derivatives and relatives.
            </summary>
        </member>
        <member name="T:WizardWrx.NumericFormats.HexFormatDecoration">
            <summary>
            Use this enumeration with the third argument to the fourth
            (coprehensive) overload of IntegerToHexStr or the second argument to
            its second overload.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.None">
            <summary>
            Just return the hexadecimal glyphs.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.Prefix_Ox_LC">
            <summary>
            Prefix the hexadecimal glyphs with Ox.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.Prefix_Ox_UC">
            <summary>
            Prefix the hexadecimal glyphs with OX.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.Prefix_Oh_LC">
            <summary>
            Prefix the hexadecimal glyphs with Oh.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.Prefix_Oh_UC">
            <summary>
            Prefix the hexadecimal glyphs with OH.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.Suffix_h_LC">
            <summary>
            Suffix the hexadecimal glyphs with lower case h.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.Suffix_h_UC">
            <summary>
            Suffix the hexadecimal glyphs with upper case h.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.Glyphs_LC">
            <summary>
            Use lower case hexadecimal glyphs.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.Glyphs_UC">
            <summary>
            Use upper case hexadecimal glyphs.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.All_Prefixes">
            <summary>
            All prefix flags
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.All_Suffixes">
            <summary>
            All suffix flags
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.All_Glyphs">
            <summary>
            All glyph flags
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.All_Flags">
            <summary>
            All glyph flags
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.CURRENCY">
            <summary>
            Currency, which obeys the Regional Settings for currency, including
            the currency symbol and number of decimal places to show.
            
            The negative sign comes from the regional settings, and leads the
            string, and the precision applies to the number of decimal
            (fraction) digits.
            </summary>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#CFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.DECIMAL">
            <summary>
            Decimal, which the documentation says is supported only for integral
            types. They mean business; if you try to use this type with a
            decimal or floating point number, you get an exception.
            
            If the number requires fewer than the specified minimum number of
            digits, it is padded on the left with zeros, and there are no
            thousands separators.
            
            The negative sign comes from the regional settings, and leads the
            string, and the precision applies to the number of digits to the
            left of the implied decimal point.
            </summary>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#DFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.FIXED">
            <summary>
            This is the minimal fixed point format string. Modifiers can be appended to it to specify significant digits after the decimal point.
            
            The negative sign comes from the regional settings, and leads the
            string, and the precision applies to the number of decimal
            (fraction) digits.
            
            To specify the number of places to print after the decimal point,
            use the static FixedPointDecimal ( int pintFractionDigits ) method,
            which supports any number between zero and ninety-nine, the limits
            imposed by the framework.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.FixedPointDecimal"/>
            <see cref="M:WizardWrx.NumericFormats.FixedPointDecimal(System.Int32)"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#FFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED_2"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED_3"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.FIXED_2">
            <summary>
            This gives fixed point, with 2 places to the right of the decimal
            point, and without thousands separators.
            </summary>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#FFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED_3"/>
            <seealso cref="M:WizardWrx.NumericFormats.FixedPointDecimal"/>
            <seealso cref="M:WizardWrx.NumericFormats.FixedPointDecimal(System.Int32)"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.FIXED_3">
            <summary>
            This gives fixed point, with 3 places to the right of the decimal
            point, and without thousands separators.
            </summary>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#FFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED_2"/>
            <seealso cref="M:WizardWrx.NumericFormats.FixedPointDecimal"/>
            <seealso cref="M:WizardWrx.NumericFormats.FixedPointDecimal(System.Int32)"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.GENERAL_LC">
            <summary>
            This is the default, and it's pretty minimal. The documentation
            states that the number is converted to the most compact format.
            
            When the size of the number and the specified precision dictate use
            of scientific notation, the exponential symbol is lower case; this
            is the only difference between this format and GENERAL_UC.
            
            When the specified number of places after the decimal point is zero,
            the decimal point is omitted.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            along with any of the prefixes and suffixes defined in this set of
            HEXADECIMAL_* constants, call static method IntegerToHexStr
            ( [T] , int pintTotalDigits , HexFormatDecoration penmDecoration ),
            in lieu of calling ToString on the integer.
            </summary>
            <see cref="F:WizardWrx.NumericFormats.GENERAL_UC"/>
            <see cref="M:WizardWrx.NumericFormats.GeneralXPrecision(System.Int32)"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#GFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.GENERAL_UC">
            <summary>
            This is the default, and it's pretty minimal, as it must be, since
            its status as the default means that it is the only format that
            supports all data types (numbers, dates, times, time spans, and all
            the rest. It is also among the few that render output left aligned.
            
            The documentation states that the number is converted to the most
            compact format.
            
            When the size of the number and the specified precision dictate use
            of scientific notation, the exponential symbol is UPPER case; this
            is the only difference between this format and GENERAL_LC.
            
            When the specified number of places after the decimal point is zero,
            the decimal point is omitted.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            along with any of the prefixes and suffixes defined in this set of
            HEXADECIMAL_* constants, call static method IntegerToHexStr
            ( [T] , int pintTotalDigits , HexFormatDecoration penmDecoration ),
            in lieu of calling ToString on the integer.
            </summary>
            <see cref="F:WizardWrx.NumericFormats.GENERAL_LC"/>
            <see cref="M:WizardWrx.NumericFormats.GeneralXPrecision(System.Int32)"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#GFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_LC">
            <summary>
            Use this string as your argument to the ToString method of any
            integral data type to format it in hexadecimal notation, which 
            the documentation says is supported only for integral types.
            They mean business; if you try to use this type with a decimal or
            floating point number, you get an FormatException exception.
            
            This format yields a result containing the fewest hexadecimal glyphs
            required to represent the number. The difference between this token
            and HEXADECIMAL_LC is that this token causes the returned string to
            contain UPPER case glyphs, while HEXADECIMAL_LC yields lower case
            glyphs.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            along with any of the prefixes and suffixes defined in this set of
            HEXADECIMAL_* constants, call static method IntegerToHexStr
            ( [T] , int pintTotalDigits , HexFormatDecoration penmDecoration ),
            in lieu of calling ToString on the integer.
            </summary>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx#XFormatString"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_UC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_2"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_4"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_8"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_UC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_UC"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_UC">
            <summary>
            Use this string as your argument to the ToString method of any
            integral data type to format it in hexadecimal notation, which 
            the documentation says is supported only for integral types.
            They mean business; if you try to use this type with a decimal or
            floating point number, you get an FormatException exception.
            
            This format yields a result containing the fewest hexadecimal glyphs
            required to represent the number. The difference between this token
            and HEXADECIMAL_LC is that this token causes the returned string to
            contain UPPER case glyphs, while HEXADECIMAL_LC yields lower case
            glyphs.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            along with any of the prefixes and suffixes defined in this set of
            HEXADECIMAL_* constants, call static method IntegerToHexStr
            ( [T] , int pintTotalDigits , HexFormatDecoration penmDecoration ),
            in lieu of calling ToString on the integer.
            </summary>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx#XFormatString"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_2"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_4"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_8"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_16"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_UC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_UC"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_2">
            <summary>
            Use this string as your argument to the ToString method of any
            integral data type to format it in hexadecimal notation, which 
            the documentation says is supported only for integral types.
            They mean business; if you try to use this type with a decimal or
            floating point number, you get an FormatException exception.
            
            This format yields a result containing a minimum of two hexadecimal
            numerals. If the number needs more than two numerals, the returned
            string contains the minimum number of hexadecimal numerals required
            to represent the integer.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            along with any of the prefixes and suffixes defined in this set of
            HEXADECIMAL_* constants, call static method IntegerToHexStr
            ( [T] , int pintTotalDigits , HexFormatDecoration penmDecoration ),
            in lieu of calling ToString on the integer.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_UC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_4"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_8"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_16"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_UC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_UC"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_4">
            <summary>
            Hexadecimal, which the documentation says is supported only for
            integral types. They mean business; if you try to use this type with
            a decimal or floating point number, you get an exception.
            
            This format yields a result containing a minimum of four hexadecimal
            numerals. If the number needs more than two numerals, the returned
            string contains the minimum number of hexadecimal numerals required
            to represent the integer.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            along with any of the prefixes and suffixes defined in this set of
            HEXADECIMAL_* constants, call static method IntegerToHexStr
            ( [T] , int pintTotalDigits , HexFormatDecoration penmDecoration ),
            in lieu of calling ToString on the integer.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_UC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_2"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_8"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_16"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_UC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_UC"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_8">
            <summary>
            Hexadecimal, which the documentation says is supported only for
            integral types. They mean business; if you try to use this type with
            a decimal or floating point number, you get an exception.
            
            This format yields a result containing a minimum of 8 hexadecimal
            numerals. If the number needs more than two numerals, the returned
            string contains the minimum number of hexadecimal numerals required
            to represent the integer.
            
            Use this format to represent result codes returned by Windows DLLs
            and other such functions that return things such as HRESULTs.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            along with any of the prefixes and suffixes defined in this set of
            HEXADECIMAL_* constants, call static method IntegerToHexStr
            ( [T] , int pintTotalDigits , HexFormatDecoration penmDecoration ),
            in lieu of calling ToString on the integer.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_UC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_2"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_4"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_16"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_UC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_UC"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_16">
            <summary>
            Hexadecimal, which the documentation says is supported only for
            integral types. They mean business; if you try to use this type with
            a decimal or floating point number, you get an exception.
            
            This format yields a result containing a minimum of 16 hexadecimal
            numerals. If the number needs more than 16 numerals, the returned
            string contains the minimum number of hexadecimal numerals required
            to represent the integer.
            
            Use this format to represent long integer values, such as file sizes
            and 64 bit masks.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            along with any of the prefixes and suffixes defined in this set of
            HEXADECIMAL_* constants, call static method IntegerToHexStr
            ( [T] , int pintTotalDigits , HexFormatDecoration penmDecoration ),
            in lieu of calling ToString on the integer.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_LC">
            <summary>
            Not strictly a format string, this string is intended for use as a
            prefix for the string returned from a call to ToString with any of
            the HEXADECIMAL format strings.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            along with any of the prefixes and suffixes defined in this set of
            HEXADECIMAL_* constants, call static method IntegerToHexStr
            ( [T] , int pintTotalDigits , HexFormatDecoration penmDecoration ),
            in lieu of calling ToString on the integer.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_UC">
            <summary>
            Not strictly a format string, this string is intended for use as a
            prefix for the string returned from a call to ToString with any of
            the HEXADECIMAL format strings.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            along with any of the prefixes and suffixes defined in this set of
            HEXADECIMAL_* constants, call static method IntegerToHexStr
            ( [T] , int pintTotalDigits , HexFormatDecoration penmDecoration ),
            in lieu of calling ToString on the integer.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_LC">
            <summary>
            Not strictly a format string, this string is intended for use as a
            prefix for the string returned from a call to ToString with any
            of the HEXADECIMAL format strings.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            along with any of the prefixes and suffixes defined in this set of
            HEXADECIMAL_* constants, call static method IntegerToHexStr
            ( [T] , int pintTotalDigits , HexFormatDecoration penmDecoration ),
            in lieu of calling ToString on the integer.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_UC">
            <summary>
            Not strictly a format string, this string is intended for use as a
            prefix for the string returned from a call to ToString with any
            of the HEXADECIMAL format strings.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            along with any of the prefixes and suffixes defined in this set of
            HEXADECIMAL_* constants, call static method IntegerToHexStr
            ( [T] , int pintTotalDigits , HexFormatDecoration penmDecoration ),
            in lieu of calling ToString on the integer.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_SUFFIX_H_LC">
            <summary>
            Not strictly a format string, this string is intended for use as a
            suffix for the string returned from a call to ToString with any of
            the HEXADECIMAL format strings.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            along with any of the prefixes and suffixes defined in this set of
            HEXADECIMAL_* constants, call static method IntegerToHexStr
            ( [T] , int pintTotalDigits , HexFormatDecoration penmDecoration ),
            in lieu of calling ToString on the integer.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_SUFFIX_H_UC">
            <summary>
            Not strictly a format string, this string is intended for use as a
            suffix for the string returned from a call to ToString with any of
            the HEXADECIMAL format strings.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            along with any of the prefixes and suffixes defined in this set of
            HEXADECIMAL_* constants, call static method IntegerToHexStr
            ( [T] , int pintTotalDigits , HexFormatDecoration penmDecoration ),
            in lieu of calling ToString on the integer.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.INTEGER_PER_REG_SETTINGS">
            <summary>
            Format an integer per the Regional Settings in the Windows Control
            Panel. Sine this string is intended exclusively for formatting an
            Integer, it overrides the default regional settings value for Number
            of Digits After Decimal. Please see the Remarks for additional
            details.
            </summary>
            <remarks>
            Since this string is intended exclusively for formatting an
            Integer, it overrides the default regional settings value, which is
            the value reported when GetLocaleInfo is called with its LCType
            argument set to LOCALE_IDIGITS (0x00000011, per WinNLS.h), which
            lives at HKEY_CURRENT_USER\Control Panel\International[iDigits] in
            the Windows Registry, and corresponds to the "No. of digits after
            decimal" property shown on the Numbers tab displayed by the
            Additional Settings button on the Region and Language Windows
            Control Panel applet dialog box.
            </remarks>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_0D"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS">
            <summary>
            Format a number (any numeric type), using the Regional Settings
            (Locale) defaults for thousands separator, decimal symbol, number of
            decimal (fraction) places, and number of digits to display between
            each thousands separator.
            
            Use this string as your argument to the ToString method of any
            numeric data type to format it in decimal notation, with zero or
            more places after the decimal point.
            
            When the specified number of places after the decimal point is zero,
            the decimal point is omitted.
            
            To specify the number of places to print after the decimal point,
            use the static NumberPerRegSettings ( int pintFractionDigits ) 
            method, which supports any number between zero and ninety-nine, the
            limits imposed by the Base Class Library.
            
            A shortcut to get an integer formatted is IntegerPerRegSettings.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.IntegerPerRegSettings"/>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings"/>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings(System.Int32)"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#NFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_0D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_2D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_3D"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_0D">
            <summary>
            Feed this string to the ToString method of any numeric value to
            format it according to the Regional Settings (Locale) defaults for
            thousands separator, decimal symbol, and number of digits to display
            between each thousands separator.
            
            In contrast to NUMBER_PER_REG_SETTINGS, this string overrides the
            default decimal places value, and always displays ZERO digits to the
            right of the decimal point.
            
            To specify the number of places to print after the decimal point,
            use the static NumberPerRegSettings ( int pintFractionDigits ) 
            method, which supports any number between zero and ninety-nine, the
            limits imposed by the Base Class Library.
            
            A shortcut to get an integer formatted is IntegerPerRegSettings, and
            an alias, which avoids the overhead of a method call, is
            INTEGER_PER_REG_SETTINGS.
            </summary>
            <remarks>
            Since this string is intended exclusively for formatting an
            Integer, it overrides the default regional settings value, which is
            the value reported when GetLocaleInfo is called with its LCType
            argument set to LOCALE_IDIGITS (0x00000011, per WinNLS.h), which
            lives at HKEY_CURRENT_USER\Control Panel\International[iDigits] in
            the Windows Registry, and corresponds to the "No. of digits after
            decimal" property shown on the Numbers tab displayed by the
            Additional Settings button on the Region and Language Windows
            Control Panel applet dialog box.
            </remarks>
            <see cref="M:WizardWrx.NumericFormats.IntegerPerRegSettings"/>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings"/>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings(System.Int32)"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#NFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.INTEGER_PER_REG_SETTINGS"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_2D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_3D"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_2D">
            <summary>
            Feed this string to the ToString method of any numeric value to
            format it according to the Regional Settings (Locale) defaults for
            thousands separator, decimal symbol, and number of digits to display
            between each thousands separator.
            
            In contrast to NUMBER_PER_REG_SETTINGS, this string overrides the
            default decimal places value, and always displays two digits to the
            right of the decimal point.
            
            To specify the number of places to print after the decimal point,
            use the static NumberPerRegSettings ( int pintFractionDigits ) 
            method, which supports any number between zero and ninety-nine, the
            limits imposed by the Base Class Library.
            
            A shortcut to get an integer formatted is IntegerPerRegSettings.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.IntegerPerRegSettings"/>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings"/>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings(System.Int32)"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#NFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_0D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_3D"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_3D">
            <summary>
            Feed this string to the ToString method of any numeric value to
            format it according to the Regional Settings (Locale) defaults for
            thousands separator, decimal symbol, and number of digits to display
            between each thousands separator.
            
            In contrast to NUMBER_PER_REG_SETTINGS, this string overrides the
            default decimal places value, and always displays three digits to
            the right of the decimal point.
            
            To specify the number of places to print after the decimal point,
            use the static NumberPerRegSettings ( int pintFractionDigits ) 
            method, which supports any number between zero and ninety-nine, the
            limits imposed by the Base Class Library.
            
            A shortcut to get an integer formatted is IntegerPerRegSettings.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.IntegerPerRegSettings"/>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings"/>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings(System.Int32)"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#NFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_0D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_2D"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.PERCENT">
            <summary>
            Display a fixed point number as a percentage, using the default
            number of decimal places, per the Regional Settings (Locale). The
            number is multiplied by 100 before the formatting is applied. Hence,
            0.25 renders as 25%.
            
            To specify the number of places to print after the decimal point,
            use the static PercentToDecimalPlaces ( int pintFractionDigits ) 
            method, which supports any number between zero and ninety-nine, the
            limits imposed by the framework.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.PercentToDecimalPlaces"/>
            <see cref="M:WizardWrx.NumericFormats.PercentToDecimalPlaces(System.Int32)"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#PFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.PERCENT_DIGITS_2"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.PERCENT_DIGITS_2">
            <summary>
            Display a fixed point number as a percentage, showing two digits to
            the right of the decimal point.
            
            To specify the number of places to print after the decimal point,
            use the static PercentToDecimalPlaces ( int pintFractionDigits ) 
            method, which supports any number between zero and ninety-nine, the
            limits imposed by the framework.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.PercentToDecimalPlaces"/>
            <see cref="M:WizardWrx.NumericFormats.PercentToDecimalPlaces(System.Int32)"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#PFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.PERCENT"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.ROUND_TRIP">
            <summary>
            Since the formatting engine ignores if for this type, there is no
            corresponding format string generator, and only one token, since
            there is no documented difference between the upper and lower case
            token. Before you use this token, read the documentation cited below
            carefully.
            </summary>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx#RFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx#GFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.SCIENTIFIC_LC">
            <summary>
            Scientific notation, with a lower case "e" for the exponent. Exactly one digit always precedes the decimal point.
            
            To specify the number of places to print after the decimal point,
            use the static PercentToDecimalPlaces ( int pintFractionDigits ) 
            method, which supports any number between zero and ninety-nine, the
            limits imposed by the framework.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.ScientificXPrecisionLC(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.ScientificXPrecisionUC(System.Int32)"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#EFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.SCIENTIFIC_UC">
            <summary>
            Scientific notation, with an upper case "E" for the exponent. Exactly one digit always precedes the decimal point.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.ScientificXPrecisionLC(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.ScientificXPrecisionUC(System.Int32)"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#EFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_DEFAULT">
            <summary>
            For some applications, such as the static methods of this class, we
            set our own default number of decimal places, rather than relying on
            the Regional Settings (Locale), which can be changed, at any time,
            by any user, even with restricted permissions.
            <list type="table">
            <listheader>
            <term>Format String</term>
            <term>Generator Routine</term>
            <term>Width Override</term>
            </listheader>
            <item>
            <term>DECIMAL</term>
            <term>FixedWidthInteger</term>
            <term>int pintTotalDigits</term>
            </item>
            <item>
            <term>FIXED</term>
            <term>FixedPointDecimal</term>
            <term>int pintFractionDigits</term>
            </item>
            <item>
            <term>GENERAL</term>
            <term>GeneralXPrecision</term>
            <term>int pintPrecisionDigits [1]</term>
            </item>
            <item>
            <term>HEXADECIMAL</term>
            <term>HexadecimalInteger</term>
            <term>int pintTotalDigits</term>
            </item>
            <item>
            <term>NUMBER_PER_REG_SETTINGS</term>
            <term>IntegerPerRegSettings</term>
            <term>N /A</term>
            </item>
            <item>
            <term>NUMBER_PER_REG_SETTINGS</term>
            <term>NumberPerRegSettings</term>
            <term>int pintFractionDigits</term>
            </item>
            <item>
            <term>PERCENT</term>
            <term>PercentToDecimalPlaces</term>
            <term>int pintFractionDigits</term>
            </item>
            </list>
            Note 1: There is only one of these methods, and it accepts the
            pintTotalDigits argument.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.FixedWidthInteger"/>
            <see cref="M:WizardWrx.NumericFormats.FixedWidthInteger(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.FixedPointDecimal"/>
            <see cref="M:WizardWrx.NumericFormats.FixedPointDecimal(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.GeneralXPrecision(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings"/>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.PercentToDecimalPlaces"/>
            <see cref="M:WizardWrx.NumericFormats.PercentToDecimalPlaces(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.ScientificXPrecisionLC(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.ScientificXPrecisionLC(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.ScientificXPrecisionUC(System.Int32)"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_MIN"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_MAX"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_NONE"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_MIN">
            <summary>
            The static format string generator methods in this class test the
            requested number of decimal points against this lower limit.
            
            If the specified number is less than this value, the methods behave
            as if the default had been specified.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.FixedWidthInteger"/>
            <see cref="M:WizardWrx.NumericFormats.FixedWidthInteger(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.FixedPointDecimal"/>
            <see cref="M:WizardWrx.NumericFormats.FixedPointDecimal(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.GeneralXPrecision(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings"/>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.PercentToDecimalPlaces"/>
            <see cref="M:WizardWrx.NumericFormats.PercentToDecimalPlaces(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.ScientificXPrecisionLC(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.ScientificXPrecisionUC(System.Int32)"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_DEFAULT"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_MAX"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_MAX">
            <summary>
            The static format string generator methods in this class test the
            requested number of decimal points against this upper limit.
            
            If the specified number is greater than this value, the methods
            behave as if the default had been specified.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.FixedWidthInteger"/>
            <see cref="M:WizardWrx.NumericFormats.FixedWidthInteger(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.FixedPointDecimal"/>
            <see cref="M:WizardWrx.NumericFormats.FixedPointDecimal(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.GeneralXPrecision(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings"/>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.PercentToDecimalPlaces"/>
            <see cref="M:WizardWrx.NumericFormats.PercentToDecimalPlaces(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.ScientificXPrecisionLC(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.ScientificXPrecisionUC(System.Int32)"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_DEFAULT"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_MIN"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_NONE"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_NONE">
            <summary>
            This is a synonym of DECIMAL_DIGITS_MIN.
            </summary>
        </member>
        <member name="M:WizardWrx.NumericFormats.FixedPointDecimal">
            <summary>
            Return a string suitable for formatting a fixed point number.
            </summary>
            <returns>
            Format string for formatting a fixed point number with the default
            number of digits to the right of the decimal point.
            </returns>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#FFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED_2"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED_3"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_DEFAULT"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_MIN"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_MAX"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_NONE"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.FixedPointDecimal(System.Int32)">
            <summary>
            Return a string suitable for formatting a fixed point number.
            </summary>
            <param name="pintFractionDigits">
            Number of digits to allow to the right of the decimal point.
            </param>
            <returns>
            Format string for formatting a fixed point number with the specified
            number of digits to the right of the decimal point.
            </returns>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#FFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED_2"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED_3"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_DEFAULT"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_MIN"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_MAX"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_NONE"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.FixedWidthInteger">
            <summary>
            Return a string suitable for formatting a fixed width integer.
            </summary>
            <returns>
            Format string for formatting a fixed width integer, with the default
            number of digits.
            </returns>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#DFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.FixedWidthInteger(System.Int32)">
            <summary>
            Return a string suitable for formatting a fixed width integer.
            </summary>
            <param name="pintTotalDigits">
            Minimum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string for formatting a fixed width integer, with the specified
            number of digits.
            </returns>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#DFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.FormatIntegerLeftPadded(System.Int32,System.Int32)">
            <summary>
            Format an integer so that it appears left padded so that its total
            horizontal width is a specified number of characters, which must be
            greater than or equal to the minimum number of characters required
            to render it.
            </summary>
            <param name="pintValue">
            Specify the integer to format to occupy the greater of the number of
            characters required to display it or the width specified by
            <paramref name="pintDesiredWidth"/>.
            </param>
            <param name="pintDesiredWidth">
            Specify the minimum desired width in characters to be occupied by
            the returned string, which is expected to be right-aligned and left
            padded with spaces.
            </param>
            <returns>
            The return value is a string representation of
            <paramref name="pintValue"/>
            formatted right-aligned in a horizontal row of at least
            <paramref name="pintDesiredWidth"/> characters.
            </returns>
        </member>
        <member name="M:WizardWrx.NumericFormats.FormatStatusCode(System.Int32)">
            <summary>
            Return a string representation of a status code, formatted as
            hexadecimal, followed by the decimal format in parentheses.
            </summary>
            <param name="pintStatusCode">
            Though intended for use with status codes, any integer will do.
            </param>
            <returns>
            Return a string something like 0x000000ff (255 decimal).
            </returns>
        </member>
        <member name="M:WizardWrx.NumericFormats.GeneralXPrecision(System.Int32)">
            <summary>
            Return a string suitable for formatting any numeric value.
            </summary>
            <param name="pintPrecisionDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string for formatting any numeric value, with the specified
            number of digits.
            </returns>
            <remarks>
            Since the General format differs significantly in intent and
            behavior, I chose to provide only one version of its format string
            generator, which takes an integer, which specifies the maximum
            number of digits to display. If more digits are required, General
            format reverts to scientific notation.
            </remarks>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#GFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.HexadecimalInteger">
            <summary>
            Return a string suitable for formatting a hexadecimal representation
            of an integer with the default maximum number of numerals.
            </summary>
            <returns>
            Format string for formatting an integer as a hexadecimal number.
            </returns>
            <see cref="F:WizardWrx.NumericFormats.HEXADECIMAL_UC"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#XFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_UC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_UC"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)">
            <summary>
            Return a string suitable for formatting a hexadecimal representation
            of an integer with the specified minimum number of numerals.
            </summary>
            <param name="pintTotalDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string for formatting an integer as a hexadecimal number
            containing the specified minimum number of numerals.
            </returns>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#XFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_UC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_UC"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.IntegerToHexStr``1(``0)">
            <summary>
            Properly formatting an integral type as a hexadecimal string,
            including the decorations commonly applied to them as prefix or
            suffix, is a bit beyond the reach of a simple ToString format
            string.
            </summary>
            <typeparam name="T">
            There are no compiler enforced constraints on this type, because the
            Base Class Library provides no mechanism to differentiate integral
            types in constraints for generics. See the remarks for a comment about
            how we get around this.
            </typeparam>
            <param name="pintegralValue">
            Specify the value to be formatted as hexadecimal. Integral types
            only, because that's the only type that may be formatted in this
            way.
            </param>
            <returns>
            The returned string consists of the prefix, immediately followed by
            the hexadecimal number, itself, and, finally, the suffix. 
            
            Theoretically, you can have both a prefix and a suffix, but the idea
            is to have one or the other, but not both. You can mix and match
            upper and lower case glyphs in the main number string and the
            decorations.
            </returns>
        </member>
        <member name="M:WizardWrx.NumericFormats.IntegerToHexStr``1(``0,WizardWrx.NumericFormats.HexFormatDecoration)">
            <summary>
            Properly formatting an integral type as a hexadecimal string,
            including the decorations commonly applied to them as prefix or
            suffix, is a bit beyond the reach of a simple ToString format
            string.
            </summary>
            <typeparam name="T">
            There are no compiler enforced constraints on this type, because the
            Base Class Library provides no mechanism to differentiate integral
            types in constraints for generics. See the remarks for a comment about
            how we get around this.
            </typeparam>
            <param name="pintegralValue">
            Specify the value to be formatted as hexadecimal. Integral types
            only, because that's the only type that may be formatted in this
            way.
            </param>
            <param name="penmHexDecoration">
            The HexFormatDecoration has the Flags attribute set on it, so that
            it can be processed as a bit mask, enabling it to specify multiple
            items.
            </param>
            <returns>
            The returned string consists of the prefix, immediately followed by
            the hexadecimal number, itself, and, finally, the suffix. 
            
            Theoretically, you can have both a prefix and a suffix, but the idea
            is to have one or the other, but not both. You can mix and match
            upper and lower case glyphs in the main number string and the
            decorations.
            </returns>
        </member>
        <member name="M:WizardWrx.NumericFormats.IntegerToHexStr``1(``0,System.Int32)">
            <summary>
            Properly formatting an integral type as a hexadecimal string,
            including the decorations commonly applied to them as prefix or
            suffix, is a bit beyond the reach of a simple ToString format
            string.
            </summary>
            <typeparam name="T">
            There are no compiler enforced constraints on this type, because the
            Base Class Library provides no mechanism to differentiate integral
            types in constraints for generics. See the remarks for a comment about
            how we get around this.
            </typeparam>
            <param name="pintegralValue">
            Specify the value to be formatted as hexadecimal. Integral types
            only, because that's the only type that may be formatted in this
            way.
            </param>
            <param name="pintTotalDigits">
            Specify the minimum number of hexadecimal "digits" (glyphs, really)
            to render. If the number needs more than the specified number, the
            method uses as many as it needs, causing the returned string to be
            longer than you expected. If the string needs fewer characters, it
            is left padded with zeros.
            </param>
            <returns>
            The returned string consists of the prefix, immediately followed by
            the hexadecimal number, itself, and, finally, the suffix. 
            
            Theoretically, you can have both a prefix and a suffix, but the idea
            is to have one or the other, but not both. You can mix and match
            upper and lower case glyphs in the main number string and the
            decorations.
            </returns>
            <remarks>
            The available options are overloading the single-argument ToString
            method on all fourteen integer types, or crafting one generic method
            that takes the integer to format as its first argument. Since it's a
            lot less work, I went that route.
            
            Although this method uses generics, there is no type constraint,
            because the Base Class Library offers no such constraint to filter
            integral types, of which there are at least fourteen, not counting
            BigInteger. Since the compiler won't enforce a type constraint, I
            wrote my own routine that enforces it at run time, by searching a
            table of known integral types, identified by their GUID properties.
            If the type of pintegralValue matches an entry in the list, the
            input is accepted. Otherwise, you get an ArgumentException exception
            that clearly explains what happened and why.
            </remarks>
        </member>
        <member name="M:WizardWrx.NumericFormats.IntegerToHexStr``1(``0,System.Int32,WizardWrx.NumericFormats.HexFormatDecoration)">
            <summary>
            Properly formatting an integral type as a hexadecimal string,
            including the decorations commonly applied to them as prefix or
            suffix, is a bit beyond the reach of a simple ToString format
            string.
            </summary>
            <typeparam name="T">
            There are no compiler enforced constraints on this type, because the
            Base Class Library provides no mechanism to differentiate integral
            types in constraints for generics. See the remarks for a comment about
            how we get around this.
            </typeparam>
            <param name="pintegralValue">
            Specify the value to be formatted as hexadecimal. Integral types
            only, because that's the only type that may be formatted in this
            way.
            </param>
            <param name="pintTotalDigits">
            Specify the minimum number of hexadecimal "digits" (glyphs, really)
            to render. If the number needs more than the specified number, the
            method uses as many as it needs, causing the returned string to be
            longer than you expected. If the string needs fewer characters, it
            is left padded with zeros.
            </param>
            <param name="penmHexDecoration">
            The HexFormatDecoration has the Flags attribute set on it, so that
            it can be processed as a bit mask, enabling it to specify multiple
            items.
            </param>
            <returns>
            The returned string consists of the prefix, immediately followed by
            the hexadecimal number, itself, and, finally, the suffix. 
            
            Theoretically, you can have both a prefix and a suffix, but the idea
            is to have one or the other, but not both. You can mix and match
            upper and lower case glyphs in the main number string and the
            decorations.
            </returns>
            <remarks>
            The available options are overloading the single-argument ToString
            method on all fourteen integer types, or crafting one generic method
            that takes the integer to format as its first argument. Since it's a
            lot less work, I went that route.
            
            Although this method uses generics, there is no type constraint,
            because the Base Class Library offers no such constraint to filter
            integral types, of which there are at least fourteen, not counting
            BigInteger. Since the compiler won't enforce a type constraint, I
            wrote my own routine that enforces it at run time, by searching a
            table of known integral types, identified by their GUID properties.
            If the type of pintegralValue matches an entry in the list, the
            input is accepted. Otherwise, you get an ArgumentException exception
            that clearly explains what happened and why.
            </remarks>
        </member>
        <member name="M:WizardWrx.NumericFormats.IntegerPerRegSettings">
            <summary>
            Return a string suitable for formatting an integer per the Regional
            Settings, overriding the default number of digits to display to the
            right of the decimal point to display zero digits to the right of
            the decimal point.
            </summary>
            <returns>
            Format string suitable for formatting an integer
            </returns>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#NFormatString"/>
            <see cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_0D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_2D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_3D"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.NumberPerRegSettings">
            <summary>
            Return a string suitable for formatting an integer or fixed point
            number, per the Regional Settings, overriding the default number of
            digits to display to the right of the decimal point, if necessary,
            to display two digits to the right of the decimal point.
            </summary>
            <returns>
            Format string suitable for formatting an integer or fixed point
            number
            </returns>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#NFormatString"/>
            <see cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="M:WizardWrx.NumericFormats.NumberPerRegSettings"/>
            <seealso cref="M:WizardWrx.NumericFormats.NumberPerRegSettings(System.Int32)"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_0D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_2D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_3D"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.NumberPerRegSettings(System.Int32)">
            <summary>
            Return a string suitable for formatting an integer or fixed point
            number, per the Regional Settings, overriding the default number of
            digits to display to the right of the decimal point, if necessary,
            to display a specified number of digits to the right of the decimal
            point.
            </summary>
            <param name="pintFractionDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string suitable for formatting an integer or fixed point
            number with a specified number of digits to the right of the decimal
            point.
            </returns>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#NFormatString"/>
            <see cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_0D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_2D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_3D"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.PercentToDecimalPlaces">
            <summary>
            Return a string suitable for formatting an integer or fixed point
            number as a percentage, with two places to the right of the decimal
            point.
            </summary>
            <returns>
            Format string suitable for formatting an integer or fixed point
            number as a percentage.
            </returns>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#PFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.PERCENT"/>
            <seealso cref="F:WizardWrx.NumericFormats.PERCENT_DIGITS_2"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.PercentToDecimalPlaces(System.Int32)">
            <summary>
            Return a string suitable for formatting an integer or fixed point
            number as a percentage, with two places to the right of the decimal
            point.
            </summary>
            <param name="pintFractionDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string suitable for formatting an integer or fixed point
            number as a percentage, displaying a specified number of digits to
            the right of the decimal point.
            </returns>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#PFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.PERCENT"/>
            <seealso cref="F:WizardWrx.NumericFormats.PERCENT_DIGITS_2"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.ScientificXPrecisionLC(System.Int32)">
            <summary>
            Return a string suitable for formatting any numeric value in
            scientific notation.
            </summary>
            <param name="pintFractionDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string for formatting any numeric value, with the specified
            number of digits, in scientific notation.
            
            The exponent is lower case.
            </returns>
            <remarks>
            Since the Scientific format differs significantly in intent and
            behavior, I chose to provide only one version of its format string
            generator, which takes an integer, which specifies the maximum
            number of digits to display.
            </remarks>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#EFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="M:WizardWrx.NumericFormats.ScientificXPrecisionUC(System.Int32)"/>
            <seealso cref="F:WizardWrx.NumericFormats.SCIENTIFIC_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.SCIENTIFIC_UC"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.ScientificXPrecisionUC(System.Int32)">
            <summary>
            Return a string suitable for formatting any numeric value in
            scientific notation.
            </summary>
            <param name="pintFractionDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string for formatting any numeric value, with the specified
            number of digits, in scientific notation.
            
            The exponent is lower case.
            </returns>
            <remarks>
            Since the Scientific format differs significantly in intent and
            behavior, I chose to provide only one version of its format string
            generator, which takes an integer, which specifies the maximum
            number of digits to display.
            </remarks>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#EFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="M:WizardWrx.NumericFormats.ScientificXPrecisionLC(System.Int32)"/>
            <seealso cref="F:WizardWrx.NumericFormats.SCIENTIFIC_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.SCIENTIFIC_UC"/>
        </member>
        <member name="T:WizardWrx.PathPositions">
            <summary>
            Use these constants to document path string parsing.
            
            Since static classes are implicitly sealed, this class cannot be inherited.
            </summary>
            <seealso cref="T:WizardWrx.ArrayInfo"/>
            <seealso cref="T:WizardWrx.ListInfo"/>
            <seealso cref="T:WizardWrx.MagicNumbers"/>
            <seealso cref="T:WizardWrx.SpecialCharacters"/>
        </member>
        <member name="F:WizardWrx.PathPositions.FQFN_PREFIX_START_POS">
            <summary>
            The FQFN prefix refers to the drive and path substring, ":\" which
            starts in the second position of the substring, preceded by the
            logical drive letter. In keeping with the treatment of strings and
            substrings as arrays, its value is an index. Accordingly, its value
            is equated to ArrayInfo.ARRAY_SECOND_ELEMENT.
            </summary>
        </member>
        <member name="F:WizardWrx.PathPositions.FQFN_PREFIX_START_LEN">
            <summary>
            The prefix of an absolute path string is TWO characters. Some very 
            OLD programs, display little or no awareness of directories. Hence,
            they render only the first of the two characters (the full colon).
            
            By this means, you can tell whether a path name is one of these
            'old" path strings, or, at the very least, must be interpreted
            relative to the logged directory on the specified logical drive.
            </summary>
        </member>
        <member name="F:WizardWrx.PathPositions.MAX_PATH">
            <summary>
            In theory, Windows NT supports really long file names that can run
            to thousands of characters. However, due to the limitations of the
            commonly used Windows file system APIs, the practical limit on the
            length of a file name string remains stuck at MAX_PATH, 260
            characters.
            </summary>
        </member>
        <member name="F:WizardWrx.PathPositions.UNC_HOSTNAME_PREFIX_POS">
            <summary>
            By their very nature, a canonical UNC path string is absolute, and
            it must begin with two fixed characters, "\\". In keeping with the
            treatment of string and substrings as arrays, its value is an index.
            Accordingly, its value is equated to ArrayInfo.ARRAY_SECOND_ELEMENT.
            </summary>
        </member>
        <member name="F:WizardWrx.PathPositions.UNC_HOSTNAME_START_POS">
            <summary>
            Since a UNC path string begins with two fixed characters, it follows
            that the hostname, itself, begins at offset 2 (character 3). In
            keeping with the treatment of string and substrings as arrays, its
            value is an index.
            </summary>
        </member>
        <member name="T:WizardWrx.RegExpSupport">
            <summary>
            Constants, some built from others by static methods, to expedite common
            tasks that use regular expressions.
            </summary>
            <remarks>
            Reference: RegExLib.com Regular Expression Cheat Sheet (.NET), at the
            cross reference cited below.
            </remarks>
            <see href="http://regexlib.com/CheatSheet.aspx"/>
            <see href="http://haacked.com/archive/2004/10/25/usingregularexpressionstomatchhtml.aspx"/>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_ALTERNATION">
             <summary>
             Like the binary Logical OR operator in a logical expression, this
             character says "match either the character on its left OR the
             character on its right.
            
             Regular expressions may contain many alternations, forming a group
             that behaves commutatively.
             </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_ESCAPE">
             <summary>
             Preceding another meta-character, one of these tells the Engine to
             treat the meta character as a literal.
            
             Preceding certain other characters, one of these signals a special,
             non-printing character. For example, preceding a lower case a, it
             signifies an Alarm (Bell). More commonly, however, before a lower
             case t, this character signifies a Tab, before a lower case n means
             a Newline, and a lower case r denotes a Carriage Return.
            
             N. B. A Newline in the .NET RegExp Engine and in the Perl RegExp
             Engine are two different things.
             </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_GROUP_BEGIN">
            <summary>
            Define the start of a group. This is the same as a subexpression in
            Perl.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_GROUP_END">
            <summary>
            Define the end of a group. This is the same as a subexpression in
            Perl.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_MULTIPLE_PREVIOUS_CHAR">
            <summary>
            Match zero or more of the previous character or expression.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_ONE_OR_MORE_PREVIOUS_CHAR">
            <summary>
            Match one or more of of the previous character or expression.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_SHORTEST">
            <summary>
            Append to a greedy match to make it match the fewest possible characters.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_STRING_START">
            <summary>
            Match start of line, absent the String modifier, which changes its
            meaning to match start of the entire String.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_STRING_END">
            <summary>
            Match end of line, absent the String modifier, which changes its
            meaning to match end of the entire String.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_WILDCARD_CHAR">
             <summary>
             Match one of any character, except a Newline (absent the String
             modifier, which adds the Newline to the list of matched characters.
            
             Use MATCH_MULTIPLE_PREVIOUS_CHAR to extend the match to a string of
             the same character.
            
             Use MATCH_SHORTEST, following this character, followed by
             MATCH_MULTIPLE_PREVIOUS_CHAR, to limit the match.
             </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.CARRIAGE_RETURN">
            <summary>
            Represents a Carriage Return (CR in Windows text) in a Regular Expression
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_DTM_YYYYMMDD_FORMATTED">
            <summary>
            Match a date in YYYY/MM/DD format, where the delimiter can be ANY
            character.
            </summary>    
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_DTM_HHMMSS_FORMATTED">
            <summary>
            Match a time in HH:MM:SS format, where the delimiter MUST be a
            colon, and all digits are required.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_DTM_HHMMSSTTT_FORMATTED">
            <summary>
            Match a time in HH:MM:SS.TTT format, where the delimiter between
            hours, minutes, and seconds MUST be a colon, and the delimiter
            between seconds and milliseconds MUST be a point. All digits are
            required.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.ESCAPED_QUOTE">
            <summary>
            Escaped quote, used to embed quotation marks in regular expressions.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.NEWLINE">
            <summary>
            Represents a Newline (CR/LF in Windows text) in a Regular Expression
            </summary>
            <remarks>
            See "How to avoid VBScript regular expression gotchas," at
            http://www.xaprb.com/blog/2005/11/04/vbscript-regular-expression-gotchas/,
            especially the responses.
            </remarks>
        </member>
        <member name="F:WizardWrx.RegExpSupport.PAGE_TAG_PREFIX">
            <summary>
            Match the beginning of the Page tag in a ASP.NET page.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.PAGE_TAG_SUFFIX">
            <summary>
            Match the end of the Page tag in a ASP.NET page.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.TITLE_ATTRIBUTE_LABEL">
            <summary>
            Title attribute of the ASP.NET Page tag looks like this.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.REGEXP_WHOLE_MATCH">
            <summary>
            In the .NET version of the regular expression matching engine, the
            first group, whose index is zero, matches the whole expression.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.REGEXP_FIRST_MATCH">
            <summary>
            Not surprisingly, the .NET regular expression returns a collection
            of matches. Like all collections, individual members are numbered
            from zero.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.REGEXP_FIRST_SUBMATCH">
            <summary>
            In the .NET version of the regular expression matching engine, the
            subexpressions are numbered from 1, just as they are in Perl.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.FRIEDL_HTML_TAG_MATCH">
            <summary>
            Jeffrey Friedl's regular expression for matching any arbitrary HTML
            tag.
            
            Jeffrey Friedl is the author of Mastering Regular Expressions,
            published by O'Reily, which is regarded as the "Bible" of Regular
            Expressions.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MODIFIED_FRIEDL_HTML_TAG_MATCH">
            <summary>
            This is a derivation of Jeffrey Friedl's regular expression, adapted
            to capture the tag name in the first submatch.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.FRIEDL_GRAY_WHOLE_HTML_TAG_MATCH">
            <summary>
            Use this to get the whole XML body in one long string. Repeated uses
            should allow you to perform stepwise refinements, until you get to
            the innermost tag.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_COMPLETE_BODY">
            <summary>
            Match the whole body of any HTML document. Except in special cases,
            you must employ the String and IgnoreCase modifiers to get this
            expression to work.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_COMPLETE_HEAD">
            <summary>
            Match the entire Head section of any HTML document. Except in
            special cases, you must employ the String and IgnoreCase modifiers
            to get this expression to work.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_COMPLETE_HTML_DOC">
            <summary>
            Match the entirety of any HTML document. Use this expression to
            discard preceding HTTP headers. Except in special cases, you must
            employ the String and IgnoreCase modifiers to get this expression to
            work.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_OPENING_TAG_ANY">
             <summary>
             Match any opening HTML or XML tag.
            
             Except in special cases, you should employ the IgnoreCase modifier.
             </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_CLOSING_TAG_ANY">
             <summary>
             Match any closing HTML or XML tag.
            
             Except in special cases, you should employ the IgnoreCase modifier.
             </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_COMPLETE_TAG_ARBITRARY">
             <summary>
             Match an arbitrary HTML or XML tag that appears on a single line (or
             multiple lines, if the String modifier is employed).
            
             Except in special cases, you should employ the IgnoreCase modifier.
            
             You must interpolate the tag name into this string by calling the
             the static string.Format method, passing this string as the format
             and the tag as the sole substitution value.
            
             You may also pass a tag name to static method MatchArbitraryHtmlTag,
             which returns a pattern. For example, to find all Anchor tags, pass
             "A" to MatchArbitraryHtmlTag.
             </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_OPENING_TAG_ARBITRARY">
             <summary>
             Match an arbitrary opening HTML or XML tag.
            
             Except in special cases, you should employ the IgnoreCase modifier.
            
             You must interpolate the tag name into this string by calling the
             the static string.Format method, passing this string as the format
             and the tag as the sole substitution value.
            
             You may also pass a tag name to method MatchArbitraryHtmlOpeningTag,
             which returns a pattern. For example, to find all Anchor tags, pass
             "A" to MatchArbitraryHtmlOpeningTag.
             </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_CLOSING_TAG_ARBITRARY">
             <summary>
             Match an arbitrary closing HTML or XML tag.
            
             Except in special cases, you should employ the IgnoreCase modifier.
            
             You must interpolate the tag name into this string by calling the
             the static string.Format method, passing this string as the format
             and the tag as the sole substitution value.
            
             You may also pass a tag name to method MatchArbitraryHtmlClosingTag,
             which returns a pattern. For example, to find all Anchor tags, pass
             "A" to MatchArbitraryHtmlClosingTag.
             </summary>
        </member>
        <member name="M:WizardWrx.RegExpSupport.MatchAnyCharacterGreedy">
            <summary>
            Return a string that matches the maximum number of any character.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WizardWrx.RegExpSupport.MatchAnyCharacterLeastGreedy">
            <summary>
            Return a string that matches the minimum number of any character.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WizardWrx.RegExpSupport.MatchArbitraryHtmlTag(System.String)">
            <summary>
            Interpolate a tag name into the SGML_COMPLETE_TAG_ARBITRARY match
            expression template.
            </summary>
            <param name="pstrTagName">
            String containing the name of the tag to match.
            </param>
            <returns>
            A Regular Expression match expression that will match the tag named
            in argument pstrTagName.
            </returns>
        </member>
        <member name="M:WizardWrx.RegExpSupport.MatchArbitraryHtmlOpeningTag(System.String)">
            <summary>
            Interpolate a tag name into the SGML_OPENING_TAG_ARBITRARY match
            expression template.
            </summary>
            <param name="pstrTagName">
            String containing the name of the tag to match.
            </param>
            <returns>
            A Regular Expression match expression that will match the opening
            tag named in argument pstrTagName.
            </returns>
        </member>
        <member name="M:WizardWrx.RegExpSupport.MatchArbitraryHtmlClosingTag(System.String)">
            <summary>
            Interpolate a tag name into the SGML_CLOSING_TAG_ARBITRARY match
            expression template.
            </summary>
            <param name="pstrTagName">
            String containing the name of the tag to match.
            </param>
            <returns>
            A Regular Expression match expression that will match the closing
            tag named in argument pstrTagName.
            </returns>
        </member>
        <member name="M:WizardWrx.RegExpSupport.MatchAspNetPageTag">
            <summary>
            Return a string that matches the Page tag in a ASP.NET document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WizardWrx.RegExpSupport.MatchFileName(System.String,System.String)">
            <summary>
            Match file names against a true regular expression, as opposed to
            the anemic masks supported by DOS and Windows. Though occasionally
            referred to as regular expressions, file specifications that use
            DOS wild cards are a far cry from true regular expressions.
            </summary>
            <param name="pstrPathString">
            Specify the path string to match against PCRE pstrRegExpToMatch.
            </param>
            <param name="pstrRegExpToMatch">
            Specify the Perl Compatible Regular Expression against which to
            evaluate pstrFileName.
            </param>
            <returns>
            The function returns TRUE if neither string is null or empty AND
            pstrRegExpToMatch matches PCRE pstrFileName.
            </returns>
            <remarks>
            This method could have been coded inline. However, since I have at
            least one other project in the works that requires it, I segregated
            it in this routine in this small, easily navigable class.
            </remarks>
        </member>
        <member name="M:WizardWrx.RegExpSupport.MatchHTMLPageTitleAttribute">
            <summary>
            Expression to match the Title attribute of an ASP.NET page.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WizardWrx.SpecialCharacters">
            <summary>
            Use these constants when you want or need your listings to be crystal
            clear about certain ambiguous literals.
            
            Since static classes are implicitly sealed, this class cannot be inherited.
            </summary>
            <remarks>
            For ease of access, I promoted the classes that expose only constants to
            the root of the WizardWrx namespace.
            </remarks>
            <seealso cref="T:WizardWrx.ArrayInfo"/>
            <seealso cref="T:WizardWrx.MagicNumbers"/>
            <seealso cref="T:WizardWrx.SpecialStrings"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.AMPERSAND">
            <summary>
            Use this when your code requires a ampersand literal, when you want the
            listing to be crystal clear about what it is.
            </summary>
            <seealso cref="F:WizardWrx.SpecialStrings.AMPERSAND"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COMMA"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.HASH_TAG"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PERCENT_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PIPE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SEMICOLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.TAB_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.UNDERSCORE_CHAR"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.ASTERISK">
            <summary>
            Asterisks are everywhere; use this constant to make asterisks that
            are intended to be treated as characters unambiguous.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.AMPERSAND"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.HASH_TAG"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PERCENT_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PIPE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SEMICOLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.TAB_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.UNDERSCORE_CHAR"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.AT_CHAR">
            <summary>
            Use this when your code requires the AT character literal, when you
            want the listing to be crystal clear about what it is.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.AT_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COMMA"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.HASH_TAG"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PERCENT_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PIPE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SEMICOLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.TAB_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.UNDERSCORE_CHAR"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.BRACE_LEFT">
            <summary>
            Use this in your code to specify a left French brace, also called a
            left brace or opening brace, as a character literal.
            </summary>
            <remarks>
            In addition to implementing DLM_FORMAT_ITEM_BEGIN for a specific use
            case, I implemented the generic use case and its twin, BRACE_RIGHT.
            </remarks>
            <seealso cref="F:WizardWrx.SpecialCharacters.DLM_FORMAT_ITEM_BEGIN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.BRACE_RIGHT"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.BRACE_RIGHT">
            <summary>
            Use this in your code to specify a right French brace, also called a
            right brace or closing brace, as a character literal.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.BRACE_LEFT"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.BRACKET_LEFT">
            <summary>
            Use this in your code to specify a left square bracket, also called
            an opening bracket, as a character literal.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.BRACKET_RIGHT"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.BRACE_LEFT"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.BRACKET_RIGHT">
            <summary>
            Use this in your code to specify a right square bracket, also called
            a closing bracket, as a character literal.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.BRACKET_LEFT"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.BRACE_RIGHT"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.ASTERISK_CHAR">
            <summary>
            Both ASTERISK_CHAR and ASTERISK resolve to the same character.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.AMPERSAND"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.HASH_TAG"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PERCENT_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PIPE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SEMICOLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.TAB_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.UNDERSCORE_CHAR"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.AT_SIGN">
            <summary>
            Both AT_SIGH and AT_CHAR resolve to the same character.
            </summary>
            <remarks>
            The '@' character has many uses in computing circles, mostly obscure
            ones, such as their use in many command line tools to denote that a
            specified file is not, itself, the object of interest, but is a list
            of files or other entities that are.
            </remarks>
            <see cref="F:WizardWrx.SpecialCharacters.AT_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.AMPERSAND"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.HASH_TAG"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PERCENT_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PIPE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SEMICOLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.TAB_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.UNDERSCORE_CHAR"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CARRIAGE_RETURN">
            <summary>
            Use this character anywhere in your code that requires a bare
            carriage return character.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.LINEFEED"/>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_CARRIAGE_RETURN"/>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_LINEFEED"/>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_NEWLINE"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_0">
            <summary>
            Numeric character 0, for use in code where it might be mistaken for
            a letter O.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_O"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_1">
            <summary>
            Numeric character 1, for use in code where it might be mistaken for
            a lower case l or an upper case I.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_I"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_L"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_2">
            <summary>
            Numeric character 2, for use in code where it might be mistaken for
            a letter Z or a numeral 7.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_7"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_7">
            <summary>
            Numeric character 2, for use in code where it might be mistaken for
            a letter Z or a numeral 7.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_2"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_LC_I">
            <summary>
            Lower case I, for use in code, where it might be easily mistaken for
            a number 1 or a letter L.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_UC_I">
            <summary>
            Upper case I, for use in code, where it might be easily mistaken for
            a number 1 or a letter L.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_1"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_LC_L">
            <summary>
            Lower case L, for use in code, where it might be easily mistaken for
            a number 1 or a letter I.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_I"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_1"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_UC_L">
            <summary>
            Upper case L, for use in code, where it might be easily mistaken for
            a number 1 or a letter I.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_1"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_LC_O">
            <summary>
            Lower case O, for use in code where it might be easily mistaken for
            a number zero. 
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_0"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_UC_O">
            <summary>
            Upper case O, for use in code where it might be easily mistaken for
            a number zero.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_0"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_LC_Z">
            <summary>
            Lower case Z, for use in code where it might be easily mistaken for
            a numeric character 2 or 7.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_2"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_7"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_UC_Z">
            <summary>
            Upper case Z, for use in code where it might be easily mistaken for
            a numeric character 2 or 7.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_2"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_7"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHECK_MARK_CHAR">
            <summary>
            The check-mark character prints as such only in selected Windows
            fonts.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.COLON">
            <summary>
            Use this when your code requires a colon literal, when you want the
            listing to be crystal clear about what it is.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.AMPERSAND"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COMMA"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.HASH_TAG"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PERCENT_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PIPE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SEMICOLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.TAB_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.UNDERSCORE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialStrings.COLON"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.COMMA">
            <summary>
            Use this when your code requires a comma literal, when you want the
            listing to be crystal clear about what it is.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.AMPERSAND"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.HASH_TAG"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PERCENT_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PIPE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SEMICOLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.TAB_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.UNDERSCORE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialStrings.COMMA"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.DLM_FORMAT_ITEM_BEGIN">
            <summary>
            Use this when you code requires  a Left French Brace literal, such
            as at the beginning of a Format Item.
            </summary>
            <remarks>
            This constant is copied from WizardWrx.FormatStringEngine.FormatItem,
            in which it is called DLM_ITEM_BEGIN, for use independently of that
            library, which brings with it a chain of otherwise unused dependent
            DLLs.
            
            It came to this library to fill a need for finding the first format
            item in a format control string, to determine at run time how many
            characters precede a format item that spans two or more lines.
            </remarks>
            <seealso cref="F:WizardWrx.SpecialCharacters.BRACE_LEFT"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.BRACE_RIGHT"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.DOUBLE_QUOTE">
            <summary>
            Use this when your code requires a double quotation mark literal, 
            when you want the listing to be crystal clear about what it is.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.SINGLE_QUOTE"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SPACE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialStrings.DOUBLE_QUOTE"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.ENV_STR_DLM">
            <summary>
            Environment strings that appear in REG_EXPAND_SZ Registry keys and
            elsewhere are enclosed in pairs of this character.
            </summary>
            <remarks>
            Construct a valid environment string substitution token from the
            name of an environment string by calling the MakeToken extension
            method, which is visible when WizardWrx.Core is imported into your
            module.
            </remarks>
            <see cref="M:WizardWrx.StringTricks.MakeToken(System.String,System.String)"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.EQUALS_SIGN">
            <summary>
            Use this constant when your code requires a literal equals sign.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.HYPHEN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.HASH_TAG"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.UNDERSCORE_CHAR"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.FULL_STOP">
            <summary>
            Use this character to unambiguously denote a period character, for
            example, when specifying a delimiter character or appending a full
            stop character to a string.
            </summary>
            <seealso cref="F:WizardWrx.SpecialStrings.FULL_STOP"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.HASH_TAG">
            <summary>
            Use this constant to specify a hash-tag literal character
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.HYPHEN">
            <summary>
            Literal hyphens are also easily confused in code, especially with
            minus signs.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.EQUALS_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.HASH_TAG"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.UNDERSCORE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialStrings.HYPHEN"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.LAST_ASCII_CHAR">
            <summary>
            The highest integer that can represent any ASCII character is 255,
            which is all 8 bits turned ON.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.LINEFEED">
            <summary>
            Use this character anywhere in your code that requires a bare
            linefeed character.
            </summary>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_NEWLINE"/>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_CARRIAGE_RETURN"/>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_LINEFEED"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.NONBREAKING_SPACE_CHAR">
            <summary>
            The non-breaking space character doesn't print; although the Unicode
            encoding treats it as a white space character, most other encodings,
            including both Unicode and US-ASCII, do not.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.NULL_CHAR">
            <summary>
            Use this when your code requires a literal null character, and you
            want the listing to be crystal clear. This can be especially useful
            to distinguish a null character from a null reference.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.PARENTHESIS_LEFT">
            <summary>
            Use this in your code to specify a left parenthesis, also called an
            opening parenthesis, as a character literal.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.PARENTHESIS_RIGHT"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.BRACE_LEFT"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.BRACKET_LEFT"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.PARENTHESIS_RIGHT">
            <summary>
            Use this in your code to specify a right parenthesis, also called a
            closing parenthesis, as a character literal.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.PARENTHESIS_LEFT"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.BRACE_RIGHT"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.BRACKET_RIGHT"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.PERCENT_SIGN">
            <summary>
            Use this when your code requires a ampersand literal, when you want the
            listing to be crystal clear about what it is.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.AMPERSAND"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COMMA"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.HASH_TAG"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SEMICOLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.TAB_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.UNDERSCORE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialStrings.PERCENT_SIGN"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.PIPE_CHAR">
            <summary>
            How have I got on this long without my faithful field separator?
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.AMPERSAND"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COMMA"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.HASH_TAG"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PERCENT_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SEMICOLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.TAB_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.UNDERSCORE_CHAR"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.QUESTION_MARK">
            <summary>
            The question mark is another special character that is frequently
            used as an operator; use this to differentiate such use from that of
            an operand.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.SEMICOLON">
            <summary>
            Use this when your code requires a semicolon literal, when you want
            the listing to be crystal clear about what it is.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.AMPERSAND"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COMMA"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.HASH_TAG"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PERCENT_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PIPE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.TAB_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.UNDERSCORE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialStrings.SEMICOLON"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.SINGLE_QUOTE">
            <summary>
            Use this when your code requires a single quotation mark literal, 
            when you want the listing to be crystal clear about what it is.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.DOUBLE_QUOTE"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SPACE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialStrings.SINGLE_QUOTE"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.SPACE_CHAR">
            <summary>
            Use this when your code requires a single space when you want the
            listing to be crystal clear about what it is.
            </summary>
            <seealso cref="F:WizardWrx.SpecialStrings.SPACE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.DOUBLE_QUOTE"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.EQUALS_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.HASH_TAG"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SINGLE_QUOTE"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SPACE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.TAB_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.UNDERSCORE_CHAR"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.TAB_CHAR">
            <summary>
            Use this when your code requires a tab literal, when you want the
            listing to be crystal clear about what it is.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.AMPERSAND"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COMMA"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.HASH_TAG"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PERCENT_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PIPE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SEMICOLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.UNDERSCORE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialStrings.TAB_CHAR"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.UNDERSCORE_CHAR">
            <summary>
            Underscores can be really hard to see in code, both on paper and
            on screen.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.DOUBLE_QUOTE"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SINGLE_QUOTE"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SPACE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.EQUALS_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.HYPHEN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.TAB_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialStrings.UNDERSCORE_CHAR"/>
        </member>
        <member name="T:WizardWrx.SpecialStrings">
            <summary>
            This class defines special purpose strings that are either difficult to
            get right in the first place, or display ambiguously in text editors and
            printed source code listings.
            
            Since static classes are implicitly sealed, this class cannot be inherited.
            </summary>
            <remarks>
            For ease of access, I promoted the classes that expose only constants to
            the root of the WizardWrx namespace.
            </remarks>
            <seealso cref="T:WizardWrx.ArrayInfo"/>
            <seealso cref="T:WizardWrx.MagicNumbers"/>
            <seealso cref="T:WizardWrx.SpecialCharacters"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.AMPERSAND">
            <summary>
            Use this when you need to remove or replace ampersand literals in a string.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.AMPERSAND"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.AT_CHAR">
            <summary>
            Use this when your code requires a string composed of a single AT
            character literal, and you want the listing to be crystal clear
            about what it is.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.AT_CHAR"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.ASP_APP_DIR_DEFAULT_START_PAGE">
            <summary>
            A URI that ends with a forward slash calls forth this specially
            named page.
            </summary>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_APP_START_PAGE_KEY"/>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_RELATIVE_PATH_BEGIN"/>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_REL_EXEC_PATH_PREFIX"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.ASP_APP_START_PAGE_KEY">
            <summary>
            Key, in web.config, that contains the name of the application's
            start (home) page.
            </summary>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_APP_DIR_DEFAULT_START_PAGE"/>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_RELATIVE_PATH_BEGIN"/>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_REL_EXEC_PATH_PREFIX"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.ASP_RELATIVE_PATH_BEGIN">
            <summary>
            Relative path strings returned by the Request object begin with one
            of these.
            </summary>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_APP_DIR_DEFAULT_START_PAGE"/>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_APP_START_PAGE_KEY"/>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_REL_EXEC_PATH_PREFIX"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.ASP_REL_EXEC_PATH_PREFIX">
            <summary>
            Relative path strings returned by the Request object begin with one
            of these.
            </summary>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_APP_DIR_DEFAULT_START_PAGE"/>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_APP_START_PAGE_KEY"/>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_RELATIVE_PATH_BEGIN"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.COLON">
            <summary>
            This is one of many single characters that are frequently needed as
            single-character string constants.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.COLON"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.COMMA">
            <summary>
            This is one of many single characters that are frequently needed as
            single-character string constants.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.COMMA"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.DOUBLE_QUOTE">
            <summary>
            This is one of many single characters that are frequently needed as
            single-character string constants.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.DOUBLE_QUOTE"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.EMPTY_STRING">
            <summary>
            I like having a way to initialize a constant to the empty string.
            </summary>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_FIRST_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_IS_EMPTY"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_INVALID_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_SECOND_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.INDEX_FROM_ORDINAL"/>
            <seealso cref="F:WizardWrx.ArrayInfo.NEXT_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ORDINAL_FROM_INDEX"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EMPTY_STRING_LENGTH"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.ERRMSG_SUCCESS_PLACEHOLDER">
            <summary>
            Since ErrorExit is never invoked for ERROR_SUCCESS, and the table of
            error messages is indexed by status code, this string holds its spot
            in the table of error messages, but is never rendered. Hence, it can
            be kept out of the managed string resources for applications. This
            string is publicly accessible through a static method exported by
            this library, ExceptionLogger.GetSpecifiedReservedErrorMessage.
            </summary>
            <remarks>
            A related managed string resource, ERRMSG_SUCCESS, is available for
            public consumption; use it in lieu of this string for I18N.
            
            Two other strings, ERRMSG_RUNTIME and ERRMSG_INVALID_COMMAND_LINE,
            are also defined in this assembly.
            </remarks>
            <see cref="F:WizardWrx.MagicNumbers.ERROR_SUCCESS"/>
            <seealso cref="F:WizardWrx.MagicNumbers.ERROR_RUNTIME"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.FULL_STOP">
            <summary>
            This is one of many single characters that are frequently needed as
            single-character string constants.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.FULL_STOP"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.HYPHEN">
            <summary>
            This is one of many single characters that are frequently needed as
            single-character string constants.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.HYPHEN"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.HTML_COMMENT_PREFIX">
            <summary>
            Minimal HTML (and XML) comment prefix string.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialStrings.HTML_COMMENT_PREFIX_SP">
            <summary>
            HTML (and XML) comment prefix string, followed by a single space.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialStrings.HTML_COMMENT_SUFFIX">
            <summary>
            Minimal HTML (and XML) comment suffix string.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialStrings.HTML_COMMENT_SUFFIX_SP">
            <summary>
            HTML (and XML) comment suffix string, preceded by a single space.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialStrings.HTML_NONBREAKING_SPACE">
            <summary>
            Web Developers are always needing a non-breaking space, for use as
            filler, especially in dynamically generated tables.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialStrings.LOCALHOST">
            <summary>
            The DNS name of the local loop-back is always "localhost".
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialStrings.LOCALHOST_IP_ADDR">
            <summary>
            The local loop-back has the reserved IP address of 127.0.0.1.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialStrings.PERCENT_SIGN">
            <summary>
            Use this when you need to remove or replace ampersand literals in a
            string.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.PERCENT_SIGN"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.SEMICOLON">
            <summary>
            This is one of many single characters that are frequently needed as
            single-character string constants.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.SEMICOLON"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.SINGLE_QUOTE">
            <summary>
            This is one of many single characters that are frequently needed as
            single-character string constants.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.SINGLE_QUOTE"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.SPACE_CHAR">
            <summary>
            Use this when you need a space character in a context that requires
            a string representation.
            </summary>
            <remarks>
            Heretofore, I have made do with the ToString method on the 
            like-named character, but it annoyed me whenever I did so because I
            wanted th use a real constant.
            </remarks>
            <seealso cref="F:WizardWrx.SpecialCharacters.SPACE_CHAR"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.SPACING_TEMPLATE">
            <summary>
            Use this template when you need to either precede or follow a line
            of otherwise static text with a newline.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialStrings.STRING_SPLIT_CARRIAGE_RETURN">
            <summary>
            Use this string as the solitary element of an array of strings to
            split a string that contains text from a file of lines delimited by
            carriage returns only.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CARRIAGE_RETURN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.LINEFEED"/>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_LINEFEED"/>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_NEWLINE"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.STRING_SPLIT_LINEFEED">
            <summary>
            Use this string as the solitary element of an array of strings to
            split a string that contains text from a file of lines delimited by
            line feeds only.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CARRIAGE_RETURN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.LINEFEED"/>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_CARRIAGE_RETURN"/>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_NEWLINE"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.STRING_SPLIT_NEWLINE">
            <summary>
            Use this string as the solitary element of an array of strings to
            split a string that contains text from a file into an array of
            strings, each element of which is a line of text, stripped of its
            line ending, if any.
            </summary>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_CARRIAGE_RETURN"/>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_LINEFEED"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CARRIAGE_RETURN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.LINEFEED"/>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_CARRIAGE_RETURN"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.TAB_CHAR">
            <summary>
            This is one of many single characters that are frequently needed as
            single-character string constants.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.TAB_CHAR"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.UNDERSCORE_CHAR">
            <summary>
            This is one of many single characters that are frequently needed as
            single-character string constants.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.UNDERSCORE_CHAR"/>
        </member>
        <member name="T:WizardWrx.StringTricks">
            <summary>
            This is a class of static methods (functions) for performing common
            tasks not provided by the System.String class. Most, but not all, have
            become obsolete, and are being retired in favor of the StringExtensions
            class in the WizardWrx.Core namespace.
            </summary>
        </member>
        <member name="F:WizardWrx.StringTricks.DEFAULT_TOKEN_DELM">
            <summary>
            Default token terminator string used by the version of public static
            method, MakeToken, which takes one argument.
            </summary>
        </member>
        <member name="M:WizardWrx.StringTricks.AdjustNumberOfNoun(System.UInt32,System.String,System.String,System.String)">
            <summary>
            If the count of objects to which a noun refers is greater than 1,
            replace its singular form with its plural form. Use this method to
            generate grammatically correct sentences in which the noun's number
            is grammatically correct.
            </summary>
            <param name="puintNumber">
            Base the adjustment on this number.
            </param>
            <param name="pstrNounSingular">
            Specify the noun to adjust, which is assumed to be in its singular
            form, and that its plural is the same word with the letter "S"
            appended.
            </param>
            <param name="pstrPhrase">
            Replace all instances of pstrNoun in this string with the plural of
            pstrNoun if pintNumber is greater than 1.
            </param>
            <param name="pstrPluralForm">
            Specify the plural form of pstrSingularForm, either outright or as a
            plus sign followed immediately by the suffix to append.
            
            If this arguments is a null reference or the empty string, the
            hard coded default suffix, a lower case s, is appended.
            </param>
            <returns>
            The return value is pstrPhrase, amended if needed to reflect the
            correct number for pstrNoun.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.AppendFullStopIfMissing(System.String)">
            <summary>
            Unless the last character of the input string is a period (full
            stop), append one to the returned string.
            </summary>
            <param name="pstrInput">
            Specify the input string to evaluate and edit as needed.
            </param>
            <returns>
            The input string is returned with a period appended to it. If it already
            has one, the input string is returned without changes.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ArrayOfOne(System.Char)">
            <summary>
            Return a one-element array containing the input character, for use
            as input to the Split method of the system.string class.
            </summary>
            <param name="pchrTheCharacter">
            Character to use as the split delimiter.
            </param>
            <returns>
            Array of one element, ready to feed to the string.split method.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ArrayOfOne(System.String)">
            <summary>
            Return a one-element array containing the input string, for use
            as input to the Split method of the system.string class.
            </summary>
            <param name="pstrTheString">
            String to use as the split delimiter.
            </param>
            <returns>
            Array of one element, ready to feed to the string.split method.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.Chop(System.String)">
            <summary>
            Return a new string with the terminal newline, if present, removed.
            </summary>
            <param name="pstrIn">
            String to be chopped
            </param>
            <returns>
            Chopped string
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.CountSubstrings(System.String,System.String)">
             <summary>
             Strangely, the String class is missing an important static method to
             count substrings within a string. This is the missing method.
             </summary>
             <param name="pstrSource">
             String in which to count occurrences of substring pstrToCount.
            
             If pstrSource is null or empty, the method returns zero.
             </param>
             <param name="pstrToCount">
             Substring to count in string pstrSource. An empty string causes the
             method to return MagicNumbers.STRING_INDEXOF_NOT_FOUND, or -1.
             </param>
             <returns>
             Number of times, if any, that string pstrToCount occurs in string
             pstrSource, or MagicNumbers.STRING_INDEXOF_NOT_FOUND (-1) if
             pstrToCount is either null or empty.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.CountSubstrings(System.String,System.String,System.StringComparison)">
             <summary>
             Strangely, the String class is missing an important static method to
             count substrings within a string. This is the missing method.
             </summary>
             <param name="pstrSource">
             String in which to count occurrences of substring pstrToCount.
            
             If pstrSource is null or empty, the method returns zero.
             </param>
             <param name="pstrToCount">
             Substring to count in string pstrSource. An empty string causes the
             method to return MagicNumbers.STRING_INDEXOF_NOT_FOUND, or -1.
             </param>
             <param name="penmComparisonType">
             A member of the StringComparison enumeration, which defines the
             rules for performing the comparison.
             </param>
             <returns>
             Number of times, if any, that string pstrToCount occurs in string
             pstrSource, or MagicNumbers.STRING_INDEXOF_NOT_FOUND (-1) if
             pstrToCount is either null or empty.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.DisplayNullSafely(System.Object)">
            <summary>
            Wrap an object reference that may happen to be null in a call to
            this method to guarantee that passing it into a method such as
            string.Format, Console.WriteLine, or one of their many cousins,
            to prevent it throwing a null reference exception.
            </summary>
            <param name="pobjAnything">
            Since everything inherits a Tostring method from Object, this method
            is safe for all types.
            </param>
            <returns>
            The return value is either the string representation of the input or
            a string representation of the word "null" enclosed in square
            brackets.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.EncloseInChar(System.String,System.Char)">
            <summary>
            Append a specified character to both ends of a string, unless it is
            already present.
            </summary>
            <param name="pstrIn">
            String to evaluate, which may, or may not, end with the character
            specified in pchrEnd.
            </param>
            <param name="pchrEnd">
            Character to append, if absent.
            </param>
            <returns>
            String with character pchrEnd at both ends.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ExtractBetweenIndexOfs(System.String,System.Int32,System.Int32)">
            <summary>
            Extract the substring bounded by the characters at either end of it.
            </summary>
            <param name="pstrWholeString">
            Extract the substring from this string.
            </param>
            <param name="pintPosBegin">
            This integer is the position, given by IndexOf, of the character
            that bounds the left end of the desired substring.
            </param>
            <param name="pintPosEnd">
            This integer is the position, given by IndexOf, of the character
            that bounds the right end of the desired substring.
            </param>
            <returns>
            The returned substring begins with the character immediately to the
            right of the left hand bounding character, and ending with the last
            character before the right hand bounding character.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ExtractBetweenIndexOfs(System.String,System.String,System.Int32,System.Int32)">
             <summary>
             Extract the substring bounded by the characters at either end of it.
             </summary>
             <param name="pstrWholeString">
             Extract the substring from this string.
             </param>
             <param name="pstrLeftMarker">
             This overload handles the case where the left boundary is bounded by
             a string. The method needs a copy of the string in order to find the
             true beginning of the substring to extract, and to compute its
             length.
             </param>
             <param name="pintPosBegin">
             This integer is the position, given by IndexOf, of the character
             that bounds the left end of the desired substring.
             </param>
             <param name="pintPosEnd">
             This integer is the position, given by IndexOf, of the character
             that bounds the right end of the desired substring.
             </param>
             <returns>
             The returned substring begins with the character immediately to the
             right of the left hand bounding character, and ending with the last
             character before the right hand bounding character.
            
             Inputs and computed values are thoroughly sanity checked to prevent
             run-time exceptions. If anything is out of order, an empty string is
             returned.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ExtractBoundedSubstrings(System.String,System.Char)">
             <summary>
             Extract a substring that is bounded by a character. See Remarks.
             </summary>
             <param name="pstrWholeString">
             The substring is extracted from this string.
             </param>
             <param name="pchrBoundingCharacter">
             This is the bounding character. Please see Remarks.
             </param>
             <returns>
             This is the desired substring, without its bounding characters. See
             Remarks.
             </returns>
             <remarks>
             The left and right ends must be bounded by the same character. To
             extract a string bounded on each end by a different character, use
             the next overload.
            
             Inputs and computed values are thoroughly sanity checked to prevent
             run-time exceptions. If anything is out of order, an empty string is
             returned.
             </remarks>
        </member>
        <member name="M:WizardWrx.StringTricks.ExtractBoundedSubstrings(System.String,System.Char,System.Char)">
             <summary>
             Extract a substring that is bounded by a character. See Remarks.
             </summary>
             <param name="pstrWholeString">
             The substring is extracted from this string.
             </param>
             <param name="pchrLeftBound">
             This is the character that marks the left end of the string. See
             Remarks.
             </param>
             <param name="pchrRightBound">
             This is the character that marks the right end of the string. See
             Remarks.
             </param>
             <returns>
             This is the desired substring, without its bounding characters. See
             Remarks.
             </returns>
             <remarks>
             The left and right ends are expected to be bounded by different
             characters. To  extract a string bounded on each end by the same
             character, use the previous overload.
            
             Inputs and computed values are thoroughly sanity checked to prevent
             run-time exceptions. If anything is out of order, an empty string is
             returned.
             </remarks>
        </member>
        <member name="M:WizardWrx.StringTricks.ExtractBoundedSubstrings(System.String,System.String,System.String)">
             <summary>
             Extract a substring that is bounded by a pair of substrings. See
             Remarks.
             </summary>
             <param name="pstrWholeString">
             The substring is extracted from this string.
             </param>
             <param name="pstrLeftBound">
             This is the substring that marks the left end of the string. See
             Remarks.
             </param>
             <param name="pstrRightBound">
             This is the substring that marks the right end of the string. See
             Remarks.
             </param>
             <returns>
             This is the desired substring, without its bounding substrings. See
             Remarks.
             </returns>
             <remarks>
             The left and right ends are expected to be bounded by different
             substrings. To  extract a string bounded on each end by the same
             substring, use the same value for the third and fourth arguments.
            
             Inputs and computed values are thoroughly sanity checked to prevent
             run-time exceptions. If anything is out of order, an empty string is
             returned.
             </remarks>
        </member>
        <member name="M:WizardWrx.StringTricks.LengthOfLongestString(System.String[])">
            <summary>
            Given an array of strings, return the length of the longest string.
            </summary>
            <param name="pastrTheseStrings">
            The list of strings to evaluate is supplied as an array of strings,
            which may be an anonymous array, constructed on the fly in the
            argument list.
            </param>
            <returns>
            The return value is the length of the longest string. If the array
            is empty or is composed entirely of empty strings, the return value
            is zero. Since it begins with a null reference test, this routine is
            always successful.
            </returns>
            <remarks>
            Feed the return value to the PadRight method on a string to get back
            a string that, when used as a label, yields vertically aligned data.
            </remarks>
        </member>
        <member name="M:WizardWrx.StringTricks.MakeToken(System.String)">
             <summary>
             Given a string containing the name of a form control (field) or
             other token, create its place holder token.
             </summary>
             <param name="pstrFieldName">
             String containing the name of the token.
             </param>
             <returns>
             String containing the text of the corresponding template text place
             holder. See Remarks.
             </returns>
             <remarks>
             The string is constructed by appending a standard token delimiter,
             which is a pair of dollar signs, to each end of the string.
            
             The token is exposed as a static property, DEFAULT_TOKEN_DELM.
             </remarks>
        </member>
        <member name="M:WizardWrx.StringTricks.MakeToken(System.String,System.String)">
            <summary>
            Given a string containing the name of a form control (field) or
            other token, and another string containing a static token, create
            its place holder token.
            </summary>
            <param name="pstrFieldName">
            String containing the name of the token.
            </param>
            <param name="pstrTokenEnds"></param>
            <returns>
            The string is constructed by appending the token delimiter specified
            in argument pstrTokenEnds to both ends of the string specified in
            argument pstrFieldName.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.QuoteString(System.String)">
            <summary>
            Append a quote character to both ends of a string, unless it is
            already present.
            </summary>
            <param name="pstrIn">
            String to evaluate, which may, or may not, end with the characterr
            specified in pchrEnd.
            </param>
            <returns>
            String with quote character at both ends.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.RemoveEndQuotes(System.String)">
            <summary>
            Remove ending quotation marks from a string, if present.
            </summary>
            <param name="pstrIn">
            String to evaluate, which may, or may not, end with quotes.
            </param>
            <returns>
            String with ending quotes, if present, removed.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.RemoveEndChars(System.String,System.Char)">
            <summary>
            Remove ending character, such as brackets, from a string, if present.
            </summary>
            <param name="pstrIn">
            String to evaluate, which may, or may not, end with the characterr
            specified in pchrEnd.
            </param>
            <param name="pchrEnd">
            Character to remove, if present.
            </param>
            <returns>
            String with character pchrEnd removed from both ends.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ReplaceToken(System.String,System.String,System.String)">
            <summary>
            Given a string of text, another string of place holder text, which
            occurs zero or more times in the input string, return a string in
            which the place holder text is replaced with new text, supplied by
            the third argument.
            </summary>
            <param name="pstrToSearch">
            String to be searched and changed.
            </param>
            <param name="pstrToFind">
            String to be found and replaced.
            </param>
            <param name="strReplaceWith">
            String to substitute for all occurrences of string pstrToFind.
            </param>
            <returns>
            String pstrToSearch, with all occurrences of string pstrToFind
            replaced with string strReplaceWith.
            </returns>
            <remarks>
            Say it's syntactic sugar if you insist, but I'll keep using it in my
            code, and may eventually implement a version that takes references
            as arguments.
            </remarks>
        </member>
        <member name="M:WizardWrx.StringTricks.ReplaceTokensFromList(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Given a string containing tokens of the form "^^ListKeyValue^^"
            where ListKeyValue is the value of a key in the pnvcList collection,
            which may or may not exist in the collection, replace all such
            tokens with the contents of the like named value in the collection.
            </summary>
            <param name="pstrMsg">
            String containing the message containing the substitution tokens.
            </param>
            <param name="pnvcList">
            A NameValueCollection, in which each key represents a token, and its
            value represents the value to be substituted for it.
            </param>
            <returns>
            String with tokens replaced, and tokens that have no corresponding
            object in the pnvcList collection preserved.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ReplaceTokensFromList(System.String,System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
             <summary>
             Replace place holders (markers) with the value of the corresponding
             form control (field), or a default value, if the field is empty and
             a default is designated.
             </summary>
             <param name="pstrTemplate">
             String containing a template containing the text and place markers.
             </param>
             <param name="pnvcFields">
             NameValueCollection containing the form control (field) values.
             </param>
             <param name="pnvcDefaults">
             NameValueCollection containing the form control (field) or token
             default values.
            
             Default values are optional. If omitted, the method substitutes an
             empty string.
             </param>
             <returns>
             String containing the text in the template, with all tokens
             formatted with default endings replaced by the contents of the
             corresponding, and like named, control (field) on the input form.
            
             Tokens bounded by "##" are replaced by strings from the Session
             variables collection. The same defaults collection is used for both.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ReplaceTokensFromList(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
             Given a string containing tokens of the form "^^ListKeyValue^^"
             where ListKeyValue is the value of a key in the pnvcList collection,
             which may or may not exist in the collection, replace all such
             tokens with the contents of the like named value in the collection.
             </summary>
             <param name="pstrMsg">
             String containing the message containing the substitution tokens.
             </param>
             <param name="pdctList">
             A Dictionary, in which each key represents a token, and its value
             represents the value to be substituted for it.
            
             The Dictionary may contain anything, as it accepts any Object. The
             required substitution string is obtained by calling the default
             ToString method on each Object. To supply a format string, which
             will be applied to each Object, in turn, use the next overload.
             </param>
             <returns>
             String with tokens replaced, and tokens that have no corresponding
             object in the pnvcList collection preserved.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ReplaceTokensFromList(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
             Given a string containing tokens of the form "^^ListKeyValue^^"
             where ListKeyValue is the value of a key in the pnvcList collection,
             which may or may not exist in the collection, replace all such
             tokens with the contents of the like named value in the collection.
             </summary>
             <param name="pstrMsg">
             String containing the message containing the substitution tokens.
             </param>
             <param name="pdctList">
             A Dictionary, in which each key represents a token, and its value
             represents the value to be substituted for it.
            
             The Dictionary may contain anything, as it accepts any Object. The
             required substitution string is obtained by calling the default
             ToString method on each Object. To supply a format string, which
             will be applied to each Object, in turn, use the next overload.
             </param>
             <param name="pdctDefaults">
             A Dictionary, in which each key represents a token, and its value
             represents the default value to be substituted for it, if there is
             no corresponding key in dictionary pdctList.
            
             The Dictionary may contain anything, as it accepts any Object. The
             required substitution string is obtained by calling the default
             ToString method on each Object. To supply a format string, which
             will be applied to each Object, in turn, use the next overload.
             </param>
             <returns>
             String with tokens replaced, and tokens that have no corresponding
             object in the pnvcList OR the pdctDefaults collection preserved.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ReplaceTokensFromList(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
             <summary>
             Given a string containing tokens of the form "^^ListKeyValue^^"
             where ListKeyValue is the value of a key in the pnvcList collection,
             which may or may not exist in the collection, replace all such
             tokens with the contents o object.
             </summary>
             <param name="pstrMsg">
             String containing the message containing the substitution tokens.
             </param>
             <param name="pdctList">
             A Dictionary, in which each key represents a token, and its value
             represents the value to be substituted for it.
            
             The Dictionary may contain anything, as it accepts any Object. The
             required substitution string is obtained by calling the default
             ToString method on each Object. To supply a format string, which
             will be applied to each Object, in turn, use the next overload.
             </param>
             <param name="pstrFormat">
             Format string, acceptable to the static String.Format method, which
             is used to format the string representation of each object.
            
             The string must contain a "[0}" placeholder, which may occur one or
             more times in the format string, which is replaced by the string
             returned by the ToString method of each object.
             </param>
             <returns>
             String with tokens replaced, and tokens that have no corresponding
             object in the pnvcList collection preserved.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ReplaceTokensFromList(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
             <summary>
             Given a string containing tokens of the form "^^ListKeyValue^^"
             where ListKeyValue is the value of a key in the pnvcList collection,
             which may or may not exist in the collection, replace all such
             tokens with the contents of the like named session object.
             </summary>
             <param name="pstrMsg">
             String containing the message containing the substitution tokens.
             </param>
             <param name="pdctList">
             A Dictionary, in which each key represents a token, and its value
             represents the value to be substituted for it.
            
             The Dictionary may contain anything, as it accepts any Object. The
             required substitution string is obtained by calling the default
             ToString method on each Object. To supply a format string, which
             will be applied to each Object, in turn, use the next overload.
             </param>
             <param name="pdctDefaults">
             A Dictionary, in which each key represents a token, and its value
             represents the default value to be substituted for it, if there is
             no corresponding key in dictionary pdctList.
            
             The Dictionary may contain anything, as it accepts any Object. The
             required substitution string is obtained by calling the default
             ToString method on each Object. To supply a format string, which
             will be applied to each Object, in turn, use the next overload.
             </param>
             <param name="pstrFormat">
             Format string, acceptable to the static String.Format method, which
             is used to format the string representation of each object.
            
             The string must contain a "[0}" placeholder, which may occur one or
             more times in the format string, which is replaced by the string
             returned by the ToString method of each object.
             </param>
             <returns>
             String with tokens replaced, and tokens that have no corresponding
             object in the pnvcList OR the pdctDefaults collection preserved.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ParseCommentInHTMLComment(System.String)">
             <summary>
             Extract parameters, expressed as key-value pairs, from a standard
             HTML comment.
             </summary>
             <param name="pstrInput">
             String containing a well formed HTML comment, surrounding the
             key-value pairs. If the string is not a well formed HTML comment,
             with a single space between the comment delimiters and the body,
             or the string is null or empty, the returned collection is empty.
             </param>
             <returns>
             A NameValueCollection of parameter names and values, which may be
             empty, but is guaranteed to be returned, empty or not.
             </returns>
             <example>
             <code>
             Parse this: &lt;!-- ForPage=default;UseTable=False --&gt;
            
             Return this:
            
            			=======================
            			Name		Value
            			-----------	-----------
            			ForPage		default
            			UseTable	False
            			=======================
             </code>
             <para>The returned NameValueCollection contains two members.</para>
             <para>Since this method guarantees to return an initialized
             NameValueCollection, the empty collection is allocated by the first
             statement, and is unconditionally returned by the last statement.</para>
             </example>
        </member>
        <member name="M:WizardWrx.StringTricks.Truncate(System.String,System.Int32)">
             <summary>
             Supply the missing Truncate function to members of the String class.
             </summary>
             <param name="pstrSource">
             String to truncate, if it is longer than pintMaxLength.
            
             A null string is treated as an empty string, and the return value
             for either is an empty string.
             </param>
             <param name="pintMaxLength">
             Desired maximum length of the returned string. If pstrSource is
             longer than pintMaxLength characters, the first pintMaxLength are
             returned. Otherwise, the whole string is returned.
            
             If pintMaxLength is less than or equal to zero, an empty string is
             returned.
             </param>
             <returns>
             If the string length is less than or equal to the specified maximum
             length, the whole string is returned.
            
             Otherwise, the first pintMaxLength characters are returned.
            
             Regardless, the return value is a new System.String object.
             </returns>
        </member>
        <member name="T:WizardWrx.Common.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.ANSWER_IS_FALSE">
            <summary>
              Looks up a localized string similar to false.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.ANSWER_IS_NO">
            <summary>
              Looks up a localized string similar to no.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.ANSWER_IS_TRUE">
            <summary>
              Looks up a localized string similar to true.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.ANSWER_IS_YES">
            <summary>
              Looks up a localized string similar to yes.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.DEFAULT_EVENT_SOURCE_ID_STRING">
            <summary>
              Looks up a localized string similar to WizardWrx.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.ERRMSG_ARG_IS_NULL">
            <summary>
              Looks up a localized string similar to The specified argument is a null reference..
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.ERRMSG_ARG_IS_NULL_OR_EMPTY">
            <summary>
              Looks up a localized string similar to The argument is a null reference or the empty string..
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.ERRMSG_ARG_OUT_OF_RANGE">
            <summary>
              Looks up a localized string similar to Value of {0} is out of range; it must be between {1} and {2}..
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.ERRMSG_ARRAY_IS_EMPTY">
            <summary>
              Looks up a localized string similar to Array {0} ie empty; it exists, but contains no elements..
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.ERRMSG_BADSTRING">
            <summary>
              Looks up a localized string similar to Unable to process string {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.ERRMSG_EMPTY_STRING_NEVER_VALID">
            <summary>
              Looks up a localized string similar to The empty string is never valid in this context..
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.ERRMSG_FILE_IS_EMPTY">
            <summary>
              Looks up a localized string similar to Input file {0} is empty..
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.ERRMSG_FILE_NOT_FOUND">
            <summary>
              Looks up a localized string similar to Input file {0} cannot be found..
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.ERRMSG_INTEGER2HEXSTR_INVALID_INPUT">
            <summary>
              Looks up a localized string similar to The type of the first argument, pintegralValue, is invalid.{2}Argument value = {0}{2}Argument type  = {1}{2}{2}Limitations of the underlying formatting engine{2}restrict this method to integral types.{2}.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.ERRMSG_INVALID_COMMAND_LINE">
            <summary>
              Looks up a localized string similar to At least one command line argument is invalid..
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.ERRMSG_INVALID_FIELD_IN_INPUT_RECORD">
            <summary>
              Looks up a localized string similar to Input file {0}, record {1} is invalid..
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.ERRMSG_NULLREF_NEVER_VALID">
            <summary>
              Looks up a localized string similar to A null reference to a string is never valid in this context..
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.ERRMSG_REFERENCE_IS_NULL">
            <summary>
              Looks up a localized string similar to Object {0} is a null reference..
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.ERRMSG_RUNTIME">
            <summary>
              Looks up a localized string similar to A run-time exception has occurred..
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.ERRMSG_SUCCESS">
            <summary>
              Looks up a localized string similar to The task completed successfully..
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.MSG_BLANK_CAPS">
            <summary>
              Looks up a localized string similar to BLANK.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.MSG_BLANK_STRING">
            <summary>
              Looks up a localized string similar to [blank].
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.MSG_INTEGER_EVENLY_DIVISIBLE_BY">
            <summary>
              Looks up a localized string similar to is evenly divisible by.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.MSG_INTEGER_IS_EVEN">
            <summary>
              Looks up a localized string similar to is even.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.MSG_INTEGER_IS_ODD">
            <summary>
              Looks up a localized string similar to is odd.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.MSG_IS">
            <summary>
              Looks up a localized string similar to is.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.MSG_IS_NOT">
            <summary>
              Looks up a localized string similar to is not.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.MSG_OBJECT_DOES_NOT_EXIST">
            <summary>
              Looks up a localized string similar to does not exist.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.MSG_OBJECT_EXISTS">
            <summary>
              Looks up a localized string similar to exists.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.MSG_OBJECT_IS_ABSENT">
            <summary>
              Looks up a localized string similar to is absent.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.MSG_OBJECT_IS_MISSING">
            <summary>
              Looks up a localized string similar to is missing.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.MSG_OBJECT_IS_PRESENT">
            <summary>
              Looks up a localized string similar to is present.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.MSG_OBJECT_REFERENCE_IS_NULL">
            <summary>
              Looks up a localized string similar to [null].
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.MSG_OBJECT_REFERENCE_IS_NULL_CAPS">
            <summary>
              Looks up a localized string similar to NULL.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.MSG_STATUS_CODE">
            <summary>
              Looks up a localized string similar to {0} ({1:D} decimal).
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.MSG_STRING_IS_EMPTY">
            <summary>
              Looks up a localized string similar to [empty].
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.MSG_STRING_IS_NULL_OR_EMPTY">
            <summary>
              Looks up a localized string similar to [null or empty string].
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.MSG_THE_EMPTY_STRING">
            <summary>
              Looks up a localized string similar to [empty string].
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.MSG_VALUE_IS_FALSE">
            <summary>
              Looks up a localized string similar to false.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.MSG_VALUE_IS_INVALID">
            <summary>
              Looks up a localized string similar to invalid.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.MSG_VALUE_IS_TRUE">
            <summary>
              Looks up a localized string similar to true.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.MSG_VALUE_IS_VALID">
            <summary>
              Looks up a localized string similar to valid.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.REGISTRY_VALUE_TYPE_BINARY">
            <summary>
              Looks up a localized string similar to REG_BINARY.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.REGISTRY_VALUE_TYPE_DWORD">
            <summary>
              Looks up a localized string similar to REG_DWORD.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.REGISTRY_VALUE_TYPE_EXPAND">
            <summary>
              Looks up a localized string similar to REG_EXPAND_SZ.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.REGISTRY_VALUE_TYPE_MULTI">
            <summary>
              Looks up a localized string similar to REG_MULTI_SZ.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.REGISTRY_VALUE_TYPE_QWORD">
            <summary>
              Looks up a localized string similar to REG_QWORD.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.STACK_TRACE_ENTRY_PREFIX">
            <summary>
              Looks up a localized string similar to    at .
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.VERSION_STRING_PART_BUILD_ABBR">
            <summary>
              Looks up a localized string similar to Bld..
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.VERSION_STRING_PART_BUILD_LONG">
            <summary>
              Looks up a localized string similar to Build Number.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.VERSION_STRING_PART_BUILD_SHORT">
            <summary>
              Looks up a localized string similar to Build.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.VERSION_STRING_PART_MAJOR_ABBR">
            <summary>
              Looks up a localized string similar to Maj..
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.VERSION_STRING_PART_MAJOR_LONG">
            <summary>
              Looks up a localized string similar to Major Version.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.VERSION_STRING_PART_MAJOR_SHORT">
            <summary>
              Looks up a localized string similar to Major.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.VERSION_STRING_PART_MINOR_ABBR">
            <summary>
              Looks up a localized string similar to Min..
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.VERSION_STRING_PART_MINOR_LONG">
            <summary>
              Looks up a localized string similar to Minor Version.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.VERSION_STRING_PART_MINOR_SHORT">
            <summary>
              Looks up a localized string similar to Minor.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.VERSION_STRING_PART_REVNO_ABBR">
            <summary>
              Looks up a localized string similar to Rev..
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.VERSION_STRING_PART_REVNO_LONG">
            <summary>
              Looks up a localized string similar to Revision.
            </summary>
        </member>
        <member name="P:WizardWrx.Common.Properties.Resources.VERSION_STRING_PART_REVNO_SHORT">
            <summary>
              Looks up a localized string similar to Revision.
            </summary>
        </member>
    </members>
</doc>
