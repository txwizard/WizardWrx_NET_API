id: WizardWrx.DiagnosticInfo
language: CSharp
name:
  Default: WizardWrx.DiagnosticInfo
qualifiedName:
  Default: WizardWrx.DiagnosticInfo
type: Assembly
modifiers: {}
items:
- id: WizardWrx
  commentId: N:WizardWrx
  language: CSharp
  name:
    CSharp: WizardWrx
    VB: WizardWrx
  nameWithType:
    CSharp: WizardWrx
    VB: WizardWrx
  qualifiedName:
    CSharp: WizardWrx
    VB: WizardWrx
  type: Namespace
  assemblies:
  - WizardWrx.DiagnosticInfo
  modifiers: {}
  items:
  - id: WizardWrx.ClassAndMethodDiagnosticInfo
    commentId: T:WizardWrx.ClassAndMethodDiagnosticInfo
    language: CSharp
    name:
      CSharp: ClassAndMethodDiagnosticInfo
      VB: ClassAndMethodDiagnosticInfo
    nameWithType:
      CSharp: ClassAndMethodDiagnosticInfo
      VB: ClassAndMethodDiagnosticInfo
    qualifiedName:
      CSharp: WizardWrx.ClassAndMethodDiagnosticInfo
      VB: WizardWrx.ClassAndMethodDiagnosticInfo
    type: Class
    assemblies:
    - WizardWrx.DiagnosticInfo
    namespace: WizardWrx
    source:
      remote:
        path: DiagnosticInfo/ClassAndMethodDiagnosticInfo.cs
        branch: master
        repo: https://github.com/txwizard/WizardWrx_NET_API.git
      id: ClassAndMethodDiagnosticInfo
      path: ../DiagnosticInfo/ClassAndMethodDiagnosticInfo.cs
      startLine: 78
    summary: "\nThe static methods in this class expose the internal name, source code\nfile name, and source file line number from which calls to them\noriginated.\n"
    example: []
    syntax:
      content:
        CSharp: public static class ClassAndMethodDiagnosticInfo
        VB: Public Module ClassAndMethodDiagnosticInfo
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: WizardWrx.ClassAndMethodDiagnosticInfo.GetMyMethodName(System.String)
      commentId: M:WizardWrx.ClassAndMethodDiagnosticInfo.GetMyMethodName(System.String)
      language: CSharp
      name:
        CSharp: GetMyMethodName(String)
        VB: GetMyMethodName(String)
      nameWithType:
        CSharp: ClassAndMethodDiagnosticInfo.GetMyMethodName(String)
        VB: ClassAndMethodDiagnosticInfo.GetMyMethodName(String)
      qualifiedName:
        CSharp: WizardWrx.ClassAndMethodDiagnosticInfo.GetMyMethodName(System.String)
        VB: WizardWrx.ClassAndMethodDiagnosticInfo.GetMyMethodName(System.String)
      type: Method
      assemblies:
      - WizardWrx.DiagnosticInfo
      namespace: WizardWrx
      source:
        remote:
          path: DiagnosticInfo/ClassAndMethodDiagnosticInfo.cs
          branch: master
          repo: https://github.com/txwizard/WizardWrx_NET_API.git
        id: GetMyMethodName
        path: ../DiagnosticInfo/ClassAndMethodDiagnosticInfo.cs
        startLine: 91
      summary: "\nGet the unqualified name of the calling method.\n"
      example: []
      syntax:
        content:
          CSharp: public static string GetMyMethodName(string pstrMemberName = "")
          VB: Public Shared Function GetMyMethodName(pstrMemberName As String = "") As String
        parameters:
        - id: pstrMemberName
          type: System.String
          description: "\nThis parameter is configured as optional, and is set by the compiler\nto the unqualified name of the method that called it.\n"
        return:
          type: System.String
          description: "\nThe return value is the unqualified compile-time name of the method\nthat called it\n"
      overload: WizardWrx.ClassAndMethodDiagnosticInfo.GetMyMethodName*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.ClassAndMethodDiagnosticInfo.GetMySourceFileName(System.String)
      commentId: M:WizardWrx.ClassAndMethodDiagnosticInfo.GetMySourceFileName(System.String)
      language: CSharp
      name:
        CSharp: GetMySourceFileName(String)
        VB: GetMySourceFileName(String)
      nameWithType:
        CSharp: ClassAndMethodDiagnosticInfo.GetMySourceFileName(String)
        VB: ClassAndMethodDiagnosticInfo.GetMySourceFileName(String)
      qualifiedName:
        CSharp: WizardWrx.ClassAndMethodDiagnosticInfo.GetMySourceFileName(System.String)
        VB: WizardWrx.ClassAndMethodDiagnosticInfo.GetMySourceFileName(System.String)
      type: Method
      assemblies:
      - WizardWrx.DiagnosticInfo
      namespace: WizardWrx
      source:
        remote:
          path: DiagnosticInfo/ClassAndMethodDiagnosticInfo.cs
          branch: master
          repo: https://github.com/txwizard/WizardWrx_NET_API.git
        id: GetMySourceFileName
        path: ../DiagnosticInfo/ClassAndMethodDiagnosticInfo.cs
        startLine: 111
      summary: "\nGet the absolute (fully qualified) name of the source file in which\nthe calling method is defined.\n"
      example: []
      syntax:
        content:
          CSharp: public static string GetMySourceFileName(string pstrCallerFilePath = "")
          VB: Public Shared Function GetMySourceFileName(pstrCallerFilePath As String = "") As String
        parameters:
        - id: pstrCallerFilePath
          type: System.String
          description: "\nThis parameter is configured as optional, and is set by the compiler\nto the absolute (fully qualified) name of the source file in which\nthe method that called it is defined.\n"
        return:
          type: System.String
          description: "\nThe return value is the absolute (fully qualified) name of the file,\nindicated by <code data-dev-comment-type=\"paramref\" class=\"paramref\">pstrCallerFilePath</code>, in which the\ncall originated.\n"
      overload: WizardWrx.ClassAndMethodDiagnosticInfo.GetMySourceFileName*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.ClassAndMethodDiagnosticInfo.GetMySourceLineNumber(System.Int32)
      commentId: M:WizardWrx.ClassAndMethodDiagnosticInfo.GetMySourceLineNumber(System.Int32)
      language: CSharp
      name:
        CSharp: GetMySourceLineNumber(Int32)
        VB: GetMySourceLineNumber(Int32)
      nameWithType:
        CSharp: ClassAndMethodDiagnosticInfo.GetMySourceLineNumber(Int32)
        VB: ClassAndMethodDiagnosticInfo.GetMySourceLineNumber(Int32)
      qualifiedName:
        CSharp: WizardWrx.ClassAndMethodDiagnosticInfo.GetMySourceLineNumber(System.Int32)
        VB: WizardWrx.ClassAndMethodDiagnosticInfo.GetMySourceLineNumber(System.Int32)
      type: Method
      assemblies:
      - WizardWrx.DiagnosticInfo
      namespace: WizardWrx
      source:
        remote:
          path: DiagnosticInfo/ClassAndMethodDiagnosticInfo.cs
          branch: master
          repo: https://github.com/txwizard/WizardWrx_NET_API.git
        id: GetMySourceLineNumber
        path: ../DiagnosticInfo/ClassAndMethodDiagnosticInfo.cs
        startLine: 128
      summary: "\nGet the line number in the source file at which the call arose.\n"
      example: []
      syntax:
        content:
          CSharp: public static int GetMySourceLineNumber(int pintCallerLineNumber = 0)
          VB: Public Shared Function GetMySourceLineNumber(pintCallerLineNumber As Integer = 0) As Integer
        parameters:
        - id: pintCallerLineNumber
          type: System.Int32
          description: "\nThis parameter is configured as optional, and is set by the compiler\nto the line number in the source file where the call originated.\n"
        return:
          type: System.Int32
          description: "\nThe return value is the line number indicated by integer\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">pintCallerLineNumber</code> where the call arose.\n"
      overload: WizardWrx.ClassAndMethodDiagnosticInfo.GetMySourceLineNumber*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  WizardWrx.ClassAndMethodDiagnosticInfo.GetMyMethodName*:
    name:
      CSharp:
      - id: WizardWrx.ClassAndMethodDiagnosticInfo.GetMyMethodName*
        name: GetMyMethodName
        nameWithType: ClassAndMethodDiagnosticInfo.GetMyMethodName
        qualifiedName: WizardWrx.ClassAndMethodDiagnosticInfo.GetMyMethodName
      VB:
      - id: WizardWrx.ClassAndMethodDiagnosticInfo.GetMyMethodName*
        name: GetMyMethodName
        nameWithType: ClassAndMethodDiagnosticInfo.GetMyMethodName
        qualifiedName: WizardWrx.ClassAndMethodDiagnosticInfo.GetMyMethodName
    isDefinition: true
    commentId: Overload:WizardWrx.ClassAndMethodDiagnosticInfo.GetMyMethodName
  WizardWrx.ClassAndMethodDiagnosticInfo.GetMySourceFileName*:
    name:
      CSharp:
      - id: WizardWrx.ClassAndMethodDiagnosticInfo.GetMySourceFileName*
        name: GetMySourceFileName
        nameWithType: ClassAndMethodDiagnosticInfo.GetMySourceFileName
        qualifiedName: WizardWrx.ClassAndMethodDiagnosticInfo.GetMySourceFileName
      VB:
      - id: WizardWrx.ClassAndMethodDiagnosticInfo.GetMySourceFileName*
        name: GetMySourceFileName
        nameWithType: ClassAndMethodDiagnosticInfo.GetMySourceFileName
        qualifiedName: WizardWrx.ClassAndMethodDiagnosticInfo.GetMySourceFileName
    isDefinition: true
    commentId: Overload:WizardWrx.ClassAndMethodDiagnosticInfo.GetMySourceFileName
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  WizardWrx.ClassAndMethodDiagnosticInfo.GetMySourceLineNumber*:
    name:
      CSharp:
      - id: WizardWrx.ClassAndMethodDiagnosticInfo.GetMySourceLineNumber*
        name: GetMySourceLineNumber
        nameWithType: ClassAndMethodDiagnosticInfo.GetMySourceLineNumber
        qualifiedName: WizardWrx.ClassAndMethodDiagnosticInfo.GetMySourceLineNumber
      VB:
      - id: WizardWrx.ClassAndMethodDiagnosticInfo.GetMySourceLineNumber*
        name: GetMySourceLineNumber
        nameWithType: ClassAndMethodDiagnosticInfo.GetMySourceLineNumber
        qualifiedName: WizardWrx.ClassAndMethodDiagnosticInfo.GetMySourceLineNumber
    isDefinition: true
    commentId: Overload:WizardWrx.ClassAndMethodDiagnosticInfo.GetMySourceLineNumber
  WizardWrx.ClassAndMethodDiagnosticInfo:
    name:
      CSharp:
      - id: WizardWrx.ClassAndMethodDiagnosticInfo
        name: ClassAndMethodDiagnosticInfo
        nameWithType: ClassAndMethodDiagnosticInfo
        qualifiedName: WizardWrx.ClassAndMethodDiagnosticInfo
      VB:
      - id: WizardWrx.ClassAndMethodDiagnosticInfo
        name: ClassAndMethodDiagnosticInfo
        nameWithType: ClassAndMethodDiagnosticInfo
        qualifiedName: WizardWrx.ClassAndMethodDiagnosticInfo
    isDefinition: true
    commentId: T:WizardWrx.ClassAndMethodDiagnosticInfo
  WizardWrx:
    name:
      CSharp:
      - name: WizardWrx
        nameWithType: WizardWrx
        qualifiedName: WizardWrx
      VB:
      - name: WizardWrx
        nameWithType: WizardWrx
        qualifiedName: WizardWrx
    isDefinition: true
    commentId: N:WizardWrx
