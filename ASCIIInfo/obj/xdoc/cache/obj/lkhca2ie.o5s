id: WizardWrx.ASCIIInfo
language: CSharp
name:
  Default: WizardWrx.ASCIIInfo
qualifiedName:
  Default: WizardWrx.ASCIIInfo
type: Assembly
modifiers: {}
items:
- id: WizardWrx
  commentId: N:WizardWrx
  language: CSharp
  name:
    CSharp: WizardWrx
    VB: WizardWrx
  nameWithType:
    CSharp: WizardWrx
    VB: WizardWrx
  qualifiedName:
    CSharp: WizardWrx
    VB: WizardWrx
  type: Namespace
  assemblies:
  - WizardWrx.ASCIIInfo
  modifiers: {}
  items:
  - id: WizardWrx.ASCIICharacterDisplayInfo
    commentId: T:WizardWrx.ASCIICharacterDisplayInfo
    language: CSharp
    name:
      CSharp: ASCIICharacterDisplayInfo
      VB: ASCIICharacterDisplayInfo
    nameWithType:
      CSharp: ASCIICharacterDisplayInfo
      VB: ASCIICharacterDisplayInfo
    qualifiedName:
      CSharp: WizardWrx.ASCIICharacterDisplayInfo
      VB: WizardWrx.ASCIICharacterDisplayInfo
    type: Class
    assemblies:
    - WizardWrx.ASCIIInfo
    namespace: WizardWrx
    source:
      remote:
        path: ASCIIInfo/ASCIICharacterDisplayInfo.cs
        branch: master
        repo: https://github.com/txwizard/WizardWrx_NET_API.git
      id: ASCIICharacterDisplayInfo
      path: ../ASCIIInfo/ASCIICharacterDisplayInfo.cs
      startLine: 121
    summary: "\nInstances of this class represent individual ASCII characters. Since the\nNUL character is defined, and occupies the first element, the numeric \ncode that corresponds to a character maps directly to the corresponding\nelement in this array.\n"
    example:
    - "\nThe ASCII code for a space is 32. ASCIICharacterDisplayInfo[32], for C#,\nor ASCIICharacterDisplayInfo(32), for Visual Basic, returns the item for\nthe space character.\n\nLikewise, the ASCII code for a horizontal TAB character is 9. Hence, the\nC# expression ASCIICharacterDisplayInfo[9] evaluates to the information\nabout the TAB character. Likewise, ASCIICharacterDisplayInfo(9) does the\nsame thing in Visual Basic.\n\nThe following example comes from production code in the class library\nthat motivated me to create this library.\n\nASCIICharacterDisplayInfo [ ] asciiCharTbl = ASCII_Character_Display_Table.GetTheSingleInstance ( ).AllASCIICharacters;\nStringBuilder sbTheBadChar = new StringBuilder ( );\nsbTheBadChar.Append ( asciiCharTbl [ ( uint ) _chrBad ].DisplayText );\n\nObviously, more things go into the message before it is returned to the\ncalling routine.\n"
    syntax:
      content:
        CSharp: public class ASCIICharacterDisplayInfo
        VB: Public Class ASCIICharacterDisplayInfo
    see:
    - linkId: WizardWrx.ASCII_Character_Display_Table
      commentId: T:WizardWrx.ASCII_Character_Display_Table
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: WizardWrx.ASCIICharacterDisplayInfo.ASCIICharacter
      commentId: P:WizardWrx.ASCIICharacterDisplayInfo.ASCIICharacter
      language: CSharp
      name:
        CSharp: ASCIICharacter
        VB: ASCIICharacter
      nameWithType:
        CSharp: ASCIICharacterDisplayInfo.ASCIICharacter
        VB: ASCIICharacterDisplayInfo.ASCIICharacter
      qualifiedName:
        CSharp: WizardWrx.ASCIICharacterDisplayInfo.ASCIICharacter
        VB: WizardWrx.ASCIICharacterDisplayInfo.ASCIICharacter
      type: Property
      assemblies:
      - WizardWrx.ASCIIInfo
      namespace: WizardWrx
      source:
        remote:
          path: ASCIIInfo/ASCIICharacterDisplayInfo.cs
          branch: master
          repo: https://github.com/txwizard/WizardWrx_NET_API.git
        id: ASCIICharacter
        path: ../ASCIIInfo/ASCIICharacterDisplayInfo.cs
        startLine: 200
      summary: "\nGets the Unicode character represented by the code.\n"
      example: []
      syntax:
        content:
          CSharp: public char ASCIICharacter { get; }
          VB: Public ReadOnly Property ASCIICharacter As Char
        parameters: []
        return:
          type: System.Char
      overload: WizardWrx.ASCIICharacterDisplayInfo.ASCIICharacter*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: WizardWrx.ASCIICharacterDisplayInfo.AlternateText
      commentId: P:WizardWrx.ASCIICharacterDisplayInfo.AlternateText
      language: CSharp
      name:
        CSharp: AlternateText
        VB: AlternateText
      nameWithType:
        CSharp: ASCIICharacterDisplayInfo.AlternateText
        VB: ASCIICharacterDisplayInfo.AlternateText
      qualifiedName:
        CSharp: WizardWrx.ASCIICharacterDisplayInfo.AlternateText
        VB: WizardWrx.ASCIICharacterDisplayInfo.AlternateText
      type: Property
      assemblies:
      - WizardWrx.ASCIIInfo
      namespace: WizardWrx
      source:
        remote:
          path: ASCIIInfo/ASCIICharacterDisplayInfo.cs
          branch: master
          repo: https://github.com/txwizard/WizardWrx_NET_API.git
        id: AlternateText
        path: ../ASCIIInfo/ASCIICharacterDisplayInfo.cs
        startLine: 207
      summary: "\nGets the alternate text, if one exists, or returns the empty string.\n"
      example: []
      syntax:
        content:
          CSharp: public string AlternateText { get; }
          VB: Public ReadOnly Property AlternateText As String
        parameters: []
        return:
          type: System.String
      overload: WizardWrx.ASCIICharacterDisplayInfo.AlternateText*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: WizardWrx.ASCIICharacterDisplayInfo.Comment
      commentId: P:WizardWrx.ASCIICharacterDisplayInfo.Comment
      language: CSharp
      name:
        CSharp: Comment
        VB: Comment
      nameWithType:
        CSharp: ASCIICharacterDisplayInfo.Comment
        VB: ASCIICharacterDisplayInfo.Comment
      qualifiedName:
        CSharp: WizardWrx.ASCIICharacterDisplayInfo.Comment
        VB: WizardWrx.ASCIICharacterDisplayInfo.Comment
      type: Property
      assemblies:
      - WizardWrx.ASCIIInfo
      namespace: WizardWrx
      source:
        remote:
          path: ASCIIInfo/ASCIICharacterDisplayInfo.cs
          branch: master
          repo: https://github.com/txwizard/WizardWrx_NET_API.git
        id: Comment
        path: ../ASCIIInfo/ASCIICharacterDisplayInfo.cs
        startLine: 223
      summary: "\nGets the associated comment, if one exists, or returns the empty\nstring.\n"
      example: []
      syntax:
        content:
          CSharp: public string Comment { get; }
          VB: Public ReadOnly Property Comment As String
        parameters: []
        return:
          type: System.String
      overload: WizardWrx.ASCIICharacterDisplayInfo.Comment*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: WizardWrx.ASCIICharacterDisplayInfo.Code
      commentId: P:WizardWrx.ASCIICharacterDisplayInfo.Code
      language: CSharp
      name:
        CSharp: Code
        VB: Code
      nameWithType:
        CSharp: ASCIICharacterDisplayInfo.Code
        VB: ASCIICharacterDisplayInfo.Code
      qualifiedName:
        CSharp: WizardWrx.ASCIICharacterDisplayInfo.Code
        VB: WizardWrx.ASCIICharacterDisplayInfo.Code
      type: Property
      assemblies:
      - WizardWrx.ASCIIInfo
      namespace: WizardWrx
      source:
        remote:
          path: ASCIIInfo/ASCIICharacterDisplayInfo.cs
          branch: master
          repo: https://github.com/txwizard/WizardWrx_NET_API.git
        id: Code
        path: ../ASCIIInfo/ASCIICharacterDisplayInfo.cs
        startLine: 238
      summary: "\nGets the raw ASCII code, as an unsigned integer.\n"
      example: []
      syntax:
        content:
          CSharp: public uint Code { get; }
          VB: Public ReadOnly Property Code As UInteger
        parameters: []
        return:
          type: System.UInt32
      overload: WizardWrx.ASCIICharacterDisplayInfo.Code*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: WizardWrx.ASCIICharacterDisplayInfo.CodeAsDecimal
      commentId: P:WizardWrx.ASCIICharacterDisplayInfo.CodeAsDecimal
      language: CSharp
      name:
        CSharp: CodeAsDecimal
        VB: CodeAsDecimal
      nameWithType:
        CSharp: ASCIICharacterDisplayInfo.CodeAsDecimal
        VB: ASCIICharacterDisplayInfo.CodeAsDecimal
      qualifiedName:
        CSharp: WizardWrx.ASCIICharacterDisplayInfo.CodeAsDecimal
        VB: WizardWrx.ASCIICharacterDisplayInfo.CodeAsDecimal
      type: Property
      assemblies:
      - WizardWrx.ASCIIInfo
      namespace: WizardWrx
      source:
        remote:
          path: ASCIIInfo/ASCIICharacterDisplayInfo.cs
          branch: master
          repo: https://github.com/txwizard/WizardWrx_NET_API.git
        id: CodeAsDecimal
        path: ../ASCIIInfo/ASCIICharacterDisplayInfo.cs
        startLine: 246
      summary: "\nGets a string representation of the raw ASCII code, as a decimal\nnumber.\n"
      example: []
      syntax:
        content:
          CSharp: public string CodeAsDecimal { get; }
          VB: Public ReadOnly Property CodeAsDecimal As String
        parameters: []
        return:
          type: System.String
      overload: WizardWrx.ASCIICharacterDisplayInfo.CodeAsDecimal*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: WizardWrx.ASCIICharacterDisplayInfo.CodeAsHexadecimal
      commentId: P:WizardWrx.ASCIICharacterDisplayInfo.CodeAsHexadecimal
      language: CSharp
      name:
        CSharp: CodeAsHexadecimal
        VB: CodeAsHexadecimal
      nameWithType:
        CSharp: ASCIICharacterDisplayInfo.CodeAsHexadecimal
        VB: ASCIICharacterDisplayInfo.CodeAsHexadecimal
      qualifiedName:
        CSharp: WizardWrx.ASCIICharacterDisplayInfo.CodeAsHexadecimal
        VB: WizardWrx.ASCIICharacterDisplayInfo.CodeAsHexadecimal
      type: Property
      assemblies:
      - WizardWrx.ASCIIInfo
      namespace: WizardWrx
      source:
        remote:
          path: ASCIIInfo/ASCIICharacterDisplayInfo.cs
          branch: master
          repo: https://github.com/txwizard/WizardWrx_NET_API.git
        id: CodeAsHexadecimal
        path: ../ASCIIInfo/ASCIICharacterDisplayInfo.cs
        startLine: 254
      summary: "\nGets a string representation of the raw ASCII code, as a hexadecimal\nnumber.\n"
      example: []
      syntax:
        content:
          CSharp: public string CodeAsHexadecimal { get; }
          VB: Public ReadOnly Property CodeAsHexadecimal As String
        parameters: []
        return:
          type: System.String
      overload: WizardWrx.ASCIICharacterDisplayInfo.CodeAsHexadecimal*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: WizardWrx.ASCIICharacterDisplayInfo.DisplayText
      commentId: P:WizardWrx.ASCIICharacterDisplayInfo.DisplayText
      language: CSharp
      name:
        CSharp: DisplayText
        VB: DisplayText
      nameWithType:
        CSharp: ASCIICharacterDisplayInfo.DisplayText
        VB: ASCIICharacterDisplayInfo.DisplayText
      qualifiedName:
        CSharp: WizardWrx.ASCIICharacterDisplayInfo.DisplayText
        VB: WizardWrx.ASCIICharacterDisplayInfo.DisplayText
      type: Property
      assemblies:
      - WizardWrx.ASCIIInfo
      namespace: WizardWrx
      source:
        remote:
          path: ASCIIInfo/ASCIICharacterDisplayInfo.cs
          branch: master
          repo: https://github.com/txwizard/WizardWrx_NET_API.git
        id: DisplayText
        path: ../ASCIIInfo/ASCIICharacterDisplayInfo.cs
        startLine: 261
      summary: "\nGets the display text, regardless of source, from one place.\n"
      example: []
      syntax:
        content:
          CSharp: public string DisplayText { get; }
          VB: Public ReadOnly Property DisplayText As String
        parameters: []
        return:
          type: System.String
      overload: WizardWrx.ASCIICharacterDisplayInfo.DisplayText*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: WizardWrx.ASCIICharacterDisplayInfo.ToString
      commentId: M:WizardWrx.ASCIICharacterDisplayInfo.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: ASCIICharacterDisplayInfo.ToString()
        VB: ASCIICharacterDisplayInfo.ToString()
      qualifiedName:
        CSharp: WizardWrx.ASCIICharacterDisplayInfo.ToString()
        VB: WizardWrx.ASCIICharacterDisplayInfo.ToString()
      type: Method
      assemblies:
      - WizardWrx.ASCIIInfo
      namespace: WizardWrx
      source:
        remote:
          path: ASCIIInfo/ASCIICharacterDisplayInfo.cs
          branch: master
          repo: https://github.com/txwizard/WizardWrx_NET_API.git
        id: ToString
        path: ../ASCIIInfo/ASCIICharacterDisplayInfo.cs
        startLine: 281
      summary: "\nOverride ToString to render all three defined formats.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: "\nThe return value is a string containing a printable representation\nof the character, followed by its hexadecimal and decimal values,\nboth enclosed in a single pair of parenethese.\n"
      overload: WizardWrx.ASCIICharacterDisplayInfo.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: WizardWrx.ASCIICharacterDisplayInfo.DisplayCharacterInfo(System.Char)
      commentId: M:WizardWrx.ASCIICharacterDisplayInfo.DisplayCharacterInfo(System.Char)
      language: CSharp
      name:
        CSharp: DisplayCharacterInfo(Char)
        VB: DisplayCharacterInfo(Char)
      nameWithType:
        CSharp: ASCIICharacterDisplayInfo.DisplayCharacterInfo(Char)
        VB: ASCIICharacterDisplayInfo.DisplayCharacterInfo(Char)
      qualifiedName:
        CSharp: WizardWrx.ASCIICharacterDisplayInfo.DisplayCharacterInfo(System.Char)
        VB: WizardWrx.ASCIICharacterDisplayInfo.DisplayCharacterInfo(System.Char)
      type: Method
      assemblies:
      - WizardWrx.ASCIIInfo
      namespace: WizardWrx
      source:
        remote:
          path: ASCIIInfo/ASCIICharacterDisplayInfo.cs
          branch: master
          repo: https://github.com/txwizard/WizardWrx_NET_API.git
        id: DisplayCharacterInfo
        path: ../ASCIIInfo/ASCIICharacterDisplayInfo.cs
        startLine: 303
      summary: "\nCreate a ASCIICharacterDisplayInfo instance to represent a specified\nASCII character, and call its ToString method to return all three\nrepresentations of it (Printable, Hexadecimal, and Decimal, in that\norder.\n"
      example: []
      syntax:
        content:
          CSharp: public static string DisplayCharacterInfo(char pchr)
          VB: Public Shared Function DisplayCharacterInfo(pchr As Char) As String
        parameters:
        - id: pchr
          type: System.Char
          description: "\nSpecify the character for which to render the three representations.\n"
        return:
          type: System.String
          description: "\nReturn the output of ToString on the ASCIICharacterDisplayInfo.\n"
      overload: WizardWrx.ASCIICharacterDisplayInfo.DisplayCharacterInfo*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    references:
      WizardWrx.ASCII_Character_Display_Table: 
  - id: WizardWrx.ASCII_Character_Display_Table
    commentId: T:WizardWrx.ASCII_Character_Display_Table
    language: CSharp
    name:
      CSharp: ASCII_Character_Display_Table
      VB: ASCII_Character_Display_Table
    nameWithType:
      CSharp: ASCII_Character_Display_Table
      VB: ASCII_Character_Display_Table
    qualifiedName:
      CSharp: WizardWrx.ASCII_Character_Display_Table
      VB: WizardWrx.ASCII_Character_Display_Table
    type: Class
    assemblies:
    - WizardWrx.ASCIIInfo
    namespace: WizardWrx
    source:
      remote:
        path: ASCIIInfo/ASCII_Character_Display_Table.cs
        branch: master
        repo: https://github.com/txwizard/WizardWrx_NET_API.git
      id: ASCII_Character_Display_Table
      path: ../ASCIIInfo/ASCII_Character_Display_Table.cs
      startLine: 112
    summary: "\nProvide read only access to a table of ASCII characters and text to\ndisplay for selected special characters.\n"
    example:
    - "\nThe ASCII code for a space is 32. ASCIICharacterDisplayInfo[32], for C#,\nor ASCIICharacterDisplayInfo(32), for Visual Basic, returns the item for\nthe space character.\n\nLikewise, the ASCII code for a horizontal TAB character is 9. Hence, the\nC# expression ASCIICharacterDisplayInfo[9] evaluates to the information\nabout the TAB character. Likewise, ASCIICharacterDisplayInfo(9) does the\nsame thing in Visual Basic.\n\nThe following example comes from production code in the class library\nthat motivated me to create this library.\n\nASCIICharacterDisplayInfo [ ] asciiCharTbl = ASCII_Character_Display_Table.GetTheSingleInstance ( ).AllASCIICharacters;\nStringBuilder sbTheBadChar = new StringBuilder ( );\nsbTheBadChar.Append ( asciiCharTbl [ ( uint ) _chrBad ].DisplayText );\n\nObviously, more things go into the message before it is returned to the\ncalling routine.\n"
    syntax:
      content:
        CSharp: public class ASCII_Character_Display_Table
        VB: Public Class ASCII_Character_Display_Table
    seealso:
    - linkId: WizardWrx.ASCIICharacterDisplayInfo
      commentId: T:WizardWrx.ASCIICharacterDisplayInfo
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: WizardWrx.ASCII_Character_Display_Table.GetTheSingleInstance
      commentId: M:WizardWrx.ASCII_Character_Display_Table.GetTheSingleInstance
      language: CSharp
      name:
        CSharp: GetTheSingleInstance()
        VB: GetTheSingleInstance()
      nameWithType:
        CSharp: ASCII_Character_Display_Table.GetTheSingleInstance()
        VB: ASCII_Character_Display_Table.GetTheSingleInstance()
      qualifiedName:
        CSharp: WizardWrx.ASCII_Character_Display_Table.GetTheSingleInstance()
        VB: WizardWrx.ASCII_Character_Display_Table.GetTheSingleInstance()
      type: Method
      assemblies:
      - WizardWrx.ASCIIInfo
      namespace: WizardWrx
      source:
        remote:
          path: ASCIIInfo/ASCII_Character_Display_Table.cs
          branch: master
          repo: https://github.com/txwizard/WizardWrx_NET_API.git
        id: GetTheSingleInstance
        path: ../ASCIIInfo/ASCII_Character_Display_Table.cs
        startLine: 158
      summary: "\nGets a reference to the single ASCII_Character_Display_Table\ninstance.\n"
      remarks: "\nThe example given under the help topic for this class shows you that\nyou need not actually allocate storage for the instance, since what\nyou really need is a copy of the ASCIICharacterDisplayInfo table,\navailable through the read only AllASCIICharacters property, which\ncan be assigned directly to an AllASCIICharacters array.\n\nTo preserve its independence, this class uses the archaic Singleton\nimplementation, rather than inherit from the abstract base class in\nWizardWrx.DllServices2.dll, although I could certainly fix that by\nlinking the source code into this assembly. Since that creates an\neven more awkward dependency, and I don&apos;t want to put an actual copy\nin this source tree, I&apos;ll leave it alone. After all, this class is\nnot exactly a high traffic property.\n"
      example: []
      syntax:
        content:
          CSharp: public static ASCII_Character_Display_Table GetTheSingleInstance()
          VB: Public Shared Function GetTheSingleInstance As ASCII_Character_Display_Table
        return:
          type: WizardWrx.ASCII_Character_Display_Table
          description: "\nThe return value is a reference to the single instance of this class\nthat is created in response to the first call to this method. Please\nsee the remarks.\n"
      overload: WizardWrx.ASCII_Character_Display_Table.GetTheSingleInstance*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.ASCII_Character_Display_Table.AllASCIICharacters
      commentId: P:WizardWrx.ASCII_Character_Display_Table.AllASCIICharacters
      language: CSharp
      name:
        CSharp: AllASCIICharacters
        VB: AllASCIICharacters
      nameWithType:
        CSharp: ASCII_Character_Display_Table.AllASCIICharacters
        VB: ASCII_Character_Display_Table.AllASCIICharacters
      qualifiedName:
        CSharp: WizardWrx.ASCII_Character_Display_Table.AllASCIICharacters
        VB: WizardWrx.ASCII_Character_Display_Table.AllASCIICharacters
      type: Property
      assemblies:
      - WizardWrx.ASCIIInfo
      namespace: WizardWrx
      source:
        remote:
          path: ASCIIInfo/ASCII_Character_Display_Table.cs
          branch: master
          repo: https://github.com/txwizard/WizardWrx_NET_API.git
        id: AllASCIICharacters
        path: ../ASCIIInfo/ASCII_Character_Display_Table.cs
        startLine: 174
      summary: "\nGets the populated ASCIICharacterDisplayInfo array that is the sole\npublic property of this class, which exists to ensure that exactly\none instance of this table exists.\n"
      example: []
      syntax:
        content:
          CSharp: public ASCIICharacterDisplayInfo[] AllASCIICharacters { get; }
          VB: Public ReadOnly Property AllASCIICharacters As ASCIICharacterDisplayInfo()
        parameters: []
        return:
          type: WizardWrx.ASCIICharacterDisplayInfo[]
      overload: WizardWrx.ASCII_Character_Display_Table.AllASCIICharacters*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    references:
      WizardWrx.ASCIICharacterDisplayInfo: 
references:
  WizardWrx.ASCII_Character_Display_Table:
    name:
      CSharp:
      - id: WizardWrx.ASCII_Character_Display_Table
        name: ASCII_Character_Display_Table
        nameWithType: ASCII_Character_Display_Table
        qualifiedName: WizardWrx.ASCII_Character_Display_Table
      VB:
      - id: WizardWrx.ASCII_Character_Display_Table
        name: ASCII_Character_Display_Table
        nameWithType: ASCII_Character_Display_Table
        qualifiedName: WizardWrx.ASCII_Character_Display_Table
    isDefinition: true
    parent: WizardWrx
    commentId: T:WizardWrx.ASCII_Character_Display_Table
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.Char:
    name:
      CSharp:
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
      VB:
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Char
  WizardWrx.ASCIICharacterDisplayInfo.ASCIICharacter*:
    name:
      CSharp:
      - id: WizardWrx.ASCIICharacterDisplayInfo.ASCIICharacter*
        name: ASCIICharacter
        nameWithType: ASCIICharacterDisplayInfo.ASCIICharacter
        qualifiedName: WizardWrx.ASCIICharacterDisplayInfo.ASCIICharacter
      VB:
      - id: WizardWrx.ASCIICharacterDisplayInfo.ASCIICharacter*
        name: ASCIICharacter
        nameWithType: ASCIICharacterDisplayInfo.ASCIICharacter
        qualifiedName: WizardWrx.ASCIICharacterDisplayInfo.ASCIICharacter
    isDefinition: true
    commentId: Overload:WizardWrx.ASCIICharacterDisplayInfo.ASCIICharacter
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  WizardWrx.ASCIICharacterDisplayInfo.AlternateText*:
    name:
      CSharp:
      - id: WizardWrx.ASCIICharacterDisplayInfo.AlternateText*
        name: AlternateText
        nameWithType: ASCIICharacterDisplayInfo.AlternateText
        qualifiedName: WizardWrx.ASCIICharacterDisplayInfo.AlternateText
      VB:
      - id: WizardWrx.ASCIICharacterDisplayInfo.AlternateText*
        name: AlternateText
        nameWithType: ASCIICharacterDisplayInfo.AlternateText
        qualifiedName: WizardWrx.ASCIICharacterDisplayInfo.AlternateText
    isDefinition: true
    commentId: Overload:WizardWrx.ASCIICharacterDisplayInfo.AlternateText
  WizardWrx.ASCIICharacterDisplayInfo.Comment*:
    name:
      CSharp:
      - id: WizardWrx.ASCIICharacterDisplayInfo.Comment*
        name: Comment
        nameWithType: ASCIICharacterDisplayInfo.Comment
        qualifiedName: WizardWrx.ASCIICharacterDisplayInfo.Comment
      VB:
      - id: WizardWrx.ASCIICharacterDisplayInfo.Comment*
        name: Comment
        nameWithType: ASCIICharacterDisplayInfo.Comment
        qualifiedName: WizardWrx.ASCIICharacterDisplayInfo.Comment
    isDefinition: true
    commentId: Overload:WizardWrx.ASCIICharacterDisplayInfo.Comment
  System.UInt32:
    name:
      CSharp:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      VB:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt32
  WizardWrx.ASCIICharacterDisplayInfo.Code*:
    name:
      CSharp:
      - id: WizardWrx.ASCIICharacterDisplayInfo.Code*
        name: Code
        nameWithType: ASCIICharacterDisplayInfo.Code
        qualifiedName: WizardWrx.ASCIICharacterDisplayInfo.Code
      VB:
      - id: WizardWrx.ASCIICharacterDisplayInfo.Code*
        name: Code
        nameWithType: ASCIICharacterDisplayInfo.Code
        qualifiedName: WizardWrx.ASCIICharacterDisplayInfo.Code
    isDefinition: true
    commentId: Overload:WizardWrx.ASCIICharacterDisplayInfo.Code
  WizardWrx.ASCIICharacterDisplayInfo.CodeAsDecimal*:
    name:
      CSharp:
      - id: WizardWrx.ASCIICharacterDisplayInfo.CodeAsDecimal*
        name: CodeAsDecimal
        nameWithType: ASCIICharacterDisplayInfo.CodeAsDecimal
        qualifiedName: WizardWrx.ASCIICharacterDisplayInfo.CodeAsDecimal
      VB:
      - id: WizardWrx.ASCIICharacterDisplayInfo.CodeAsDecimal*
        name: CodeAsDecimal
        nameWithType: ASCIICharacterDisplayInfo.CodeAsDecimal
        qualifiedName: WizardWrx.ASCIICharacterDisplayInfo.CodeAsDecimal
    isDefinition: true
    commentId: Overload:WizardWrx.ASCIICharacterDisplayInfo.CodeAsDecimal
  WizardWrx.ASCIICharacterDisplayInfo.CodeAsHexadecimal*:
    name:
      CSharp:
      - id: WizardWrx.ASCIICharacterDisplayInfo.CodeAsHexadecimal*
        name: CodeAsHexadecimal
        nameWithType: ASCIICharacterDisplayInfo.CodeAsHexadecimal
        qualifiedName: WizardWrx.ASCIICharacterDisplayInfo.CodeAsHexadecimal
      VB:
      - id: WizardWrx.ASCIICharacterDisplayInfo.CodeAsHexadecimal*
        name: CodeAsHexadecimal
        nameWithType: ASCIICharacterDisplayInfo.CodeAsHexadecimal
        qualifiedName: WizardWrx.ASCIICharacterDisplayInfo.CodeAsHexadecimal
    isDefinition: true
    commentId: Overload:WizardWrx.ASCIICharacterDisplayInfo.CodeAsHexadecimal
  WizardWrx.ASCIICharacterDisplayInfo.DisplayText*:
    name:
      CSharp:
      - id: WizardWrx.ASCIICharacterDisplayInfo.DisplayText*
        name: DisplayText
        nameWithType: ASCIICharacterDisplayInfo.DisplayText
        qualifiedName: WizardWrx.ASCIICharacterDisplayInfo.DisplayText
      VB:
      - id: WizardWrx.ASCIICharacterDisplayInfo.DisplayText*
        name: DisplayText
        nameWithType: ASCIICharacterDisplayInfo.DisplayText
        qualifiedName: WizardWrx.ASCIICharacterDisplayInfo.DisplayText
    isDefinition: true
    commentId: Overload:WizardWrx.ASCIICharacterDisplayInfo.DisplayText
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  WizardWrx.ASCIICharacterDisplayInfo.ToString*:
    name:
      CSharp:
      - id: WizardWrx.ASCIICharacterDisplayInfo.ToString*
        name: ToString
        nameWithType: ASCIICharacterDisplayInfo.ToString
        qualifiedName: WizardWrx.ASCIICharacterDisplayInfo.ToString
      VB:
      - id: WizardWrx.ASCIICharacterDisplayInfo.ToString*
        name: ToString
        nameWithType: ASCIICharacterDisplayInfo.ToString
        qualifiedName: WizardWrx.ASCIICharacterDisplayInfo.ToString
    isDefinition: true
    commentId: Overload:WizardWrx.ASCIICharacterDisplayInfo.ToString
  WizardWrx.ASCIICharacterDisplayInfo.DisplayCharacterInfo*:
    name:
      CSharp:
      - id: WizardWrx.ASCIICharacterDisplayInfo.DisplayCharacterInfo*
        name: DisplayCharacterInfo
        nameWithType: ASCIICharacterDisplayInfo.DisplayCharacterInfo
        qualifiedName: WizardWrx.ASCIICharacterDisplayInfo.DisplayCharacterInfo
      VB:
      - id: WizardWrx.ASCIICharacterDisplayInfo.DisplayCharacterInfo*
        name: DisplayCharacterInfo
        nameWithType: ASCIICharacterDisplayInfo.DisplayCharacterInfo
        qualifiedName: WizardWrx.ASCIICharacterDisplayInfo.DisplayCharacterInfo
    isDefinition: true
    commentId: Overload:WizardWrx.ASCIICharacterDisplayInfo.DisplayCharacterInfo
  WizardWrx.ASCIICharacterDisplayInfo:
    name:
      CSharp:
      - id: WizardWrx.ASCIICharacterDisplayInfo
        name: ASCIICharacterDisplayInfo
        nameWithType: ASCIICharacterDisplayInfo
        qualifiedName: WizardWrx.ASCIICharacterDisplayInfo
      VB:
      - id: WizardWrx.ASCIICharacterDisplayInfo
        name: ASCIICharacterDisplayInfo
        nameWithType: ASCIICharacterDisplayInfo
        qualifiedName: WizardWrx.ASCIICharacterDisplayInfo
    isDefinition: true
    commentId: T:WizardWrx.ASCIICharacterDisplayInfo
  WizardWrx:
    name:
      CSharp:
      - name: WizardWrx
        nameWithType: WizardWrx
        qualifiedName: WizardWrx
      VB:
      - name: WizardWrx
        nameWithType: WizardWrx
        qualifiedName: WizardWrx
    isDefinition: true
    commentId: N:WizardWrx
  WizardWrx.ASCII_Character_Display_Table.GetTheSingleInstance*:
    name:
      CSharp:
      - id: WizardWrx.ASCII_Character_Display_Table.GetTheSingleInstance*
        name: GetTheSingleInstance
        nameWithType: ASCII_Character_Display_Table.GetTheSingleInstance
        qualifiedName: WizardWrx.ASCII_Character_Display_Table.GetTheSingleInstance
      VB:
      - id: WizardWrx.ASCII_Character_Display_Table.GetTheSingleInstance*
        name: GetTheSingleInstance
        nameWithType: ASCII_Character_Display_Table.GetTheSingleInstance
        qualifiedName: WizardWrx.ASCII_Character_Display_Table.GetTheSingleInstance
    isDefinition: true
    commentId: Overload:WizardWrx.ASCII_Character_Display_Table.GetTheSingleInstance
  WizardWrx.ASCIICharacterDisplayInfo[]:
    name:
      CSharp:
      - id: WizardWrx.ASCIICharacterDisplayInfo
        name: ASCIICharacterDisplayInfo
        nameWithType: ASCIICharacterDisplayInfo
        qualifiedName: WizardWrx.ASCIICharacterDisplayInfo
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: WizardWrx.ASCIICharacterDisplayInfo
        name: ASCIICharacterDisplayInfo
        nameWithType: ASCIICharacterDisplayInfo
        qualifiedName: WizardWrx.ASCIICharacterDisplayInfo
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  WizardWrx.ASCII_Character_Display_Table.AllASCIICharacters*:
    name:
      CSharp:
      - id: WizardWrx.ASCII_Character_Display_Table.AllASCIICharacters*
        name: AllASCIICharacters
        nameWithType: ASCII_Character_Display_Table.AllASCIICharacters
        qualifiedName: WizardWrx.ASCII_Character_Display_Table.AllASCIICharacters
      VB:
      - id: WizardWrx.ASCII_Character_Display_Table.AllASCIICharacters*
        name: AllASCIICharacters
        nameWithType: ASCII_Character_Display_Table.AllASCIICharacters
        qualifiedName: WizardWrx.ASCII_Character_Display_Table.AllASCIICharacters
    isDefinition: true
    commentId: Overload:WizardWrx.ASCII_Character_Display_Table.AllASCIICharacters
